{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Project: A:Platform64 \u00b6 \u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2557 \u2588\u2588\u2557 \u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551 \u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u255a\u2550\u2550\u2588\u2588\u2554\u2550\u2550\u255d\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u2588\u2588\u2554\u2550\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d \u2588\u2588\u2551 \u2588\u2588\u2551 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2551\u255a\u2550\u255d\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2551 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2551 \u2588\u2588\u2551 \u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2551 \u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2554\u2588\u2588\u2588\u2588\u2554\u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2551 \u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2551\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2550\u255d \u2588\u2588\u2551 \u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2551 \u2588\u2588\u2551 \u2588\u2588\u2554\u2550\u2550\u255d \u2588\u2588\u2551 \u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551\u255a\u2588\u2588\u2554\u255d\u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2550\u2588\u2588\u2557\u255a\u2550\u2550\u2550\u2550\u2588\u2588\u2551 \u2588\u2588\u2551 \u2588\u2588\u2551\u255a\u2550\u255d\u2588\u2588\u2551 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2551 \u2588\u2588\u2551 \u2588\u2588\u2551 \u2588\u2588\u2551 \u255a\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2551 \u2588\u2588\u2551\u2588\u2588\u2551 \u255a\u2550\u255d \u2588\u2588\u2551\u255a\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d \u2588\u2588\u2551 \u255a\u2550\u255d \u255a\u2550\u255d \u255a\u2550\u255d \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u255d \u255a\u2550\u255d \u255a\u2550\u255d \u255a\u2550\u255d \u255a\u2550\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u255d \u255a\u2550\u255d\u255a\u2550\u255d \u255a\u2550\u255d \u255a\u2550\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u255d Overview \u00b6 A:Platform64 is an automated infrastructure-as-code management platform based on Ansible for small to medium computing environments. Design Principles \u00b6 The platform is designed to take full control of the target infrastructure under the following principles: Automate everything : all management tasks should be automated. Exceptions should be carefully evaluated and only used when no automation is possible. Separate code from end-state configuration : automation scripts must be developed to define a clear and well-documented parameter interface for setting end-state and behaviour data. Ansible Roles must be specialized : roles will be used to manage single components or services. Dependencies must be clearly documented for cases where the role relies on features provided by other roles. Infrastructure data model : the infrastructure will use a data model to represent the target end-state and run-time behaviour. The model includes the following elements: Site : Represents a group of Nodes that are managed by the same Control Node. Node : Compute node that is capable of hosting software components and that is fully managed by the Control Node. Component : Individual software product that is installed in a Node. Service : Group of Components configured in one or more Nodes to serve a particular function. Multi-platform friendly : roles must be prepared to separate platform-specific code into individual files that can be loaded on-demand. Roles should not be allowed to execute on platforms that are not supported. Test everything : roles must include testing code to check platform compatibility, code sanity, standardization, integration and functionality. Architecture \u00b6 The platform defines the following components: Control Node : compute node that will host the Ansible engine and the A:Platform64 platform. Management Node : compute nodes that will me managed by A:Platform64 Site : group of hosts that shares a set of configuration files. Sites can be used to isolated environments (e.g.: prod, dev, test, etc.) Communication between the Control Node and the Management Nodes will be done using OpenSSH and regular Linux user accounts with public/private key pairs. Root privilege will be provided by Sudo. The Control Node will have the following directory structure to store A:Platform64 components: Path Content etc/ Configuration files and keys inventories/ Ansible inventory files, host_vars and group_vars collections/ Ansible Collections installed from Ansible-Galaxy roles/ Custom Ansible Roles playbooks/ Custom Ansible Playbooks files/ Ansible data files for custom playbooks and roles templates/ Custom Ansible templates tests/ Ansible playbooks for testing Custom Ansible Roles and Playbooks vars/ Ansible variables for custom playbooks and roles logs/ Execution logs var/ Variable and temporal data store bin/ Shell scripts docs/ Repository for storing site-specific documentation The directory structure and configuration are automatically created during the Deployment Procedure Automation Scripts \u00b6 The platform uses Ansible Roles to implement automation scripts. Roles are grouped into Ansible Collections based on the managed component type: Collection Description application Ansible Roles for automating office applications provisioning automation Ansible Roles for managing automation tools provisioning backup Ansible Roles for automating backup tools provisioning cloud Ansible Roles for automating cloud tools provisioning container Ansible Roles for automating container tools provisioning database Ansible Roles for automating database tools provisioning development Ansible Roles for automating development environment provisioning devops Ansible Roles for automating devops tools provisioning hardware Ansible Roles for automating hardware drivers provisioning hypervisor Ansible Roles for automating hypervisor tools provisioning infrastructure Ansible Roles for automating infrastructure tools provisioning monitor Ansible Roles for automating monitoring tools provisioning network Ansible Roles for automating network tools provisioning security Ansible Roles for automating security tools provisioning storage Ansible Roles for automating storage management system Ansible Roles for automating operating system management web Ansible Roles for automating web tools provisioning Services are implemented in the form of Ansible playbooks. Each playbook will integrate the roles needed to implement the service along with their own set of end-state and inventory configurations: Playbooks location: playbooks/<SITE>/ End-State configuration location: inventories/<SITE>/group_vars/<GROUP_NAME>/ Inventory definition: inventories/<SITE>/<INVENTORY>.ini Playbook Description bootstrap_aplatform64_nodes Bootstrap Ansible Managed nodes manage_aplatform64_servers Manage Ansible Control node manage_aplatform64_nodes Manage Ansible Managed nodes manage_cloud_control_nodes Provision public cloud management tools manage_cloud_realm Manage cloud provider accounts, users and organizations as a single entity manage_dev_nodes Provision software development environments manage_doc_sites Provision documentation site management tools manage_file_servers Manage file servers manage_git_servers Manage GIT servers manage_hpc_nodes Provision high-performance computing environments manage_jenkins_controllers Manage Jenkins controllers manage_jenkins_workers Manage Jenkins workers manage_linux_servers Manage Linux Servers manage_linux_workstations Manage Linux Workstations manage_macos_workstations Manage MacOS Workstations manage_office_nodes Provision office productivity applications manage_test_nodes Provision software testing tools Deployment \u00b6 OS Compatibility \u00b6 A:Platform64 is compatible with the following Linux operating systems: CentOS8 RedHat8 AlmaLinux8 OracleLinux8 Ubuntu20 Ubuntu21 Fedora33 Fedora35 Debian10 Debian11 MacOSX12 Notice that roles have their own compatibility matrix. Refer to the respective documentation for further details. Prerequisites \u00b6 Control Node: Python 3 OpenSSH Sudo Regular user account with sudo privilege for running the installer Managed Nodes: Python 3 OpenSSH Sudo Regular user account with sudo privilege for the bootstrap process Installation \u00b6 Download the installation script and resources: install-aplatform64 curl -O https://raw.githubusercontent.com/aplatform64/automation/main/roles/auto_aplatform64/files/installer/install-aplatform64 chmod 0755 install-aplatform64 Run the installation script with the default options. See the documentation for more options ./install-aplatform64 -x Done. The A:Platform64 platform is now installed. Usage \u00b6 Initialize the environment \u00b6 To start using A:Platform64 change to the Ansible Control user and set the environment: # Switch to the Ansible Control user sudo su - sitectl # Set the environment for Ansible source /opt/aplatform64/bin/site/ansible_control.env workon aplatform64 # Go to the install location cd /opt/aplatform64/ Register managed hosts \u00b6 Register the target remote host in the bootstrap process by adding it to the inventory: file: inventories/site/aplatform64_service.ini group [bootstrap_aplatform64_nodes_distro] The bootstrap process will connect to the managed node using a pre-existing user account with root privilege and then create the dedicated account for Ansible. Register the bootstrap user details and review the dedicated user definition: file: inventories/site/group_vars/bootstrap_aplatform64_nodes/auto_ansible_node.yml variable auto_ansible_node_bootstrap: variable auto_ansible_node_user: file: inventories/site/group_vars/aplatform64_nodes/auto_ansible_node.yml variable auto_ansible_node_user: Execute the bootstrap process: /opt/aplatform64/bin/ap64.sh -n -p bootstrap_aplatform64_nodes -s \" ${ APLATFORM64_SITE } \" The host is now ready for Ansible. Promote the hostname by removing it from the [bootstrap_aplatform64_nodes_distro] group and adding it to: File: inventories/site/aplatform64_service.ini Host Group: aplatform64_nodes Run automation scripts \u00b6 Use any of the predefined playbooks and customize the default end-state definitions for the group or create per host definitions. For example, to configure workstations and notebooks for office work: Add the target hostname to the inventory: inventories/site/office_nodes.ini Review default end-state configuration: inventories/site/group_vars/office_nodes/* Run the playgook: ansible-playbook \\ -i \"inventories/ ${ APLATFORM64_SITE } /office_nodes.ini\" \\ \"playbooks/ ${ APLATFORM64_SITE } /manage_office_nodes.yml\" Additional playbooks and roles can be added to further customize the platform. In addition to the standard ansible CLI commands, A:Platform64 provides the bin/ap64.sh CLI that can be used for: List/Run playbooks List/Create sites Upgrade collections Update sites configurations Development \u00b6 Environment \u00b6 Use the following instructions for preparing the development environment: Prepare dev tools: Install GIT Install Git Flow Install Python, PIP, Virtual Environment Wrapper Clone GIT repositories # Create the main repository cd <YOUR_PROJECTS_PATH> git clone https://github.com/serdigital64/aplatform64 cd aplatform64 # Create module repositories as git submodules git submodule init # Update modules git submodule update # Enable main branch on submodules git submodule foreach \"git checkout main\" ; git submodule foreach \"git checkout develop\" # (Optional) Initialize git flow. Production branch:main, use defaults for the remaining branches git submodule foreach \"git flow init\" Adjust environment variables to reflect your configuration: # Copy environment definition files from templates: cp dot.local .local cp dot.secrets .secrets # Review and update content for both files Create Python Virtual Environment Wrapper workspace source .local source .env source \" $DEVAP_VEW_LOADER \" mkvirtualenv aplatform64 Install Python dev modules pip3 install --upgrade -r requirements-aplatform64.txt The environment is now ready. From now use the following script to load environment variables and set the virtual Python environment: source bin/devap-set Additional scripts are provided to support testing and package building: bin/devap-build : build and publish Ansible Collection packages bin/devap-test : test Ansible Roles using Molecule Repositories \u00b6 Project GIT repository Main: https://github.com/serdigital64/aplatform64 Submodules: https://github.com/aplatform64 Project Ansible Galaxy repository: https://galaxy.ansible.com/serdigital64 Project Documentation: https://aplatform64.readthedocs.io Contributing \u00b6 Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details and the code of conduct . Author \u00b6 SerDigital64 License \u00b6 GPL-3.0-or-later","title":"Home"},{"location":"#project-aplatform64","text":"\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2557 \u2588\u2588\u2557 \u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551 \u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u255a\u2550\u2550\u2588\u2588\u2554\u2550\u2550\u255d\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u2588\u2588\u2554\u2550\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d \u2588\u2588\u2551 \u2588\u2588\u2551 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2551\u255a\u2550\u255d\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2551 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2551 \u2588\u2588\u2551 \u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2551 \u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2554\u2588\u2588\u2588\u2588\u2554\u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2551 \u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2551\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2550\u255d \u2588\u2588\u2551 \u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2551 \u2588\u2588\u2551 \u2588\u2588\u2554\u2550\u2550\u255d \u2588\u2588\u2551 \u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551\u255a\u2588\u2588\u2554\u255d\u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2550\u2588\u2588\u2557\u255a\u2550\u2550\u2550\u2550\u2588\u2588\u2551 \u2588\u2588\u2551 \u2588\u2588\u2551\u255a\u2550\u255d\u2588\u2588\u2551 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2551 \u2588\u2588\u2551 \u2588\u2588\u2551 \u2588\u2588\u2551 \u255a\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2551 \u2588\u2588\u2551\u2588\u2588\u2551 \u255a\u2550\u255d \u2588\u2588\u2551\u255a\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d \u2588\u2588\u2551 \u255a\u2550\u255d \u255a\u2550\u255d \u255a\u2550\u255d \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u255d \u255a\u2550\u255d \u255a\u2550\u255d \u255a\u2550\u255d \u255a\u2550\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u255d \u255a\u2550\u255d\u255a\u2550\u255d \u255a\u2550\u255d \u255a\u2550\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u255d","title":"Project: A:Platform64"},{"location":"#overview","text":"A:Platform64 is an automated infrastructure-as-code management platform based on Ansible for small to medium computing environments.","title":"Overview"},{"location":"#design-principles","text":"The platform is designed to take full control of the target infrastructure under the following principles: Automate everything : all management tasks should be automated. Exceptions should be carefully evaluated and only used when no automation is possible. Separate code from end-state configuration : automation scripts must be developed to define a clear and well-documented parameter interface for setting end-state and behaviour data. Ansible Roles must be specialized : roles will be used to manage single components or services. Dependencies must be clearly documented for cases where the role relies on features provided by other roles. Infrastructure data model : the infrastructure will use a data model to represent the target end-state and run-time behaviour. The model includes the following elements: Site : Represents a group of Nodes that are managed by the same Control Node. Node : Compute node that is capable of hosting software components and that is fully managed by the Control Node. Component : Individual software product that is installed in a Node. Service : Group of Components configured in one or more Nodes to serve a particular function. Multi-platform friendly : roles must be prepared to separate platform-specific code into individual files that can be loaded on-demand. Roles should not be allowed to execute on platforms that are not supported. Test everything : roles must include testing code to check platform compatibility, code sanity, standardization, integration and functionality.","title":"Design Principles"},{"location":"#architecture","text":"The platform defines the following components: Control Node : compute node that will host the Ansible engine and the A:Platform64 platform. Management Node : compute nodes that will me managed by A:Platform64 Site : group of hosts that shares a set of configuration files. Sites can be used to isolated environments (e.g.: prod, dev, test, etc.) Communication between the Control Node and the Management Nodes will be done using OpenSSH and regular Linux user accounts with public/private key pairs. Root privilege will be provided by Sudo. The Control Node will have the following directory structure to store A:Platform64 components: Path Content etc/ Configuration files and keys inventories/ Ansible inventory files, host_vars and group_vars collections/ Ansible Collections installed from Ansible-Galaxy roles/ Custom Ansible Roles playbooks/ Custom Ansible Playbooks files/ Ansible data files for custom playbooks and roles templates/ Custom Ansible templates tests/ Ansible playbooks for testing Custom Ansible Roles and Playbooks vars/ Ansible variables for custom playbooks and roles logs/ Execution logs var/ Variable and temporal data store bin/ Shell scripts docs/ Repository for storing site-specific documentation The directory structure and configuration are automatically created during the Deployment Procedure","title":"Architecture"},{"location":"#automation-scripts","text":"The platform uses Ansible Roles to implement automation scripts. Roles are grouped into Ansible Collections based on the managed component type: Collection Description application Ansible Roles for automating office applications provisioning automation Ansible Roles for managing automation tools provisioning backup Ansible Roles for automating backup tools provisioning cloud Ansible Roles for automating cloud tools provisioning container Ansible Roles for automating container tools provisioning database Ansible Roles for automating database tools provisioning development Ansible Roles for automating development environment provisioning devops Ansible Roles for automating devops tools provisioning hardware Ansible Roles for automating hardware drivers provisioning hypervisor Ansible Roles for automating hypervisor tools provisioning infrastructure Ansible Roles for automating infrastructure tools provisioning monitor Ansible Roles for automating monitoring tools provisioning network Ansible Roles for automating network tools provisioning security Ansible Roles for automating security tools provisioning storage Ansible Roles for automating storage management system Ansible Roles for automating operating system management web Ansible Roles for automating web tools provisioning Services are implemented in the form of Ansible playbooks. Each playbook will integrate the roles needed to implement the service along with their own set of end-state and inventory configurations: Playbooks location: playbooks/<SITE>/ End-State configuration location: inventories/<SITE>/group_vars/<GROUP_NAME>/ Inventory definition: inventories/<SITE>/<INVENTORY>.ini Playbook Description bootstrap_aplatform64_nodes Bootstrap Ansible Managed nodes manage_aplatform64_servers Manage Ansible Control node manage_aplatform64_nodes Manage Ansible Managed nodes manage_cloud_control_nodes Provision public cloud management tools manage_cloud_realm Manage cloud provider accounts, users and organizations as a single entity manage_dev_nodes Provision software development environments manage_doc_sites Provision documentation site management tools manage_file_servers Manage file servers manage_git_servers Manage GIT servers manage_hpc_nodes Provision high-performance computing environments manage_jenkins_controllers Manage Jenkins controllers manage_jenkins_workers Manage Jenkins workers manage_linux_servers Manage Linux Servers manage_linux_workstations Manage Linux Workstations manage_macos_workstations Manage MacOS Workstations manage_office_nodes Provision office productivity applications manage_test_nodes Provision software testing tools","title":"Automation Scripts"},{"location":"#deployment","text":"","title":"Deployment"},{"location":"#os-compatibility","text":"A:Platform64 is compatible with the following Linux operating systems: CentOS8 RedHat8 AlmaLinux8 OracleLinux8 Ubuntu20 Ubuntu21 Fedora33 Fedora35 Debian10 Debian11 MacOSX12 Notice that roles have their own compatibility matrix. Refer to the respective documentation for further details.","title":"OS Compatibility"},{"location":"#prerequisites","text":"Control Node: Python 3 OpenSSH Sudo Regular user account with sudo privilege for running the installer Managed Nodes: Python 3 OpenSSH Sudo Regular user account with sudo privilege for the bootstrap process","title":"Prerequisites"},{"location":"#installation","text":"Download the installation script and resources: install-aplatform64 curl -O https://raw.githubusercontent.com/aplatform64/automation/main/roles/auto_aplatform64/files/installer/install-aplatform64 chmod 0755 install-aplatform64 Run the installation script with the default options. See the documentation for more options ./install-aplatform64 -x Done. The A:Platform64 platform is now installed.","title":"Installation"},{"location":"#usage","text":"","title":"Usage"},{"location":"#initialize-the-environment","text":"To start using A:Platform64 change to the Ansible Control user and set the environment: # Switch to the Ansible Control user sudo su - sitectl # Set the environment for Ansible source /opt/aplatform64/bin/site/ansible_control.env workon aplatform64 # Go to the install location cd /opt/aplatform64/","title":"Initialize the environment"},{"location":"#register-managed-hosts","text":"Register the target remote host in the bootstrap process by adding it to the inventory: file: inventories/site/aplatform64_service.ini group [bootstrap_aplatform64_nodes_distro] The bootstrap process will connect to the managed node using a pre-existing user account with root privilege and then create the dedicated account for Ansible. Register the bootstrap user details and review the dedicated user definition: file: inventories/site/group_vars/bootstrap_aplatform64_nodes/auto_ansible_node.yml variable auto_ansible_node_bootstrap: variable auto_ansible_node_user: file: inventories/site/group_vars/aplatform64_nodes/auto_ansible_node.yml variable auto_ansible_node_user: Execute the bootstrap process: /opt/aplatform64/bin/ap64.sh -n -p bootstrap_aplatform64_nodes -s \" ${ APLATFORM64_SITE } \" The host is now ready for Ansible. Promote the hostname by removing it from the [bootstrap_aplatform64_nodes_distro] group and adding it to: File: inventories/site/aplatform64_service.ini Host Group: aplatform64_nodes","title":"Register managed hosts"},{"location":"#run-automation-scripts","text":"Use any of the predefined playbooks and customize the default end-state definitions for the group or create per host definitions. For example, to configure workstations and notebooks for office work: Add the target hostname to the inventory: inventories/site/office_nodes.ini Review default end-state configuration: inventories/site/group_vars/office_nodes/* Run the playgook: ansible-playbook \\ -i \"inventories/ ${ APLATFORM64_SITE } /office_nodes.ini\" \\ \"playbooks/ ${ APLATFORM64_SITE } /manage_office_nodes.yml\" Additional playbooks and roles can be added to further customize the platform. In addition to the standard ansible CLI commands, A:Platform64 provides the bin/ap64.sh CLI that can be used for: List/Run playbooks List/Create sites Upgrade collections Update sites configurations","title":"Run automation scripts"},{"location":"#development","text":"","title":"Development"},{"location":"#environment","text":"Use the following instructions for preparing the development environment: Prepare dev tools: Install GIT Install Git Flow Install Python, PIP, Virtual Environment Wrapper Clone GIT repositories # Create the main repository cd <YOUR_PROJECTS_PATH> git clone https://github.com/serdigital64/aplatform64 cd aplatform64 # Create module repositories as git submodules git submodule init # Update modules git submodule update # Enable main branch on submodules git submodule foreach \"git checkout main\" ; git submodule foreach \"git checkout develop\" # (Optional) Initialize git flow. Production branch:main, use defaults for the remaining branches git submodule foreach \"git flow init\" Adjust environment variables to reflect your configuration: # Copy environment definition files from templates: cp dot.local .local cp dot.secrets .secrets # Review and update content for both files Create Python Virtual Environment Wrapper workspace source .local source .env source \" $DEVAP_VEW_LOADER \" mkvirtualenv aplatform64 Install Python dev modules pip3 install --upgrade -r requirements-aplatform64.txt The environment is now ready. From now use the following script to load environment variables and set the virtual Python environment: source bin/devap-set Additional scripts are provided to support testing and package building: bin/devap-build : build and publish Ansible Collection packages bin/devap-test : test Ansible Roles using Molecule","title":"Environment"},{"location":"#repositories","text":"Project GIT repository Main: https://github.com/serdigital64/aplatform64 Submodules: https://github.com/aplatform64 Project Ansible Galaxy repository: https://galaxy.ansible.com/serdigital64 Project Documentation: https://aplatform64.readthedocs.io","title":"Repositories"},{"location":"#contributing","text":"Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details and the code of conduct .","title":"Contributing"},{"location":"#author","text":"SerDigital64","title":"Author"},{"location":"#license","text":"GPL-3.0-or-later","title":"License"},{"location":"bin/ap64/","text":"Script: ap64.sh \u00b6 Overview \u00b6 Command line interface for the A:Platform64 environment. Use Cases \u00b6 Create Site \u00b6 # Create the site 'prod' /opt/aplatform64/bin/ap64.sh -c -s 'prod' Remove Site \u00b6 # Create the site 'prod' /opt/aplatform64/bin/ap64.sh -o -s 'dev' List Sites \u00b6 /opt/aplatform64/bin/ap64.sh -t Update Site configuration \u00b6 # Update configuration files for the site 'lab' /opt/aplatform64/bin/ap64.sh -r -s 'lab' Upgrade A:Platform64 Collections \u00b6 /opt/aplatform64/bin/ap64.sh -u Describe A:Platform64 Playbooks \u00b6 # List available playbooks for the site 'dev' /opt/aplatform64/bin/ap64.sh -l -s 'dev' Run A:Platform64 Playbook \u00b6 # Run the playbook to setup dev workstations in the site 'dev' /opt/aplatform64/bin/ap64.sh -r 'manage_dev_nodes' -s 'dev' Command Line Interface \u00b6 ap64.sh <-c|-o|-r|-u|-l|-n|-t> [-v|-d] [-s Site] [-x Host] [-p Playbook] [-e Collection] [-h] Commands \u00b6 Command Purpose -c Create a A:Platform64 site -o Remove a A:Platform64 site -r Refresh A:Platform64 site configuration by rerunning the setup process -u Upgrade A:Platform64 Ansible collections to the latest version in Ansible Galaxy -l List available playbooks -n Run playbook -t List sites -h Show usage info Flags \u00b6 Parameter Default Value -d disabled Show debugging information on ansible-playbook run -d disabled Show end-state pre/post diff on ansible-playbook run Parameters \u00b6 Parameter Format Default Value -s Site [a-z][0-9] site Target Site -x Host [a-z][0-9] all Target host for playbook run -p Playbook [a-z][0-9] Name of the playbook to run -e Collection [a-z][0-9] all Collection name for the upgrade option (-u) Exit Status \u00b6 Code Status 0 Successfull execution 1 Execution failure Deployment \u00b6 OS Compatibility \u00b6 CentOS8 OracleLinux8 Ubuntu20 Ubuntu21 Fedora33 Fedora35 Debian10 Debian11 Prerequisites \u00b6 Ansible: Control Node: A:Platform64 installed and configured Installation Procedure \u00b6 The script is automatically deployed during the A:Platform64 installation process. Contributing \u00b6 Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details. Author \u00b6 SerDigital64 License \u00b6 GPL-3.0-or-later","title":"ap64"},{"location":"bin/ap64/#script-ap64sh","text":"","title":"Script: ap64.sh"},{"location":"bin/ap64/#overview","text":"Command line interface for the A:Platform64 environment.","title":"Overview"},{"location":"bin/ap64/#use-cases","text":"","title":"Use Cases"},{"location":"bin/ap64/#create-site","text":"# Create the site 'prod' /opt/aplatform64/bin/ap64.sh -c -s 'prod'","title":"Create Site"},{"location":"bin/ap64/#remove-site","text":"# Create the site 'prod' /opt/aplatform64/bin/ap64.sh -o -s 'dev'","title":"Remove Site"},{"location":"bin/ap64/#list-sites","text":"/opt/aplatform64/bin/ap64.sh -t","title":"List Sites"},{"location":"bin/ap64/#update-site-configuration","text":"# Update configuration files for the site 'lab' /opt/aplatform64/bin/ap64.sh -r -s 'lab'","title":"Update Site configuration"},{"location":"bin/ap64/#upgrade-aplatform64-collections","text":"/opt/aplatform64/bin/ap64.sh -u","title":"Upgrade A:Platform64 Collections"},{"location":"bin/ap64/#describe-aplatform64-playbooks","text":"# List available playbooks for the site 'dev' /opt/aplatform64/bin/ap64.sh -l -s 'dev'","title":"Describe A:Platform64 Playbooks"},{"location":"bin/ap64/#run-aplatform64-playbook","text":"# Run the playbook to setup dev workstations in the site 'dev' /opt/aplatform64/bin/ap64.sh -r 'manage_dev_nodes' -s 'dev'","title":"Run A:Platform64 Playbook"},{"location":"bin/ap64/#command-line-interface","text":"ap64.sh <-c|-o|-r|-u|-l|-n|-t> [-v|-d] [-s Site] [-x Host] [-p Playbook] [-e Collection] [-h]","title":"Command Line Interface"},{"location":"bin/ap64/#commands","text":"Command Purpose -c Create a A:Platform64 site -o Remove a A:Platform64 site -r Refresh A:Platform64 site configuration by rerunning the setup process -u Upgrade A:Platform64 Ansible collections to the latest version in Ansible Galaxy -l List available playbooks -n Run playbook -t List sites -h Show usage info","title":"Commands"},{"location":"bin/ap64/#flags","text":"Parameter Default Value -d disabled Show debugging information on ansible-playbook run -d disabled Show end-state pre/post diff on ansible-playbook run","title":"Flags"},{"location":"bin/ap64/#parameters","text":"Parameter Format Default Value -s Site [a-z][0-9] site Target Site -x Host [a-z][0-9] all Target host for playbook run -p Playbook [a-z][0-9] Name of the playbook to run -e Collection [a-z][0-9] all Collection name for the upgrade option (-u)","title":"Parameters"},{"location":"bin/ap64/#exit-status","text":"Code Status 0 Successfull execution 1 Execution failure","title":"Exit Status"},{"location":"bin/ap64/#deployment","text":"","title":"Deployment"},{"location":"bin/ap64/#os-compatibility","text":"CentOS8 OracleLinux8 Ubuntu20 Ubuntu21 Fedora33 Fedora35 Debian10 Debian11","title":"OS Compatibility"},{"location":"bin/ap64/#prerequisites","text":"Ansible: Control Node: A:Platform64 installed and configured","title":"Prerequisites"},{"location":"bin/ap64/#installation-procedure","text":"The script is automatically deployed during the A:Platform64 installation process.","title":"Installation Procedure"},{"location":"bin/ap64/#contributing","text":"Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details.","title":"Contributing"},{"location":"bin/ap64/#author","text":"SerDigital64","title":"Author"},{"location":"bin/ap64/#license","text":"GPL-3.0-or-later","title":"License"},{"location":"bin/install-aplatform64/","text":"Script: install-aplatform64 \u00b6 Overview \u00b6 Install the A:Platform64 environment. Use Cases \u00b6 Install A:Platform64 and its prerequisites \u00b6 Install required packages: Python Virtual environment wrapper Ansible Create required user account: Ansible control node user Setup SUDO rule Install A:Platform64 Use default parameters ./install-aplatform64 -6 -p -w -u -s -a Install A:Platform64 \u00b6 Assume all prereqs are met Install A:Platform64 Use Python v3.9 Use default parameters # Install using default parameters. Assume all prereqs are met. Use os native python 3.9 ./install-aplatform64 -y '/usr/bin/python3.9' -6 Command Line Interface \u00b6 ./install-aplatform64 [-x] [-6] [-p] [-w] [-u] [-s] [-a] [-k] [-t SITE] [-y PYTHON] [-m USER] [-v VENV] [-r PATH] [-o PATH] [-l PATH] [-h] Commands \u00b6 Command Purpose -x Run all installation steps: Python (-p), VEW (-w), Ansible (-a), account (-u), sudo rule (-s), A:Platform64 (-6) -6 Single step: install A:Platform64 -p Single step: Install python v3.9 using OS native package -w Single step: Install Virtual Environment Wrapper (VEW) python module -u Single step: Create Ansible control node account -s Single step: Give root privilege to the control node account by adding user rule to sudoers file -a Single step: Install Ansible -h Show usage info Flags \u00b6 Option Purpose -k Let ansible-playbook ask for sudo password. Use when the target user doesn-t have the NOPASSWD: flag in sudoers. Parameters \u00b6 Parameter Format Default Value -t SITE [a-z][0-9] site Site name -y PYTHON full-path Python3.9 interpreter path -m USER [a-z][0-9] sitectl Control node account login name -v VENV [a-z][0-9] aplatform64 Python virtual environment name where Ansible will be installed to -r PATH full-path /opt/aplatform64 Install path for collections and configurations -o PATH full-path /var/opt/aplatform64 Install path for temporary and run-time data -l PATH full-path Path to local collection packages. Default: none (use Ansible Galaxy repository) Exit Status \u00b6 Code Status 0 Successfull execution 1 Execution failure Deployment \u00b6 OS Compatibility \u00b6 CentOS8 OracleLinux8 Ubuntu20 Ubuntu21 Fedora33 Fedora35 Debian10 Debian11 Prerequisites \u00b6 Python 3 OpenSSH Sudo Regular user account with sudo privilege for running the installer Installation Procedure \u00b6 Download the installation script: curl -O https://raw.githubusercontent.com/aplatform64/automation/main/roles/auto_aplatform64/files/installer/install-aplatform64 chmod 0755 install-aplatform64 Contributing \u00b6 Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details. Author \u00b6 SerDigital64 License \u00b6 GPL-3.0-or-later","title":"install-aplatform64"},{"location":"bin/install-aplatform64/#script-install-aplatform64","text":"","title":"Script: install-aplatform64"},{"location":"bin/install-aplatform64/#overview","text":"Install the A:Platform64 environment.","title":"Overview"},{"location":"bin/install-aplatform64/#use-cases","text":"","title":"Use Cases"},{"location":"bin/install-aplatform64/#install-aplatform64-and-its-prerequisites","text":"Install required packages: Python Virtual environment wrapper Ansible Create required user account: Ansible control node user Setup SUDO rule Install A:Platform64 Use default parameters ./install-aplatform64 -6 -p -w -u -s -a","title":"Install A:Platform64 and its prerequisites"},{"location":"bin/install-aplatform64/#install-aplatform64","text":"Assume all prereqs are met Install A:Platform64 Use Python v3.9 Use default parameters # Install using default parameters. Assume all prereqs are met. Use os native python 3.9 ./install-aplatform64 -y '/usr/bin/python3.9' -6","title":"Install A:Platform64"},{"location":"bin/install-aplatform64/#command-line-interface","text":"./install-aplatform64 [-x] [-6] [-p] [-w] [-u] [-s] [-a] [-k] [-t SITE] [-y PYTHON] [-m USER] [-v VENV] [-r PATH] [-o PATH] [-l PATH] [-h]","title":"Command Line Interface"},{"location":"bin/install-aplatform64/#commands","text":"Command Purpose -x Run all installation steps: Python (-p), VEW (-w), Ansible (-a), account (-u), sudo rule (-s), A:Platform64 (-6) -6 Single step: install A:Platform64 -p Single step: Install python v3.9 using OS native package -w Single step: Install Virtual Environment Wrapper (VEW) python module -u Single step: Create Ansible control node account -s Single step: Give root privilege to the control node account by adding user rule to sudoers file -a Single step: Install Ansible -h Show usage info","title":"Commands"},{"location":"bin/install-aplatform64/#flags","text":"Option Purpose -k Let ansible-playbook ask for sudo password. Use when the target user doesn-t have the NOPASSWD: flag in sudoers.","title":"Flags"},{"location":"bin/install-aplatform64/#parameters","text":"Parameter Format Default Value -t SITE [a-z][0-9] site Site name -y PYTHON full-path Python3.9 interpreter path -m USER [a-z][0-9] sitectl Control node account login name -v VENV [a-z][0-9] aplatform64 Python virtual environment name where Ansible will be installed to -r PATH full-path /opt/aplatform64 Install path for collections and configurations -o PATH full-path /var/opt/aplatform64 Install path for temporary and run-time data -l PATH full-path Path to local collection packages. Default: none (use Ansible Galaxy repository)","title":"Parameters"},{"location":"bin/install-aplatform64/#exit-status","text":"Code Status 0 Successfull execution 1 Execution failure","title":"Exit Status"},{"location":"bin/install-aplatform64/#deployment","text":"","title":"Deployment"},{"location":"bin/install-aplatform64/#os-compatibility","text":"CentOS8 OracleLinux8 Ubuntu20 Ubuntu21 Fedora33 Fedora35 Debian10 Debian11","title":"OS Compatibility"},{"location":"bin/install-aplatform64/#prerequisites","text":"Python 3 OpenSSH Sudo Regular user account with sudo privilege for running the installer","title":"Prerequisites"},{"location":"bin/install-aplatform64/#installation-procedure","text":"Download the installation script: curl -O https://raw.githubusercontent.com/aplatform64/automation/main/roles/auto_aplatform64/files/installer/install-aplatform64 chmod 0755 install-aplatform64","title":"Installation Procedure"},{"location":"bin/install-aplatform64/#contributing","text":"Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details.","title":"Contributing"},{"location":"bin/install-aplatform64/#author","text":"SerDigital64","title":"Author"},{"location":"bin/install-aplatform64/#license","text":"GPL-3.0-or-later","title":"License"},{"location":"collections/application/","text":"Ansible Collection: serdigital64.application \u00b6 About \u00b6 Ansible Roles for automating office applications provisioning. This collection is part of the A:Platform64 project for automated infrastructure-as-code management. Content \u00b6 role purpose app_blender Manage provisioning of the Blender application app_chrome Manage provisioning of the Google Chrome application app_darktable Manage provisioning of the Darktable application app_drawio Manage provisioning of the DrawIO application app_firefox Manage provisioning of the Mozilla Firefox application app_freecad Manage provisioning of the FreeCAD application app_gimp Manage provisioning of the GIMP application app_inkscape Manage provisioning of the InkScape application app_keepassxc Manage provisioning of the KeePassXC application app_kryta Manage provisioning of the Kryta application app_libreoffice Manage provisioning of the Libre Office application app_msteams Manage provisioning of the MS Teams application app_obs Manage provisioning of the OBS application app_pinta Manage provisioning of the Pinta application app_pitivi Manage provisioning of the Pitivi application app_shotcut Manage provisioning of the ShotCut application app_slack Manage provisioning of the Slack application app_skype Manage provisioning of the Skype application app_spotify Manage provisioning of the Spotify application app_tilix Manage provisioning of the Tilix application app_vscode Manage provisioning of the VSCode application app_xmind Manage provisioning of the XMind application app_zoom Manage provisioning of the Zoom application Deployment \u00b6 Dependencies \u00b6 Ansible Collections: serdigital64.backup serdigital64.system Installation Procedure \u00b6 Manually install Ansible Collections from the Ansible Galaxy repository: ansible-galaxy collection install --upgrade serdigital64.application Automatic installation is also available by deploying A:Platform64 Contributing \u00b6 Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details. Author \u00b6 SerDigital64 License \u00b6 GPL-3.0-or-later","title":"application"},{"location":"collections/application/#ansible-collection-serdigital64application","text":"","title":"Ansible Collection: serdigital64.application"},{"location":"collections/application/#about","text":"Ansible Roles for automating office applications provisioning. This collection is part of the A:Platform64 project for automated infrastructure-as-code management.","title":"About"},{"location":"collections/application/#content","text":"role purpose app_blender Manage provisioning of the Blender application app_chrome Manage provisioning of the Google Chrome application app_darktable Manage provisioning of the Darktable application app_drawio Manage provisioning of the DrawIO application app_firefox Manage provisioning of the Mozilla Firefox application app_freecad Manage provisioning of the FreeCAD application app_gimp Manage provisioning of the GIMP application app_inkscape Manage provisioning of the InkScape application app_keepassxc Manage provisioning of the KeePassXC application app_kryta Manage provisioning of the Kryta application app_libreoffice Manage provisioning of the Libre Office application app_msteams Manage provisioning of the MS Teams application app_obs Manage provisioning of the OBS application app_pinta Manage provisioning of the Pinta application app_pitivi Manage provisioning of the Pitivi application app_shotcut Manage provisioning of the ShotCut application app_slack Manage provisioning of the Slack application app_skype Manage provisioning of the Skype application app_spotify Manage provisioning of the Spotify application app_tilix Manage provisioning of the Tilix application app_vscode Manage provisioning of the VSCode application app_xmind Manage provisioning of the XMind application app_zoom Manage provisioning of the Zoom application","title":"Content"},{"location":"collections/application/#deployment","text":"","title":"Deployment"},{"location":"collections/application/#dependencies","text":"Ansible Collections: serdigital64.backup serdigital64.system","title":"Dependencies"},{"location":"collections/application/#installation-procedure","text":"Manually install Ansible Collections from the Ansible Galaxy repository: ansible-galaxy collection install --upgrade serdigital64.application Automatic installation is also available by deploying A:Platform64","title":"Installation Procedure"},{"location":"collections/application/#contributing","text":"Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details.","title":"Contributing"},{"location":"collections/application/#author","text":"SerDigital64","title":"Author"},{"location":"collections/application/#license","text":"GPL-3.0-or-later","title":"License"},{"location":"collections/automation/","text":"Ansible Collection: serdigital64.automation \u00b6 About \u00b6 Ansible Roles for managing automation tools provisioning. This collection is part of the A:Platform64 project for automated infrastructure-as-code management. Content \u00b6 role purpose auto_aplatform64 Automate the management of computing environments auto_ansible_control Automate the management of Ansible Control Node auto_ansible_node Automate the management of Ansible Managed Nodes Deployment \u00b6 Dependencies \u00b6 Ansible Collections: ansible.posix serdigital64.backup serdigital64.system serdigital64.security Installation Procedure \u00b6 Manually install Ansible Collections from the Ansible Galaxy repository: ansible-galaxy collection install --upgrade serdigital64.automation Automatic installation is also available by deploying A:Platform64 Contributing \u00b6 Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details. Author \u00b6 SerDigital64 License \u00b6 GPL-3.0-or-later","title":"automation"},{"location":"collections/automation/#ansible-collection-serdigital64automation","text":"","title":"Ansible Collection: serdigital64.automation"},{"location":"collections/automation/#about","text":"Ansible Roles for managing automation tools provisioning. This collection is part of the A:Platform64 project for automated infrastructure-as-code management.","title":"About"},{"location":"collections/automation/#content","text":"role purpose auto_aplatform64 Automate the management of computing environments auto_ansible_control Automate the management of Ansible Control Node auto_ansible_node Automate the management of Ansible Managed Nodes","title":"Content"},{"location":"collections/automation/#deployment","text":"","title":"Deployment"},{"location":"collections/automation/#dependencies","text":"Ansible Collections: ansible.posix serdigital64.backup serdigital64.system serdigital64.security","title":"Dependencies"},{"location":"collections/automation/#installation-procedure","text":"Manually install Ansible Collections from the Ansible Galaxy repository: ansible-galaxy collection install --upgrade serdigital64.automation Automatic installation is also available by deploying A:Platform64","title":"Installation Procedure"},{"location":"collections/automation/#contributing","text":"Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details.","title":"Contributing"},{"location":"collections/automation/#author","text":"SerDigital64","title":"Author"},{"location":"collections/automation/#license","text":"GPL-3.0-or-later","title":"License"},{"location":"collections/backup/","text":"Ansible Collection: serdigital64.backup \u00b6 About \u00b6 Ansible Roles for automating backup infrastructure management. This collection is part of the A:Platform64 project for automated infrastructure-as-code management. Content \u00b6 role purpose bkp_archive Extract file archives bkp_rclone_server Manage provisioning of the RClone tool as a server bkp_restic Manage provisioning of the Restic tool Deployment \u00b6 Dependencies \u00b6 Ansible Collections: serdigital64.system Installation Procedure \u00b6 Manually install Ansible Collections from the Ansible Galaxy repository: ansible-galaxy collection install --upgrade serdigital64.backup Automatic installation is also available by deploying A:Platform64 Contributing \u00b6 Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details. Author \u00b6 SerDigital64 License \u00b6 GPL-3.0-or-later","title":"backup"},{"location":"collections/backup/#ansible-collection-serdigital64backup","text":"","title":"Ansible Collection: serdigital64.backup"},{"location":"collections/backup/#about","text":"Ansible Roles for automating backup infrastructure management. This collection is part of the A:Platform64 project for automated infrastructure-as-code management.","title":"About"},{"location":"collections/backup/#content","text":"role purpose bkp_archive Extract file archives bkp_rclone_server Manage provisioning of the RClone tool as a server bkp_restic Manage provisioning of the Restic tool","title":"Content"},{"location":"collections/backup/#deployment","text":"","title":"Deployment"},{"location":"collections/backup/#dependencies","text":"Ansible Collections: serdigital64.system","title":"Dependencies"},{"location":"collections/backup/#installation-procedure","text":"Manually install Ansible Collections from the Ansible Galaxy repository: ansible-galaxy collection install --upgrade serdigital64.backup Automatic installation is also available by deploying A:Platform64","title":"Installation Procedure"},{"location":"collections/backup/#contributing","text":"Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details.","title":"Contributing"},{"location":"collections/backup/#author","text":"SerDigital64","title":"Author"},{"location":"collections/backup/#license","text":"GPL-3.0-or-later","title":"License"},{"location":"collections/cloud/","text":"Ansible Collection: serdigital64.cloud \u00b6 About \u00b6 Ansible Roles for automating cloud tools provisioning. This collection is part of the A:Platform64 project for automated infrastructure-as-code management. Content \u00b6 role purpose cloud_aws_cli Manage provisioning of AWS CLI cloud_aws_realm Integrate AWS Accounts, IAM and Organizations into a single managed entity cloud_azure_cli Manage provisioning of Azure CLI cloud_foundry_cli Manage provisioning of Cloud Foundry CLI cloud_google_cli Manage provisioning of Google Cloud CLI cloud_ibm_cli Manage provisioning of IBM CLI Deployment \u00b6 Dependencies \u00b6 Ansible Collections: community.aws serdigital64.backup serdigital64.system Installation Procedure \u00b6 Manually install Ansible Collections from the Ansible Galaxy repository: ansible-galaxy collection install --upgrade serdigital64.cloud Automatic installation is also available by deploying A:Platform64 Contributing \u00b6 Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details. Author \u00b6 SerDigital64 License \u00b6 GPL-3.0-or-later","title":"cloud"},{"location":"collections/cloud/#ansible-collection-serdigital64cloud","text":"","title":"Ansible Collection: serdigital64.cloud"},{"location":"collections/cloud/#about","text":"Ansible Roles for automating cloud tools provisioning. This collection is part of the A:Platform64 project for automated infrastructure-as-code management.","title":"About"},{"location":"collections/cloud/#content","text":"role purpose cloud_aws_cli Manage provisioning of AWS CLI cloud_aws_realm Integrate AWS Accounts, IAM and Organizations into a single managed entity cloud_azure_cli Manage provisioning of Azure CLI cloud_foundry_cli Manage provisioning of Cloud Foundry CLI cloud_google_cli Manage provisioning of Google Cloud CLI cloud_ibm_cli Manage provisioning of IBM CLI","title":"Content"},{"location":"collections/cloud/#deployment","text":"","title":"Deployment"},{"location":"collections/cloud/#dependencies","text":"Ansible Collections: community.aws serdigital64.backup serdigital64.system","title":"Dependencies"},{"location":"collections/cloud/#installation-procedure","text":"Manually install Ansible Collections from the Ansible Galaxy repository: ansible-galaxy collection install --upgrade serdigital64.cloud Automatic installation is also available by deploying A:Platform64","title":"Installation Procedure"},{"location":"collections/cloud/#contributing","text":"Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details.","title":"Contributing"},{"location":"collections/cloud/#author","text":"SerDigital64","title":"Author"},{"location":"collections/cloud/#license","text":"GPL-3.0-or-later","title":"License"},{"location":"collections/container/","text":"Ansible Collection: serdigital64.container \u00b6 About \u00b6 Ansible Roles for automating container tools provisioning. This collection is part of the A:Platform64 project for automated infrastructure-as-code management. Content \u00b6 role purpose cnd_docker Manage provisioning of Docker cnt_kubectl Manage provisioning of KubeCtl cnd_podman Manage provisioning of Podman Deployment \u00b6 Dependencies \u00b6 Ansible Collections: serdigital64.backup serdigital64.system Installation Procedure \u00b6 Manually install Ansible Collections from the Ansible Galaxy repository: ansible-galaxy collection install --upgrade serdigital64.container Automatic installation is also available by deploying A:Platform64 Contributing \u00b6 Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details. Author \u00b6 SerDigital64 License \u00b6 GPL-3.0-or-later","title":"container"},{"location":"collections/container/#ansible-collection-serdigital64container","text":"","title":"Ansible Collection: serdigital64.container"},{"location":"collections/container/#about","text":"Ansible Roles for automating container tools provisioning. This collection is part of the A:Platform64 project for automated infrastructure-as-code management.","title":"About"},{"location":"collections/container/#content","text":"role purpose cnd_docker Manage provisioning of Docker cnt_kubectl Manage provisioning of KubeCtl cnd_podman Manage provisioning of Podman","title":"Content"},{"location":"collections/container/#deployment","text":"","title":"Deployment"},{"location":"collections/container/#dependencies","text":"Ansible Collections: serdigital64.backup serdigital64.system","title":"Dependencies"},{"location":"collections/container/#installation-procedure","text":"Manually install Ansible Collections from the Ansible Galaxy repository: ansible-galaxy collection install --upgrade serdigital64.container Automatic installation is also available by deploying A:Platform64","title":"Installation Procedure"},{"location":"collections/container/#contributing","text":"Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details.","title":"Contributing"},{"location":"collections/container/#author","text":"SerDigital64","title":"Author"},{"location":"collections/container/#license","text":"GPL-3.0-or-later","title":"License"},{"location":"collections/database/","text":"Ansible Collection: serdigital64.database \u00b6 About \u00b6 Ansible Roles for automating database tools provisioning.. This collection is part of the A:Platform64 project for automated infrastructure-as-code management. Content \u00b6 role purpose db_mariadb_client Manage provisioning of MariaDB client db_mariadb_server Manage provisioning of MariaDB server db_mysql_client Manage provisioning of MySQL client db_mysql_server Manage provisioning of MySQL server db_postgresql_client Manage provisioning of PostgreSQL client db_postgresql_server Manage provisioning of PostgreSQL server Deployment \u00b6 Dependencies \u00b6 Ansible Collections: serdigital64.backup serdigital64.system Installation Procedure \u00b6 Manually install Ansible Collections from the Ansible Galaxy repository: ansible-galaxy collection install --upgrade serdigital64.database Automatic installation is also available by deploying A:Platform64 Contributing \u00b6 Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details. Author \u00b6 SerDigital64 License \u00b6 GPL-3.0-or-later","title":"database"},{"location":"collections/database/#ansible-collection-serdigital64database","text":"","title":"Ansible Collection: serdigital64.database"},{"location":"collections/database/#about","text":"Ansible Roles for automating database tools provisioning.. This collection is part of the A:Platform64 project for automated infrastructure-as-code management.","title":"About"},{"location":"collections/database/#content","text":"role purpose db_mariadb_client Manage provisioning of MariaDB client db_mariadb_server Manage provisioning of MariaDB server db_mysql_client Manage provisioning of MySQL client db_mysql_server Manage provisioning of MySQL server db_postgresql_client Manage provisioning of PostgreSQL client db_postgresql_server Manage provisioning of PostgreSQL server","title":"Content"},{"location":"collections/database/#deployment","text":"","title":"Deployment"},{"location":"collections/database/#dependencies","text":"Ansible Collections: serdigital64.backup serdigital64.system","title":"Dependencies"},{"location":"collections/database/#installation-procedure","text":"Manually install Ansible Collections from the Ansible Galaxy repository: ansible-galaxy collection install --upgrade serdigital64.database Automatic installation is also available by deploying A:Platform64","title":"Installation Procedure"},{"location":"collections/database/#contributing","text":"Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details.","title":"Contributing"},{"location":"collections/database/#author","text":"SerDigital64","title":"Author"},{"location":"collections/database/#license","text":"GPL-3.0-or-later","title":"License"},{"location":"collections/development/","text":"Ansible Collection: serdigital64.development \u00b6 About \u00b6 Ansible Roles for automating development environment provisioning. This collection is part of the A:Platform64 project for automated infrastructure-as-code management. Content \u00b6 role purpose dev_gcc Manage provisioning of GCC dev_java Manage provisioning of Java dev_nodejs Manage provisioning of NodeJS dev_opencl Manage provision OpenCL development environment dev_python Manage provision of Python dev_ruby Manage provisioning of Ruby dev_tools Manage provisioning of common development tools Deployment \u00b6 Dependencies \u00b6 Ansible Collections: serdigital64.backup serdigital64.system Installation Procedure \u00b6 Manually install Ansible Collections from the Ansible Galaxy repository: ansible-galaxy collection install --upgrade serdigital64.development Automatic installation is also available by deploying A:Platform64 Contributing \u00b6 Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details. Author \u00b6 SerDigital64 License \u00b6 GPL-3.0-or-later","title":"development"},{"location":"collections/development/#ansible-collection-serdigital64development","text":"","title":"Ansible Collection: serdigital64.development"},{"location":"collections/development/#about","text":"Ansible Roles for automating development environment provisioning. This collection is part of the A:Platform64 project for automated infrastructure-as-code management.","title":"About"},{"location":"collections/development/#content","text":"role purpose dev_gcc Manage provisioning of GCC dev_java Manage provisioning of Java dev_nodejs Manage provisioning of NodeJS dev_opencl Manage provision OpenCL development environment dev_python Manage provision of Python dev_ruby Manage provisioning of Ruby dev_tools Manage provisioning of common development tools","title":"Content"},{"location":"collections/development/#deployment","text":"","title":"Deployment"},{"location":"collections/development/#dependencies","text":"Ansible Collections: serdigital64.backup serdigital64.system","title":"Dependencies"},{"location":"collections/development/#installation-procedure","text":"Manually install Ansible Collections from the Ansible Galaxy repository: ansible-galaxy collection install --upgrade serdigital64.development Automatic installation is also available by deploying A:Platform64","title":"Installation Procedure"},{"location":"collections/development/#contributing","text":"Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details.","title":"Contributing"},{"location":"collections/development/#author","text":"SerDigital64","title":"Author"},{"location":"collections/development/#license","text":"GPL-3.0-or-later","title":"License"},{"location":"collections/devops/","text":"Ansible Collection: serdigital64.devops \u00b6 About \u00b6 Ansible Roles for automating devops tools provisioning. This collection is part of the A:Platform64 project for automated infrastructure-as-code management. Content \u00b6 role purpose dops_ansiblelint Manage provisioning of Ansible Linter dops_batscore Manage provisioning of Bats Core dops_git_client Manage provisioning of client side GIT dops_git_server Manage GIT server dops_github_cli Manage provisioning of GitHub CLI dops_gitlab_server Manage provisioning of GitLab Server dops_jenkins Manage Jenkins server dops_molecule Manage provisioning of Molecule dops_shellcheck Manage provisioning of ShellCheck dops_tfsec Manage provisioning of the TFSec tool dops_yamllint Manage provisioning of YAML Linter Deployment \u00b6 Dependencies \u00b6 Ansible Collections: serdigital64.backup serdigital64.development serdigital64.security serdigital64.system Installation Procedure \u00b6 Manually install Ansible Collections from the Ansible Galaxy repository: ansible-galaxy collection install --upgrade serdigital64.devops Automatic installation is also available by deploying A:Platform64 Contributing \u00b6 Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details. Author \u00b6 SerDigital64 License \u00b6 GPL-3.0-or-later","title":"devops"},{"location":"collections/devops/#ansible-collection-serdigital64devops","text":"","title":"Ansible Collection: serdigital64.devops"},{"location":"collections/devops/#about","text":"Ansible Roles for automating devops tools provisioning. This collection is part of the A:Platform64 project for automated infrastructure-as-code management.","title":"About"},{"location":"collections/devops/#content","text":"role purpose dops_ansiblelint Manage provisioning of Ansible Linter dops_batscore Manage provisioning of Bats Core dops_git_client Manage provisioning of client side GIT dops_git_server Manage GIT server dops_github_cli Manage provisioning of GitHub CLI dops_gitlab_server Manage provisioning of GitLab Server dops_jenkins Manage Jenkins server dops_molecule Manage provisioning of Molecule dops_shellcheck Manage provisioning of ShellCheck dops_tfsec Manage provisioning of the TFSec tool dops_yamllint Manage provisioning of YAML Linter","title":"Content"},{"location":"collections/devops/#deployment","text":"","title":"Deployment"},{"location":"collections/devops/#dependencies","text":"Ansible Collections: serdigital64.backup serdigital64.development serdigital64.security serdigital64.system","title":"Dependencies"},{"location":"collections/devops/#installation-procedure","text":"Manually install Ansible Collections from the Ansible Galaxy repository: ansible-galaxy collection install --upgrade serdigital64.devops Automatic installation is also available by deploying A:Platform64","title":"Installation Procedure"},{"location":"collections/devops/#contributing","text":"Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details.","title":"Contributing"},{"location":"collections/devops/#author","text":"SerDigital64","title":"Author"},{"location":"collections/devops/#license","text":"GPL-3.0-or-later","title":"License"},{"location":"collections/hardware/","text":"Ansible Collection: serdigital64.hardware \u00b6 About \u00b6 Ansible Roles for automating hardware drivers provisioning. This collection is part of the A:Platform64 project for automated infrastructure-as-code management. Content \u00b6 role purpose hw_gpu_amd Manage provisioning of AMD GPU drivers Deployment \u00b6 Dependencies \u00b6 Ansible Collections: serdigital64.backup serdigital64.system Installation Procedure \u00b6 Manually install Ansible Collections from the Ansible Galaxy repository: ansible-galaxy collection install --upgrade serdigital64.hardware Automatic installation is also available by deploying A:Platform64 Contributing \u00b6 Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details. Author \u00b6 SerDigital64 License \u00b6 GPL-3.0-or-later","title":"hardware"},{"location":"collections/hardware/#ansible-collection-serdigital64hardware","text":"","title":"Ansible Collection: serdigital64.hardware"},{"location":"collections/hardware/#about","text":"Ansible Roles for automating hardware drivers provisioning. This collection is part of the A:Platform64 project for automated infrastructure-as-code management.","title":"About"},{"location":"collections/hardware/#content","text":"role purpose hw_gpu_amd Manage provisioning of AMD GPU drivers","title":"Content"},{"location":"collections/hardware/#deployment","text":"","title":"Deployment"},{"location":"collections/hardware/#dependencies","text":"Ansible Collections: serdigital64.backup serdigital64.system","title":"Dependencies"},{"location":"collections/hardware/#installation-procedure","text":"Manually install Ansible Collections from the Ansible Galaxy repository: ansible-galaxy collection install --upgrade serdigital64.hardware Automatic installation is also available by deploying A:Platform64","title":"Installation Procedure"},{"location":"collections/hardware/#contributing","text":"Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details.","title":"Contributing"},{"location":"collections/hardware/#author","text":"SerDigital64","title":"Author"},{"location":"collections/hardware/#license","text":"GPL-3.0-or-later","title":"License"},{"location":"collections/hypervisor/","text":"Ansible Collection: serdigital64.hypervisor \u00b6 About \u00b6 Ansible Roles for automating hypervisor tools provisioning. This collection is part of the A:Platform64 project for automated infrastructure-as-code management. Content \u00b6 role purpose hpv_libvirt_client Manage provisioning of LibVirt client hpv_libvirt_server Manage provisioning of LibVirt server Deployment \u00b6 Dependencies \u00b6 Ansible Collections: serdigital64.backup serdigital64.system Installation Procedure \u00b6 Manually install Ansible Collections from the Ansible Galaxy repository: ansible-galaxy collection install --upgrade serdigital64.hypervisor Automatic installation is also available by deploying A:Platform64 Contributing \u00b6 Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details. Author \u00b6 SerDigital64 License \u00b6 GPL-3.0-or-later","title":"hypervisor"},{"location":"collections/hypervisor/#ansible-collection-serdigital64hypervisor","text":"","title":"Ansible Collection: serdigital64.hypervisor"},{"location":"collections/hypervisor/#about","text":"Ansible Roles for automating hypervisor tools provisioning. This collection is part of the A:Platform64 project for automated infrastructure-as-code management.","title":"About"},{"location":"collections/hypervisor/#content","text":"role purpose hpv_libvirt_client Manage provisioning of LibVirt client hpv_libvirt_server Manage provisioning of LibVirt server","title":"Content"},{"location":"collections/hypervisor/#deployment","text":"","title":"Deployment"},{"location":"collections/hypervisor/#dependencies","text":"Ansible Collections: serdigital64.backup serdigital64.system","title":"Dependencies"},{"location":"collections/hypervisor/#installation-procedure","text":"Manually install Ansible Collections from the Ansible Galaxy repository: ansible-galaxy collection install --upgrade serdigital64.hypervisor Automatic installation is also available by deploying A:Platform64","title":"Installation Procedure"},{"location":"collections/hypervisor/#contributing","text":"Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details.","title":"Contributing"},{"location":"collections/hypervisor/#author","text":"SerDigital64","title":"Author"},{"location":"collections/hypervisor/#license","text":"GPL-3.0-or-later","title":"License"},{"location":"collections/infrastructure/","text":"Ansible Collection: serdigital64.infrastructure \u00b6 About \u00b6 Ansible Roles for automating infrastructure tools provisioning. This collection is part of the A:Platform64 project for automated infrastructure-as-code management. Content \u00b6 role purpose infra_helm Manage provisioning of Helm CLI infra_terraform Manage provisioning of the Vagrant tool infra_terragrunt Manage provisioning of the Terragrunt tool infra_vagrant Manage provisioning of the Terraform tool Deployment \u00b6 Dependencies \u00b6 Ansible Collections: serdigital64.backup serdigital64.system Installation Procedure \u00b6 Manually install Ansible Collections from the Ansible Galaxy repository: ansible-galaxy collection install --upgrade serdigital64.infrastructure Automatic installation is also available by deploying A:Platform64 Contributing \u00b6 Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details. Author \u00b6 SerDigital64 License \u00b6 GPL-3.0-or-later","title":"infrastructure"},{"location":"collections/infrastructure/#ansible-collection-serdigital64infrastructure","text":"","title":"Ansible Collection: serdigital64.infrastructure"},{"location":"collections/infrastructure/#about","text":"Ansible Roles for automating infrastructure tools provisioning. This collection is part of the A:Platform64 project for automated infrastructure-as-code management.","title":"About"},{"location":"collections/infrastructure/#content","text":"role purpose infra_helm Manage provisioning of Helm CLI infra_terraform Manage provisioning of the Vagrant tool infra_terragrunt Manage provisioning of the Terragrunt tool infra_vagrant Manage provisioning of the Terraform tool","title":"Content"},{"location":"collections/infrastructure/#deployment","text":"","title":"Deployment"},{"location":"collections/infrastructure/#dependencies","text":"Ansible Collections: serdigital64.backup serdigital64.system","title":"Dependencies"},{"location":"collections/infrastructure/#installation-procedure","text":"Manually install Ansible Collections from the Ansible Galaxy repository: ansible-galaxy collection install --upgrade serdigital64.infrastructure Automatic installation is also available by deploying A:Platform64","title":"Installation Procedure"},{"location":"collections/infrastructure/#contributing","text":"Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details.","title":"Contributing"},{"location":"collections/infrastructure/#author","text":"SerDigital64","title":"Author"},{"location":"collections/infrastructure/#license","text":"GPL-3.0-or-later","title":"License"},{"location":"collections/monitor/","text":"Ansible Collection: serdigital64.monitor \u00b6 About \u00b6 Ansible Roles for automating monitoring tools provisioning.. This collection is part of the A:Platform64 project for automated infrastructure-as-code management. Content \u00b6 role purpose mon_fluentd Manage provisioning of Fluentd Deployment \u00b6 Dependencies \u00b6 Ansible Collections: serdigital64.backup serdigital64.system Installation Procedure \u00b6 Manually install Ansible Collections from the Ansible Galaxy repository: ansible-galaxy collection install --upgrade serdigital64.monitor Automatic installation is also available by deploying A:Platform64 Contributing \u00b6 Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details. Author \u00b6 SerDigital64 License \u00b6 GPL-3.0-or-later","title":"monitor"},{"location":"collections/monitor/#ansible-collection-serdigital64monitor","text":"","title":"Ansible Collection: serdigital64.monitor"},{"location":"collections/monitor/#about","text":"Ansible Roles for automating monitoring tools provisioning.. This collection is part of the A:Platform64 project for automated infrastructure-as-code management.","title":"About"},{"location":"collections/monitor/#content","text":"role purpose mon_fluentd Manage provisioning of Fluentd","title":"Content"},{"location":"collections/monitor/#deployment","text":"","title":"Deployment"},{"location":"collections/monitor/#dependencies","text":"Ansible Collections: serdigital64.backup serdigital64.system","title":"Dependencies"},{"location":"collections/monitor/#installation-procedure","text":"Manually install Ansible Collections from the Ansible Galaxy repository: ansible-galaxy collection install --upgrade serdigital64.monitor Automatic installation is also available by deploying A:Platform64","title":"Installation Procedure"},{"location":"collections/monitor/#contributing","text":"Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details.","title":"Contributing"},{"location":"collections/monitor/#author","text":"SerDigital64","title":"Author"},{"location":"collections/monitor/#license","text":"GPL-3.0-or-later","title":"License"},{"location":"collections/network/","text":"Ansible Collection: serdigital64.network \u00b6 About \u00b6 Ansible Roles for automating network tools provisioning.. This collection is part of the A:Platform64 project for automated infrastructure-as-code management. Content \u00b6 role purpose net_bind Manage provisioning of Bind net_istio Manage provisioning of Istio CLI Deployment \u00b6 Dependencies \u00b6 Ansible Collections: serdigital64.backup serdigital64.system Installation Procedure \u00b6 Manually install Ansible Collections from the Ansible Galaxy repository: ansible-galaxy collection install --upgrade serdigital64.network Automatic installation is also available by deploying A:Platform64 Contributing \u00b6 Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details. Author \u00b6 SerDigital64 License \u00b6 GPL-3.0-or-later","title":"network"},{"location":"collections/network/#ansible-collection-serdigital64network","text":"","title":"Ansible Collection: serdigital64.network"},{"location":"collections/network/#about","text":"Ansible Roles for automating network tools provisioning.. This collection is part of the A:Platform64 project for automated infrastructure-as-code management.","title":"About"},{"location":"collections/network/#content","text":"role purpose net_bind Manage provisioning of Bind net_istio Manage provisioning of Istio CLI","title":"Content"},{"location":"collections/network/#deployment","text":"","title":"Deployment"},{"location":"collections/network/#dependencies","text":"Ansible Collections: serdigital64.backup serdigital64.system","title":"Dependencies"},{"location":"collections/network/#installation-procedure","text":"Manually install Ansible Collections from the Ansible Galaxy repository: ansible-galaxy collection install --upgrade serdigital64.network Automatic installation is also available by deploying A:Platform64","title":"Installation Procedure"},{"location":"collections/network/#contributing","text":"Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details.","title":"Contributing"},{"location":"collections/network/#author","text":"SerDigital64","title":"Author"},{"location":"collections/network/#license","text":"GPL-3.0-or-later","title":"License"},{"location":"collections/security/","text":"Ansible Collection: serdigital64.security \u00b6 About \u00b6 Ansible Roles for automating security tools provisioning. This collection is part of the A:Platform64 project for automated infrastructure-as-code management. Content \u00b6 role purpose sec_firewall_os Manage provisioning of Operating System native Firewall sec_key_ssh Manage SSH Keys provisioning sec_openssh_client Manage provisioning of OpenSSH client sec_openssh_server Manage provisioning of OpenSSH server Deployment \u00b6 Dependencies \u00b6 Ansible Collections: ansible.posix community.crypto serdigital64.backup serdigital64.system Installation Procedure \u00b6 Manually install Ansible Collections from the Ansible Galaxy repository: ansible-galaxy collection install --upgrade serdigital64.security Automatic installation is also available by deploying A:Platform64 Contributing \u00b6 Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details. Author \u00b6 SerDigital64 License \u00b6 GPL-3.0-or-later","title":"security"},{"location":"collections/security/#ansible-collection-serdigital64security","text":"","title":"Ansible Collection: serdigital64.security"},{"location":"collections/security/#about","text":"Ansible Roles for automating security tools provisioning. This collection is part of the A:Platform64 project for automated infrastructure-as-code management.","title":"About"},{"location":"collections/security/#content","text":"role purpose sec_firewall_os Manage provisioning of Operating System native Firewall sec_key_ssh Manage SSH Keys provisioning sec_openssh_client Manage provisioning of OpenSSH client sec_openssh_server Manage provisioning of OpenSSH server","title":"Content"},{"location":"collections/security/#deployment","text":"","title":"Deployment"},{"location":"collections/security/#dependencies","text":"Ansible Collections: ansible.posix community.crypto serdigital64.backup serdigital64.system","title":"Dependencies"},{"location":"collections/security/#installation-procedure","text":"Manually install Ansible Collections from the Ansible Galaxy repository: ansible-galaxy collection install --upgrade serdigital64.security Automatic installation is also available by deploying A:Platform64","title":"Installation Procedure"},{"location":"collections/security/#contributing","text":"Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details.","title":"Contributing"},{"location":"collections/security/#author","text":"SerDigital64","title":"Author"},{"location":"collections/security/#license","text":"GPL-3.0-or-later","title":"License"},{"location":"collections/storage/","text":"Ansible Collection: serdigital64.storage \u00b6 About \u00b6 Ansible Roles for automating storage management. This collection is part of the A:Platform64 project for automated infrastructure-as-code management. Content \u00b6 role purpose stg_autofs Manage the AutoFS service stg_nfs_client Manage the Linux NFS client stg_nfs_server Manage the Linux NFS server stg_repository Manage file repositories provisioning Deployment \u00b6 Dependencies \u00b6 Ansible Collections: ansible.posix serdigital64.backup serdigital64.system serdigital64.security Installation Procedure \u00b6 Manually install Ansible Collections from the Ansible Galaxy repository: ansible-galaxy collection install --upgrade serdigital64.storage Automatic installation is also available by deploying A:Platform64 Contributing \u00b6 Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details. Author \u00b6 SerDigital64 License \u00b6 GPL-3.0-or-later","title":"storage"},{"location":"collections/storage/#ansible-collection-serdigital64storage","text":"","title":"Ansible Collection: serdigital64.storage"},{"location":"collections/storage/#about","text":"Ansible Roles for automating storage management. This collection is part of the A:Platform64 project for automated infrastructure-as-code management.","title":"About"},{"location":"collections/storage/#content","text":"role purpose stg_autofs Manage the AutoFS service stg_nfs_client Manage the Linux NFS client stg_nfs_server Manage the Linux NFS server stg_repository Manage file repositories provisioning","title":"Content"},{"location":"collections/storage/#deployment","text":"","title":"Deployment"},{"location":"collections/storage/#dependencies","text":"Ansible Collections: ansible.posix serdigital64.backup serdigital64.system serdigital64.security","title":"Dependencies"},{"location":"collections/storage/#installation-procedure","text":"Manually install Ansible Collections from the Ansible Galaxy repository: ansible-galaxy collection install --upgrade serdigital64.storage Automatic installation is also available by deploying A:Platform64","title":"Installation Procedure"},{"location":"collections/storage/#contributing","text":"Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details.","title":"Contributing"},{"location":"collections/storage/#author","text":"SerDigital64","title":"Author"},{"location":"collections/storage/#license","text":"GPL-3.0-or-later","title":"License"},{"location":"collections/system/","text":"Ansible Collection: serdigital64.system \u00b6 About \u00b6 Ansible Roles for automating operating system management. This collection is part of the A:Platform64 project for automated infrastructure-as-code management. Content \u00b6 role purpose sys_dconf Manage provisioning of the DConf service sys_fonts Manage OS fonts provisioning sys_gui_cinnamon Manage provisioning of the Cinnamon desktop environment sys_kernel Manage OS Kernel configuration sys_mc Manage provisioning of the Midnight Commander tool sys_package Manage application packages sys_repository Manage application package repositories sys_shell Manage Unix shells provisioning sys_subsystem Manage Linux subsystem configuration sys_sudo Manage SuDo provisioning sys_tools Manage basic OS tools provisioning sys_user Manage Unix users and groups provisioning Deployment \u00b6 Dependencies \u00b6 Ansible Collections: ansible.posix community.general serdigital64.automation serdigital64.backup serdigital64.development serdigital64.devops Installation Procedure \u00b6 Manually install Ansible Collections from the Ansible Galaxy repository: ansible-galaxy collection install --upgrade serdigital64.system Automatic installation is also available by deploying A:Platform64 Contributing \u00b6 Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details. Author \u00b6 SerDigital64 License \u00b6 GPL-3.0-or-later","title":"system"},{"location":"collections/system/#ansible-collection-serdigital64system","text":"","title":"Ansible Collection: serdigital64.system"},{"location":"collections/system/#about","text":"Ansible Roles for automating operating system management. This collection is part of the A:Platform64 project for automated infrastructure-as-code management.","title":"About"},{"location":"collections/system/#content","text":"role purpose sys_dconf Manage provisioning of the DConf service sys_fonts Manage OS fonts provisioning sys_gui_cinnamon Manage provisioning of the Cinnamon desktop environment sys_kernel Manage OS Kernel configuration sys_mc Manage provisioning of the Midnight Commander tool sys_package Manage application packages sys_repository Manage application package repositories sys_shell Manage Unix shells provisioning sys_subsystem Manage Linux subsystem configuration sys_sudo Manage SuDo provisioning sys_tools Manage basic OS tools provisioning sys_user Manage Unix users and groups provisioning","title":"Content"},{"location":"collections/system/#deployment","text":"","title":"Deployment"},{"location":"collections/system/#dependencies","text":"Ansible Collections: ansible.posix community.general serdigital64.automation serdigital64.backup serdigital64.development serdigital64.devops","title":"Dependencies"},{"location":"collections/system/#installation-procedure","text":"Manually install Ansible Collections from the Ansible Galaxy repository: ansible-galaxy collection install --upgrade serdigital64.system Automatic installation is also available by deploying A:Platform64","title":"Installation Procedure"},{"location":"collections/system/#contributing","text":"Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details.","title":"Contributing"},{"location":"collections/system/#author","text":"SerDigital64","title":"Author"},{"location":"collections/system/#license","text":"GPL-3.0-or-later","title":"License"},{"location":"collections/web/","text":"Ansible Collection: serdigital64.web \u00b6 About \u00b6 Ansible Roles for automating web tools provisioning. This collection is part of the A:Platform64 project for automated infrastructure-as-code management. Content \u00b6 role purpose web_haproxy Manage provisioning of HAProxy web_httpd Manage provisioning of Apache HTTPD web_mkdocs Manage provisioning of the MkDocs tool web_nginx Manage provisioning of NGINX Deployment \u00b6 Dependencies \u00b6 Ansible Collections: serdigital64.backup serdigital64.system Installation Procedure \u00b6 Manually install Ansible Collections from the Ansible Galaxy repository: ansible-galaxy collection install --upgrade serdigital64.web Automatic installation is also available by deploying A:Platform64 Contributing \u00b6 Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details. Author \u00b6 SerDigital64 License \u00b6 GPL-3.0-or-later","title":"web"},{"location":"collections/web/#ansible-collection-serdigital64web","text":"","title":"Ansible Collection: serdigital64.web"},{"location":"collections/web/#about","text":"Ansible Roles for automating web tools provisioning. This collection is part of the A:Platform64 project for automated infrastructure-as-code management.","title":"About"},{"location":"collections/web/#content","text":"role purpose web_haproxy Manage provisioning of HAProxy web_httpd Manage provisioning of Apache HTTPD web_mkdocs Manage provisioning of the MkDocs tool web_nginx Manage provisioning of NGINX","title":"Content"},{"location":"collections/web/#deployment","text":"","title":"Deployment"},{"location":"collections/web/#dependencies","text":"Ansible Collections: serdigital64.backup serdigital64.system","title":"Dependencies"},{"location":"collections/web/#installation-procedure","text":"Manually install Ansible Collections from the Ansible Galaxy repository: ansible-galaxy collection install --upgrade serdigital64.web Automatic installation is also available by deploying A:Platform64","title":"Installation Procedure"},{"location":"collections/web/#contributing","text":"Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details.","title":"Contributing"},{"location":"collections/web/#author","text":"SerDigital64","title":"Author"},{"location":"collections/web/#license","text":"GPL-3.0-or-later","title":"License"},{"location":"contributing/CHANGELOG/","text":"Changelog \u00b6 Collection application Collection automation Collection backup Collection cloud Collection container Collection database Collection development Collection devops Collection hardware Collection hypervisor Collection infrastructure Collection monitor Collection network Collection security Collection storage Collection system Collection web","title":"changelog"},{"location":"contributing/CHANGELOG/#changelog","text":"Collection application Collection automation Collection backup Collection cloud Collection container Collection database Collection development Collection devops Collection hardware Collection hypervisor Collection infrastructure Collection monitor Collection network Collection security Collection storage Collection system Collection web","title":"Changelog"},{"location":"contributing/CODE_OF_CONDUCT/","text":"Contributor Covenant Code of Conduct \u00b6 Our Pledge \u00b6 We as members, contributors, and leaders pledge to make participation in our community a harassment-free experience for everyone, regardless of age, body size, visible or invisible disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation. We pledge to act and interact in ways that contribute to an open, welcoming, diverse, inclusive, and healthy community. Our Standards \u00b6 Examples of behavior that contributes to a positive environment for our community include: Demonstrating empathy and kindness toward other people Being respectful of differing opinions, viewpoints, and experiences Giving and gracefully accepting constructive feedback Accepting responsibility and apologizing to those affected by our mistakes, and learning from the experience Focusing on what is best not just for us as individuals, but for the overall community Examples of unacceptable behavior include: The use of sexualized language or imagery, and sexual attention or advances of any kind Trolling, insulting or derogatory comments, and personal or political attacks Public or private harassment Publishing others' private information, such as a physical or email address, without their explicit permission Other conduct which could reasonably be considered inappropriate in a professional setting Enforcement Responsibilities \u00b6 Community leaders are responsible for clarifying and enforcing our standards of acceptable behavior and will take appropriate and fair corrective action in response to any behavior that they deem inappropriate, threatening, offensive, or harmful. Community leaders have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, and will communicate reasons for moderation decisions when appropriate. Scope \u00b6 This Code of Conduct applies within all community spaces, and also applies when an individual is officially representing the community in public spaces. Examples of representing our community include using an official e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Enforcement \u00b6 Instances of abusive, harassing, or otherwise unacceptable behavior may be reported to the community leaders responsible for enforcement at serdigital64@gmail.com. All complaints will be reviewed and investigated promptly and fairly. All community leaders are obligated to respect the privacy and security of the reporter of any incident. Enforcement Guidelines \u00b6 Community leaders will follow these Community Impact Guidelines in determining the consequences for any action they deem in violation of this Code of Conduct: 1. Correction \u00b6 Community Impact : Use of inappropriate language or other behavior deemed unprofessional or unwelcome in the community. Consequence : A private, written warning from community leaders, providing clarity around the nature of the violation and an explanation of why the behavior was inappropriate. A public apology may be requested. 2. Warning \u00b6 Community Impact : A violation through a single incident or series of actions. Consequence : A warning with consequences for continued behavior. No interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, for a specified period of time. This includes avoiding interactions in community spaces as well as external channels like social media. Violating these terms may lead to a temporary or permanent ban. 3. Temporary Ban \u00b6 Community Impact : A serious violation of community standards, including sustained inappropriate behavior. Consequence : A temporary ban from any sort of interaction or public communication with the community for a specified period of time. No public or private interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, is allowed during this period. Violating these terms may lead to a permanent ban. 4. Permanent Ban \u00b6 Community Impact : Demonstrating a pattern of violation of community standards, including sustained inappropriate behavior, harassment of an individual, or aggression toward or disparagement of classes of individuals. Consequence : A permanent ban from any sort of public interaction within the community. Attribution \u00b6 This Code of Conduct is adapted from the Contributor Covenant , version 2.0, available at https://www.contributor-covenant.org/version/2/0/code_of_conduct.html. Community Impact Guidelines were inspired by Mozilla's code of conduct enforcement ladder . For answers to common questions about this code of conduct, see the FAQ at https://www.contributor-covenant.org/faq. Translations are available at https://www.contributor-covenant.org/translations.","title":"conduct"},{"location":"contributing/CODE_OF_CONDUCT/#contributor-covenant-code-of-conduct","text":"","title":"Contributor Covenant Code of Conduct"},{"location":"contributing/CODE_OF_CONDUCT/#our-pledge","text":"We as members, contributors, and leaders pledge to make participation in our community a harassment-free experience for everyone, regardless of age, body size, visible or invisible disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation. We pledge to act and interact in ways that contribute to an open, welcoming, diverse, inclusive, and healthy community.","title":"Our Pledge"},{"location":"contributing/CODE_OF_CONDUCT/#our-standards","text":"Examples of behavior that contributes to a positive environment for our community include: Demonstrating empathy and kindness toward other people Being respectful of differing opinions, viewpoints, and experiences Giving and gracefully accepting constructive feedback Accepting responsibility and apologizing to those affected by our mistakes, and learning from the experience Focusing on what is best not just for us as individuals, but for the overall community Examples of unacceptable behavior include: The use of sexualized language or imagery, and sexual attention or advances of any kind Trolling, insulting or derogatory comments, and personal or political attacks Public or private harassment Publishing others' private information, such as a physical or email address, without their explicit permission Other conduct which could reasonably be considered inappropriate in a professional setting","title":"Our Standards"},{"location":"contributing/CODE_OF_CONDUCT/#enforcement-responsibilities","text":"Community leaders are responsible for clarifying and enforcing our standards of acceptable behavior and will take appropriate and fair corrective action in response to any behavior that they deem inappropriate, threatening, offensive, or harmful. Community leaders have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, and will communicate reasons for moderation decisions when appropriate.","title":"Enforcement Responsibilities"},{"location":"contributing/CODE_OF_CONDUCT/#scope","text":"This Code of Conduct applies within all community spaces, and also applies when an individual is officially representing the community in public spaces. Examples of representing our community include using an official e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event.","title":"Scope"},{"location":"contributing/CODE_OF_CONDUCT/#enforcement","text":"Instances of abusive, harassing, or otherwise unacceptable behavior may be reported to the community leaders responsible for enforcement at serdigital64@gmail.com. All complaints will be reviewed and investigated promptly and fairly. All community leaders are obligated to respect the privacy and security of the reporter of any incident.","title":"Enforcement"},{"location":"contributing/CODE_OF_CONDUCT/#enforcement-guidelines","text":"Community leaders will follow these Community Impact Guidelines in determining the consequences for any action they deem in violation of this Code of Conduct:","title":"Enforcement Guidelines"},{"location":"contributing/CODE_OF_CONDUCT/#1-correction","text":"Community Impact : Use of inappropriate language or other behavior deemed unprofessional or unwelcome in the community. Consequence : A private, written warning from community leaders, providing clarity around the nature of the violation and an explanation of why the behavior was inappropriate. A public apology may be requested.","title":"1. Correction"},{"location":"contributing/CODE_OF_CONDUCT/#2-warning","text":"Community Impact : A violation through a single incident or series of actions. Consequence : A warning with consequences for continued behavior. No interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, for a specified period of time. This includes avoiding interactions in community spaces as well as external channels like social media. Violating these terms may lead to a temporary or permanent ban.","title":"2. Warning"},{"location":"contributing/CODE_OF_CONDUCT/#3-temporary-ban","text":"Community Impact : A serious violation of community standards, including sustained inappropriate behavior. Consequence : A temporary ban from any sort of interaction or public communication with the community for a specified period of time. No public or private interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, is allowed during this period. Violating these terms may lead to a permanent ban.","title":"3. Temporary Ban"},{"location":"contributing/CODE_OF_CONDUCT/#4-permanent-ban","text":"Community Impact : Demonstrating a pattern of violation of community standards, including sustained inappropriate behavior, harassment of an individual, or aggression toward or disparagement of classes of individuals. Consequence : A permanent ban from any sort of public interaction within the community.","title":"4. Permanent Ban"},{"location":"contributing/CODE_OF_CONDUCT/#attribution","text":"This Code of Conduct is adapted from the Contributor Covenant , version 2.0, available at https://www.contributor-covenant.org/version/2/0/code_of_conduct.html. Community Impact Guidelines were inspired by Mozilla's code of conduct enforcement ladder . For answers to common questions about this code of conduct, see the FAQ at https://www.contributor-covenant.org/faq. Translations are available at https://www.contributor-covenant.org/translations.","title":"Attribution"},{"location":"contributing/CONTRIBUTING/","text":"Contributing \u00b6 Role Structure \u00b6 Defaults \u00b6 Used as an interface to expose role end-state attributes and action parameters Path Purpose defaults/ Root directory where Ansible will look for defaults defaults/main/ Allow Ansible to use individual default definition files instead of a single main.yml entry point defaults/main/end_state_definition.yml Declare what are the end-state attributes that the role will set. defaults/main/action_parameters.yml Declare what parameters are available to define how role actions will behave. All role attributes and parameters must be declared. If the variable doesn't have a default value then it must be initialized to the empty value associated to the variable type (number, string, dictionary, list) Complex variables (dictionaries, lists) must be further documented in the vars/dictionary.yml file State definition attributes are permanent and are intended to represent the desired state. Non-default values must be defined as host_variables or group_variables and are the main component for implementing the infrastructure-as-code strategy Action parameter variables are dynamic and are reset every time the role is executed. This allows common roles to be executed several times without inheriting default settings from previous iterations. Actions \u00b6 Action: Prepare \u00b6 Purpose: prepare the role runtime environment. Common tasks: Create users. Create directory structures. Action: Deploy \u00b6 Purpose: install application packages used by the role. Common tasks: Install native operating system application packages. Install application packages distributed as single archives. Install application packages from GIT. Install application packages from Snap. Install application packages from FlatHub. Action: Setup \u00b6 Purpose: setup configuration files used by the role. Common tasks: Create configuration files Update configuration files Action: Control \u00b6 Purpose: control the execution of services managed by the role. Common tasks: Star/Stop the service. Refresh/Reload the service. Action: Provision \u00b6 Purpose: perform provisioning tasks for content managed by the role. Common tasks: tasks are dependant on the role. Code Templates \u00b6 Use the following code templates from the project CodeSkel64 for adding content to the project: Collections Roles Tests Versioning Strategy \u00b6 Semantic Versioning 2 Branching Model \u00b6 Git-Flow Change Log Format \u00b6 Keep a Changelog , Linting \u00b6 Global Ansible Lint definition: $DEVAP_ROOT/.ansible-lint Global YAML Lint definition: $DEVAP_ROOT/.yamllint Testing \u00b6 Tool: Molecule Scenarios: Initialize: create an scenario for running the role with no parameters (defaults) Role Actions: create scenarios for each role action Use Cases: create scenarios for each key use case Global Molecule definition: $DEVAP_ROOT/.molecule Documentation \u00b6 Main documentation is located in path $DEVAP_DOCS Documentation is created using MkDocs and published in the https://readthedocs.org/ ] site. Roles are documented in $DEVAP_DOCS/roles Collections are documented in $DEVAP_DOCS/collections Commit Message Strategy \u00b6 Conventional Commits Subject Format: Type: Summary Subject Max Length: 50 characters Types: build docs feat fix refactor style test Summary Templates: update xxx remove xxx fix xxx set initial structure Naming Convention \u00b6 Collections definition: represents a technology or service lowercase single word Roles definition: represents a component of the technology managed by the collection lowercase words separate by _ combined word: collection name + role name template: collection_role Tasks definition: represents a set of actions lowercase words separate by _ combined word: collection name + role name + task name + subtask name templates collection_role_task.yml collection_role_task_subtask.yml Defaults main/state_definition.yml main/action_parameters.yml Variables lowercase words separate by _ combined word: collection name + role name + variable name templates collection_role_variable collection_role___temporary_variable","title":"guidelines"},{"location":"contributing/CONTRIBUTING/#contributing","text":"","title":"Contributing"},{"location":"contributing/CONTRIBUTING/#role-structure","text":"","title":"Role Structure"},{"location":"contributing/CONTRIBUTING/#defaults","text":"Used as an interface to expose role end-state attributes and action parameters Path Purpose defaults/ Root directory where Ansible will look for defaults defaults/main/ Allow Ansible to use individual default definition files instead of a single main.yml entry point defaults/main/end_state_definition.yml Declare what are the end-state attributes that the role will set. defaults/main/action_parameters.yml Declare what parameters are available to define how role actions will behave. All role attributes and parameters must be declared. If the variable doesn't have a default value then it must be initialized to the empty value associated to the variable type (number, string, dictionary, list) Complex variables (dictionaries, lists) must be further documented in the vars/dictionary.yml file State definition attributes are permanent and are intended to represent the desired state. Non-default values must be defined as host_variables or group_variables and are the main component for implementing the infrastructure-as-code strategy Action parameter variables are dynamic and are reset every time the role is executed. This allows common roles to be executed several times without inheriting default settings from previous iterations.","title":"Defaults"},{"location":"contributing/CONTRIBUTING/#actions","text":"","title":"Actions"},{"location":"contributing/CONTRIBUTING/#action-prepare","text":"Purpose: prepare the role runtime environment. Common tasks: Create users. Create directory structures.","title":"Action: Prepare"},{"location":"contributing/CONTRIBUTING/#action-deploy","text":"Purpose: install application packages used by the role. Common tasks: Install native operating system application packages. Install application packages distributed as single archives. Install application packages from GIT. Install application packages from Snap. Install application packages from FlatHub.","title":"Action: Deploy"},{"location":"contributing/CONTRIBUTING/#action-setup","text":"Purpose: setup configuration files used by the role. Common tasks: Create configuration files Update configuration files","title":"Action: Setup"},{"location":"contributing/CONTRIBUTING/#action-control","text":"Purpose: control the execution of services managed by the role. Common tasks: Star/Stop the service. Refresh/Reload the service.","title":"Action: Control"},{"location":"contributing/CONTRIBUTING/#action-provision","text":"Purpose: perform provisioning tasks for content managed by the role. Common tasks: tasks are dependant on the role.","title":"Action: Provision"},{"location":"contributing/CONTRIBUTING/#code-templates","text":"Use the following code templates from the project CodeSkel64 for adding content to the project: Collections Roles Tests","title":"Code Templates"},{"location":"contributing/CONTRIBUTING/#versioning-strategy","text":"Semantic Versioning 2","title":"Versioning Strategy"},{"location":"contributing/CONTRIBUTING/#branching-model","text":"Git-Flow","title":"Branching Model"},{"location":"contributing/CONTRIBUTING/#change-log-format","text":"Keep a Changelog ,","title":"Change Log Format"},{"location":"contributing/CONTRIBUTING/#linting","text":"Global Ansible Lint definition: $DEVAP_ROOT/.ansible-lint Global YAML Lint definition: $DEVAP_ROOT/.yamllint","title":"Linting"},{"location":"contributing/CONTRIBUTING/#testing","text":"Tool: Molecule Scenarios: Initialize: create an scenario for running the role with no parameters (defaults) Role Actions: create scenarios for each role action Use Cases: create scenarios for each key use case Global Molecule definition: $DEVAP_ROOT/.molecule","title":"Testing"},{"location":"contributing/CONTRIBUTING/#documentation","text":"Main documentation is located in path $DEVAP_DOCS Documentation is created using MkDocs and published in the https://readthedocs.org/ ] site. Roles are documented in $DEVAP_DOCS/roles Collections are documented in $DEVAP_DOCS/collections","title":"Documentation"},{"location":"contributing/CONTRIBUTING/#commit-message-strategy","text":"Conventional Commits Subject Format: Type: Summary Subject Max Length: 50 characters Types: build docs feat fix refactor style test Summary Templates: update xxx remove xxx fix xxx set initial structure","title":"Commit Message Strategy"},{"location":"contributing/CONTRIBUTING/#naming-convention","text":"Collections definition: represents a technology or service lowercase single word Roles definition: represents a component of the technology managed by the collection lowercase words separate by _ combined word: collection name + role name template: collection_role Tasks definition: represents a set of actions lowercase words separate by _ combined word: collection name + role name + task name + subtask name templates collection_role_task.yml collection_role_task_subtask.yml Defaults main/state_definition.yml main/action_parameters.yml Variables lowercase words separate by _ combined word: collection name + role name + variable name templates collection_role_variable collection_role___temporary_variable","title":"Naming Convention"},{"location":"playbooks/bootstrap_ansible_managed_nodes/","text":"Ansible Playbook: bootstrap_aplatform64_nodes \u00b6 Purpose \u00b6 Bootstrap Ansible Managed nodes. Supported features in the current version: Register the node in the Ansible controller Prepare the managed node for remote control Use Cases \u00b6 Prepare Ansible Managed node \u00b6 Verify that target nodes are registered in the inventory file: aplatform64_service.ini , group: bootstrap_aplatform64_nodes_distro Verify that the bootstrap credentials are set in the endstate file: auto_ansible_node.yml Run the playbook. Use the -s <SITE> parameter to select the target site. /opt/aplatform64/bin/ap64.sh -n -p bootstrap_aplatform64_nodes -s <SITE> Update the inventory file by removing the host from the group bootstrap_aplatform64_nodes_distro and adding it to the group aplatform64_nodes Playbook Parameters \u00b6 Inventory \u00b6 Register the hosts that will consume the service in the Ansible Inventory file: File: inventories/<SITE>/aplatform64_service.ini Host Group: bootstrap_aplatform64_nodes_distro End State \u00b6 A dedicated group_vars directory is used to store end-state configuration settings for both the playbook and related Ansible Roles. Role specific settings are available to further customize the playbook: A:Platform64 role group_vars file serdigital64.automation.auto_ansible_node inventories/<SITE>/group_vars/bootstrap_aplatform64_nodes_distro/auto_ansible_node.yml Deployment \u00b6 OS Compatibility \u00b6 OS compatibility is role dependant. Please refer to the respective role documentation. Dependencies \u00b6 Dependencies in this section are automatically solved during the installation of A:Platform64. Ansible Collections: serdigital64.backup serdigital64.system serdigital64.automation Prerequisites \u00b6 Ansible: Control Node: A:Platform64 installed and configured. Managed Nodes: target hosts prepared for A:Platform64 control. Installation Procedure \u00b6 The playbook is automatically deployed during the A:Platform64 installation process. Contributing \u00b6 Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details. Author \u00b6 SerDigital64 License \u00b6 GPL-3.0-or-later","title":"Ansible Playbook: bootstrap_aplatform64_nodes"},{"location":"playbooks/bootstrap_ansible_managed_nodes/#ansible-playbook-bootstrap_aplatform64_nodes","text":"","title":"Ansible Playbook: bootstrap_aplatform64_nodes"},{"location":"playbooks/bootstrap_ansible_managed_nodes/#purpose","text":"Bootstrap Ansible Managed nodes. Supported features in the current version: Register the node in the Ansible controller Prepare the managed node for remote control","title":"Purpose"},{"location":"playbooks/bootstrap_ansible_managed_nodes/#use-cases","text":"","title":"Use Cases"},{"location":"playbooks/bootstrap_ansible_managed_nodes/#prepare-ansible-managed-node","text":"Verify that target nodes are registered in the inventory file: aplatform64_service.ini , group: bootstrap_aplatform64_nodes_distro Verify that the bootstrap credentials are set in the endstate file: auto_ansible_node.yml Run the playbook. Use the -s <SITE> parameter to select the target site. /opt/aplatform64/bin/ap64.sh -n -p bootstrap_aplatform64_nodes -s <SITE> Update the inventory file by removing the host from the group bootstrap_aplatform64_nodes_distro and adding it to the group aplatform64_nodes","title":"Prepare Ansible Managed node"},{"location":"playbooks/bootstrap_ansible_managed_nodes/#playbook-parameters","text":"","title":"Playbook Parameters"},{"location":"playbooks/bootstrap_ansible_managed_nodes/#inventory","text":"Register the hosts that will consume the service in the Ansible Inventory file: File: inventories/<SITE>/aplatform64_service.ini Host Group: bootstrap_aplatform64_nodes_distro","title":"Inventory"},{"location":"playbooks/bootstrap_ansible_managed_nodes/#end-state","text":"A dedicated group_vars directory is used to store end-state configuration settings for both the playbook and related Ansible Roles. Role specific settings are available to further customize the playbook: A:Platform64 role group_vars file serdigital64.automation.auto_ansible_node inventories/<SITE>/group_vars/bootstrap_aplatform64_nodes_distro/auto_ansible_node.yml","title":"End State"},{"location":"playbooks/bootstrap_ansible_managed_nodes/#deployment","text":"","title":"Deployment"},{"location":"playbooks/bootstrap_ansible_managed_nodes/#os-compatibility","text":"OS compatibility is role dependant. Please refer to the respective role documentation.","title":"OS Compatibility"},{"location":"playbooks/bootstrap_ansible_managed_nodes/#dependencies","text":"Dependencies in this section are automatically solved during the installation of A:Platform64. Ansible Collections: serdigital64.backup serdigital64.system serdigital64.automation","title":"Dependencies"},{"location":"playbooks/bootstrap_ansible_managed_nodes/#prerequisites","text":"Ansible: Control Node: A:Platform64 installed and configured. Managed Nodes: target hosts prepared for A:Platform64 control.","title":"Prerequisites"},{"location":"playbooks/bootstrap_ansible_managed_nodes/#installation-procedure","text":"The playbook is automatically deployed during the A:Platform64 installation process.","title":"Installation Procedure"},{"location":"playbooks/bootstrap_ansible_managed_nodes/#contributing","text":"Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details.","title":"Contributing"},{"location":"playbooks/bootstrap_ansible_managed_nodes/#author","text":"SerDigital64","title":"Author"},{"location":"playbooks/bootstrap_ansible_managed_nodes/#license","text":"GPL-3.0-or-later","title":"License"},{"location":"playbooks/manage_aplatform64_nodes/","text":"Ansible Playbook: manage_aplatform64_nodes \u00b6 Purpose \u00b6 Manage A:Platform64 nodes. Supported features in the current version: Maintain the environment for the execution of A:Platform64 Ansible roles Use Cases \u00b6 Prepare A:Platform64 node \u00b6 Verify that target nodes are registered in the inventory file: aplatform64_service.ini Verify that target endstate is set: manage_aplatform64_nodes.yml Run the playbook. Use the -s <SITE> parameter to select the target site. /opt/aplatform64/bin/ap64.sh -n -p manage_aplatform64_nodes -s <SITE> Playbook Parameters \u00b6 Inventory \u00b6 Register the hosts that will consume the service in the Ansible Inventory file: File: inventories/<SITE>/aplatform64_service.ini Host Group: aplatform64_nodes End State \u00b6 A dedicated group_vars directory is used to store end-state configuration settings for both the playbook and related Ansible Roles. Role specific settings are available to further customize the playbook: A:Platform64 role group_vars file serdigital64.automation.auto_ansible_node inventories/<SITE>/group_vars/aplatform64_nodes/auto_ansible_node.yml Deployment \u00b6 OS Compatibility \u00b6 OS compatibility is role dependant. Please refer to the respective role documentation. Dependencies \u00b6 Dependencies in this section are automatically solved during the installation of A:Platform64. Ansible Collections: serdigital64.backup serdigital64.system serdigital64.automation Prerequisites \u00b6 Ansible: Control Node: A:Platform64 installed and configured. Managed Nodes: target hosts prepared for A:Platform64 control. Installation Procedure \u00b6 The playbook is automatically deployed during the A:Platform64 installation process. Contributing \u00b6 Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details. Author \u00b6 SerDigital64 License \u00b6 GPL-3.0-or-later","title":"manage_aplatform64_nodes"},{"location":"playbooks/manage_aplatform64_nodes/#ansible-playbook-manage_aplatform64_nodes","text":"","title":"Ansible Playbook: manage_aplatform64_nodes"},{"location":"playbooks/manage_aplatform64_nodes/#purpose","text":"Manage A:Platform64 nodes. Supported features in the current version: Maintain the environment for the execution of A:Platform64 Ansible roles","title":"Purpose"},{"location":"playbooks/manage_aplatform64_nodes/#use-cases","text":"","title":"Use Cases"},{"location":"playbooks/manage_aplatform64_nodes/#prepare-aplatform64-node","text":"Verify that target nodes are registered in the inventory file: aplatform64_service.ini Verify that target endstate is set: manage_aplatform64_nodes.yml Run the playbook. Use the -s <SITE> parameter to select the target site. /opt/aplatform64/bin/ap64.sh -n -p manage_aplatform64_nodes -s <SITE>","title":"Prepare A:Platform64 node"},{"location":"playbooks/manage_aplatform64_nodes/#playbook-parameters","text":"","title":"Playbook Parameters"},{"location":"playbooks/manage_aplatform64_nodes/#inventory","text":"Register the hosts that will consume the service in the Ansible Inventory file: File: inventories/<SITE>/aplatform64_service.ini Host Group: aplatform64_nodes","title":"Inventory"},{"location":"playbooks/manage_aplatform64_nodes/#end-state","text":"A dedicated group_vars directory is used to store end-state configuration settings for both the playbook and related Ansible Roles. Role specific settings are available to further customize the playbook: A:Platform64 role group_vars file serdigital64.automation.auto_ansible_node inventories/<SITE>/group_vars/aplatform64_nodes/auto_ansible_node.yml","title":"End State"},{"location":"playbooks/manage_aplatform64_nodes/#deployment","text":"","title":"Deployment"},{"location":"playbooks/manage_aplatform64_nodes/#os-compatibility","text":"OS compatibility is role dependant. Please refer to the respective role documentation.","title":"OS Compatibility"},{"location":"playbooks/manage_aplatform64_nodes/#dependencies","text":"Dependencies in this section are automatically solved during the installation of A:Platform64. Ansible Collections: serdigital64.backup serdigital64.system serdigital64.automation","title":"Dependencies"},{"location":"playbooks/manage_aplatform64_nodes/#prerequisites","text":"Ansible: Control Node: A:Platform64 installed and configured. Managed Nodes: target hosts prepared for A:Platform64 control.","title":"Prerequisites"},{"location":"playbooks/manage_aplatform64_nodes/#installation-procedure","text":"The playbook is automatically deployed during the A:Platform64 installation process.","title":"Installation Procedure"},{"location":"playbooks/manage_aplatform64_nodes/#contributing","text":"Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details.","title":"Contributing"},{"location":"playbooks/manage_aplatform64_nodes/#author","text":"SerDigital64","title":"Author"},{"location":"playbooks/manage_aplatform64_nodes/#license","text":"GPL-3.0-or-later","title":"License"},{"location":"playbooks/manage_aplatform64_servers/","text":"Ansible Playbook: manage_aplatform64_servers \u00b6 Purpose \u00b6 Manage A:Platform64 servers. Supported features in the current version: Update A:Platform64 structure after collection upgrade Create new A:Platform64 sites Use Cases \u00b6 The playbook must be run using the A:Platform64 CLI : Create a A:Platform64 site /opt/aplatform64/bin/ap64.sh -c -s <SITE> Refresh A:Platform64 site configuration by rerunning the setup process /opt/aplatform64/bin/ap64.sh -r -s <SITE> Playbook Parameters \u00b6 Inventory \u00b6 Register the hosts that will consume the service in the Ansible Inventory file: File: inventories/<SITE>/aplatform64_service.ini Host Group: aplatform64_servers End State \u00b6 A dedicated group_vars directory is used to store end-state configuration settings for both the playbook and related Ansible Roles. Role specific settings are available to further customize the playbook: A:Platform64 role group_vars file serdigital64.automation.auto_ansible_control inventories/<SITE>/group_vars/aplatform64_servers/auto_ansible_control.yml Deployment \u00b6 OS Compatibility \u00b6 OS compatibility is role dependant. Please refer to the respective role documentation. Dependencies \u00b6 Dependencies in this section are automatically solved during the installation of A:Platform64. Ansible Collections: serdigital64.backup serdigital64.system serdigital64.automation Prerequisites \u00b6 Ansible: Control Node: A:Platform64 installed and configured Installation Procedure \u00b6 The playbook is automatically deployed during the A:Platform64 installation process. Contributing \u00b6 Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details. Author \u00b6 SerDigital64 License \u00b6 GPL-3.0-or-later","title":"manage_aplatform64_servers"},{"location":"playbooks/manage_aplatform64_servers/#ansible-playbook-manage_aplatform64_servers","text":"","title":"Ansible Playbook: manage_aplatform64_servers"},{"location":"playbooks/manage_aplatform64_servers/#purpose","text":"Manage A:Platform64 servers. Supported features in the current version: Update A:Platform64 structure after collection upgrade Create new A:Platform64 sites","title":"Purpose"},{"location":"playbooks/manage_aplatform64_servers/#use-cases","text":"The playbook must be run using the A:Platform64 CLI : Create a A:Platform64 site /opt/aplatform64/bin/ap64.sh -c -s <SITE> Refresh A:Platform64 site configuration by rerunning the setup process /opt/aplatform64/bin/ap64.sh -r -s <SITE>","title":"Use Cases"},{"location":"playbooks/manage_aplatform64_servers/#playbook-parameters","text":"","title":"Playbook Parameters"},{"location":"playbooks/manage_aplatform64_servers/#inventory","text":"Register the hosts that will consume the service in the Ansible Inventory file: File: inventories/<SITE>/aplatform64_service.ini Host Group: aplatform64_servers","title":"Inventory"},{"location":"playbooks/manage_aplatform64_servers/#end-state","text":"A dedicated group_vars directory is used to store end-state configuration settings for both the playbook and related Ansible Roles. Role specific settings are available to further customize the playbook: A:Platform64 role group_vars file serdigital64.automation.auto_ansible_control inventories/<SITE>/group_vars/aplatform64_servers/auto_ansible_control.yml","title":"End State"},{"location":"playbooks/manage_aplatform64_servers/#deployment","text":"","title":"Deployment"},{"location":"playbooks/manage_aplatform64_servers/#os-compatibility","text":"OS compatibility is role dependant. Please refer to the respective role documentation.","title":"OS Compatibility"},{"location":"playbooks/manage_aplatform64_servers/#dependencies","text":"Dependencies in this section are automatically solved during the installation of A:Platform64. Ansible Collections: serdigital64.backup serdigital64.system serdigital64.automation","title":"Dependencies"},{"location":"playbooks/manage_aplatform64_servers/#prerequisites","text":"Ansible: Control Node: A:Platform64 installed and configured","title":"Prerequisites"},{"location":"playbooks/manage_aplatform64_servers/#installation-procedure","text":"The playbook is automatically deployed during the A:Platform64 installation process.","title":"Installation Procedure"},{"location":"playbooks/manage_aplatform64_servers/#contributing","text":"Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details.","title":"Contributing"},{"location":"playbooks/manage_aplatform64_servers/#author","text":"SerDigital64","title":"Author"},{"location":"playbooks/manage_aplatform64_servers/#license","text":"GPL-3.0-or-later","title":"License"},{"location":"playbooks/manage_cloud_control_nodes/","text":"Ansible Playbook: manage_cloud_control_nodes \u00b6 Purpose \u00b6 Provision public cloud management tools. Supported features in the current version: Install cloud management tools for: Amazon AWS Microsoft Azure Google Cloud IBM Cloud Cloud Foundry Install infrastructure provisioners: Terraform Use Cases \u00b6 Deploy public cloud management tools \u00b6 Verify that target nodes are registered in the inventory file: cloud_control_nodes.ini Verify that target tools are selected in the playbook endstate file: manage_cloud_control_nodes.yml Run the playbook. Use the -s <SITE> parameter to select the target site. /opt/aplatform64/bin/ap64.sh -n -p manage_cloud_control_nodes -s <SITE> Playbook Parameters \u00b6 Inventory \u00b6 Register the hosts that will consume the service in the Ansible Inventory file: File: inventories/<SITE>/cloud_control_nodes.ini Host Group: cloud_control_nodes End State \u00b6 A dedicated group_vars directory is used to store end-state configuration settings for both the playbook and related Ansible Roles. Set playbook specific settings in the file: inventories/<SITE>/group_vars/cloud_control_nodes/manage_cloud_control_nodes.yml cloud_control_nodes_apps : aws : azure : foundry : google : ibm : terraform : Parameter Required? Type Default Purpose / Value cloud_control_nodes_apps yes dictionary Define what applications will be deployed cloud_control_nodes_apps.aws no boolean true Deploy the application? cloud_control_nodes_apps.azure no boolean true Deploy the application? cloud_control_nodes_apps.foundry no boolean true Deploy the application? cloud_control_nodes_apps.google no boolean true Deploy the application? cloud_control_nodes_apps.ibm no boolean true Deploy the application? cloud_control_nodes_apps.terraform no boolean true Deploy the application? Additional role specific settings are available to further customize the playbook: A:Platform64 role group_vars file serdigital64.cloud.cloud_aws_cli inventories/<SITE>/group_vars/cloud_control_nodes/cloud_aws_cli.yml serdigital64.system.sys_repository inventories/<SITE>/group_vars/cloud_control_nodes/sys_repository.yml Deployment \u00b6 OS Compatibility \u00b6 OS compatibility is role dependant. Please refer to the respective role documentation. Dependencies \u00b6 Dependencies in this section are automatically solved during the installation of A:Platform64. Ansible Collections: serdigital64.backup serdigital64.system serdigital64.cloud Prerequisites \u00b6 Ansible: Control Node: A:Platform64 installed and configured. Managed Nodes: target hosts prepared for A:Platform64 control. Installation Procedure \u00b6 The playbook is automatically deployed during the A:Platform64 installation process. Contributing \u00b6 Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details. Author \u00b6 SerDigital64 License \u00b6 GPL-3.0-or-later","title":"manage_cloud_control_nodes"},{"location":"playbooks/manage_cloud_control_nodes/#ansible-playbook-manage_cloud_control_nodes","text":"","title":"Ansible Playbook: manage_cloud_control_nodes"},{"location":"playbooks/manage_cloud_control_nodes/#purpose","text":"Provision public cloud management tools. Supported features in the current version: Install cloud management tools for: Amazon AWS Microsoft Azure Google Cloud IBM Cloud Cloud Foundry Install infrastructure provisioners: Terraform","title":"Purpose"},{"location":"playbooks/manage_cloud_control_nodes/#use-cases","text":"","title":"Use Cases"},{"location":"playbooks/manage_cloud_control_nodes/#deploy-public-cloud-management-tools","text":"Verify that target nodes are registered in the inventory file: cloud_control_nodes.ini Verify that target tools are selected in the playbook endstate file: manage_cloud_control_nodes.yml Run the playbook. Use the -s <SITE> parameter to select the target site. /opt/aplatform64/bin/ap64.sh -n -p manage_cloud_control_nodes -s <SITE>","title":"Deploy public cloud management tools"},{"location":"playbooks/manage_cloud_control_nodes/#playbook-parameters","text":"","title":"Playbook Parameters"},{"location":"playbooks/manage_cloud_control_nodes/#inventory","text":"Register the hosts that will consume the service in the Ansible Inventory file: File: inventories/<SITE>/cloud_control_nodes.ini Host Group: cloud_control_nodes","title":"Inventory"},{"location":"playbooks/manage_cloud_control_nodes/#end-state","text":"A dedicated group_vars directory is used to store end-state configuration settings for both the playbook and related Ansible Roles. Set playbook specific settings in the file: inventories/<SITE>/group_vars/cloud_control_nodes/manage_cloud_control_nodes.yml cloud_control_nodes_apps : aws : azure : foundry : google : ibm : terraform : Parameter Required? Type Default Purpose / Value cloud_control_nodes_apps yes dictionary Define what applications will be deployed cloud_control_nodes_apps.aws no boolean true Deploy the application? cloud_control_nodes_apps.azure no boolean true Deploy the application? cloud_control_nodes_apps.foundry no boolean true Deploy the application? cloud_control_nodes_apps.google no boolean true Deploy the application? cloud_control_nodes_apps.ibm no boolean true Deploy the application? cloud_control_nodes_apps.terraform no boolean true Deploy the application? Additional role specific settings are available to further customize the playbook: A:Platform64 role group_vars file serdigital64.cloud.cloud_aws_cli inventories/<SITE>/group_vars/cloud_control_nodes/cloud_aws_cli.yml serdigital64.system.sys_repository inventories/<SITE>/group_vars/cloud_control_nodes/sys_repository.yml","title":"End State"},{"location":"playbooks/manage_cloud_control_nodes/#deployment","text":"","title":"Deployment"},{"location":"playbooks/manage_cloud_control_nodes/#os-compatibility","text":"OS compatibility is role dependant. Please refer to the respective role documentation.","title":"OS Compatibility"},{"location":"playbooks/manage_cloud_control_nodes/#dependencies","text":"Dependencies in this section are automatically solved during the installation of A:Platform64. Ansible Collections: serdigital64.backup serdigital64.system serdigital64.cloud","title":"Dependencies"},{"location":"playbooks/manage_cloud_control_nodes/#prerequisites","text":"Ansible: Control Node: A:Platform64 installed and configured. Managed Nodes: target hosts prepared for A:Platform64 control.","title":"Prerequisites"},{"location":"playbooks/manage_cloud_control_nodes/#installation-procedure","text":"The playbook is automatically deployed during the A:Platform64 installation process.","title":"Installation Procedure"},{"location":"playbooks/manage_cloud_control_nodes/#contributing","text":"Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details.","title":"Contributing"},{"location":"playbooks/manage_cloud_control_nodes/#author","text":"SerDigital64","title":"Author"},{"location":"playbooks/manage_cloud_control_nodes/#license","text":"GPL-3.0-or-later","title":"License"},{"location":"playbooks/manage_cloud_realm/","text":"Ansible Playbook: manage_cloud_realm \u00b6 Purpose \u00b6 Manage cloud provider accounts, users, and organizations as a single entity. The purpose is to simplify the setup of small public provider sites by defining a management structure following public provider best practicies. Supported cloud providers: Amazon AWS: implemented by the role serdigital64.cloud.cloud_aws_realm Use Cases \u00b6 Implement realm structure in AWS account \u00b6 Generate in AWS IAM the API secret and key for the root AWS Account. Update the API credentials for the root account in the end-state file cloud_aws_realm.yml cloud_aws_realm_api : root : key : \"**root account key**\" secret : \"**root account secret**\" Run the playbook. Use the -s <SITE> parameter to select the target site. /opt/aplatform64/bin/ap64.sh -n -p manage_cloud_realm -s <SITE> Verify that the new users and groups were created. Generate in AWS IAM the API secret and key for the IAM user iam_manager_auto . Update credentias in the end-state file cloud_aws_realm.yml Remove root credentials Add iam_manager_auto credentials cloud_aws_realm_api : iam_manager_auto : key : \"**iam_manager_auto user key**\" secret : \"**iam_manager_auto user secret**\" Playbook Parameters \u00b6 Inventory \u00b6 The playbook is run locally in the Ansible Control node and uses AWS API calls to execute remote tasks. Do not modify the inventory definition. File: inventories/<SITE>/cloud_realm.ini Host Group: cloud_realm End State \u00b6 A dedicated group_vars directory is used to store end-state configuration settings for both the playbook and related Ansible Roles. Set playbook specific settings in the file: inventories/<SITE>/group_vars/cloud_realm/manage_cloud_realm.yml cloud_realm_provider : aws : Parameter Required? Type Default Purpose / Value cloud_realm_provider no dictionary Define what public cloud provides will be managed cloud_realm_provider.aws no boolean true Enable AWS support Additional role specific settings are available to further customize the playbook: A:Platform64 role group_vars file serdigital64.cloud.cloud_aws_realm inventories/<SITE>/group_vars/cloud_realm/cloud_aws_realm.yml Deployment \u00b6 OS Compatibility \u00b6 OS compatibility is role dependant. Please refer to the respective role documentation. Dependencies \u00b6 Dependencies in this section are automatically solved during the installation of A:Platform64. Ansible Collections: serdigital64.cloud Prerequisites \u00b6 Ansible: Control Node: A:Platform64 installed and configured. Managed Nodes: target hosts prepared for A:Platform64 control. Installation Procedure \u00b6 The playbook is automatically deployed during the A:Platform64 installation process. Contributing \u00b6 Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details. Author \u00b6 SerDigital64 License \u00b6 GPL-3.0-or-later","title":"manage_cloud_realm"},{"location":"playbooks/manage_cloud_realm/#ansible-playbook-manage_cloud_realm","text":"","title":"Ansible Playbook: manage_cloud_realm"},{"location":"playbooks/manage_cloud_realm/#purpose","text":"Manage cloud provider accounts, users, and organizations as a single entity. The purpose is to simplify the setup of small public provider sites by defining a management structure following public provider best practicies. Supported cloud providers: Amazon AWS: implemented by the role serdigital64.cloud.cloud_aws_realm","title":"Purpose"},{"location":"playbooks/manage_cloud_realm/#use-cases","text":"","title":"Use Cases"},{"location":"playbooks/manage_cloud_realm/#implement-realm-structure-in-aws-account","text":"Generate in AWS IAM the API secret and key for the root AWS Account. Update the API credentials for the root account in the end-state file cloud_aws_realm.yml cloud_aws_realm_api : root : key : \"**root account key**\" secret : \"**root account secret**\" Run the playbook. Use the -s <SITE> parameter to select the target site. /opt/aplatform64/bin/ap64.sh -n -p manage_cloud_realm -s <SITE> Verify that the new users and groups were created. Generate in AWS IAM the API secret and key for the IAM user iam_manager_auto . Update credentias in the end-state file cloud_aws_realm.yml Remove root credentials Add iam_manager_auto credentials cloud_aws_realm_api : iam_manager_auto : key : \"**iam_manager_auto user key**\" secret : \"**iam_manager_auto user secret**\"","title":"Implement realm structure in AWS account"},{"location":"playbooks/manage_cloud_realm/#playbook-parameters","text":"","title":"Playbook Parameters"},{"location":"playbooks/manage_cloud_realm/#inventory","text":"The playbook is run locally in the Ansible Control node and uses AWS API calls to execute remote tasks. Do not modify the inventory definition. File: inventories/<SITE>/cloud_realm.ini Host Group: cloud_realm","title":"Inventory"},{"location":"playbooks/manage_cloud_realm/#end-state","text":"A dedicated group_vars directory is used to store end-state configuration settings for both the playbook and related Ansible Roles. Set playbook specific settings in the file: inventories/<SITE>/group_vars/cloud_realm/manage_cloud_realm.yml cloud_realm_provider : aws : Parameter Required? Type Default Purpose / Value cloud_realm_provider no dictionary Define what public cloud provides will be managed cloud_realm_provider.aws no boolean true Enable AWS support Additional role specific settings are available to further customize the playbook: A:Platform64 role group_vars file serdigital64.cloud.cloud_aws_realm inventories/<SITE>/group_vars/cloud_realm/cloud_aws_realm.yml","title":"End State"},{"location":"playbooks/manage_cloud_realm/#deployment","text":"","title":"Deployment"},{"location":"playbooks/manage_cloud_realm/#os-compatibility","text":"OS compatibility is role dependant. Please refer to the respective role documentation.","title":"OS Compatibility"},{"location":"playbooks/manage_cloud_realm/#dependencies","text":"Dependencies in this section are automatically solved during the installation of A:Platform64. Ansible Collections: serdigital64.cloud","title":"Dependencies"},{"location":"playbooks/manage_cloud_realm/#prerequisites","text":"Ansible: Control Node: A:Platform64 installed and configured. Managed Nodes: target hosts prepared for A:Platform64 control.","title":"Prerequisites"},{"location":"playbooks/manage_cloud_realm/#installation-procedure","text":"The playbook is automatically deployed during the A:Platform64 installation process.","title":"Installation Procedure"},{"location":"playbooks/manage_cloud_realm/#contributing","text":"Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details.","title":"Contributing"},{"location":"playbooks/manage_cloud_realm/#author","text":"SerDigital64","title":"Author"},{"location":"playbooks/manage_cloud_realm/#license","text":"GPL-3.0-or-later","title":"License"},{"location":"playbooks/manage_dev_nodes/","text":"Ansible Playbook: manage_dev_nodes \u00b6 Purpose \u00b6 Provision software development environments. Supported features in the current version: Install development languages: GCC Java NodeJS Python Ruby Install common development tools: make Install and setup IDEs: VSCode Install and setup VCS: GIT Install test/dev environment provisioners: Vagrant Use Cases \u00b6 Deploy software development environments \u00b6 Verify that target nodes are registered in the inventory file: dev_nodes.ini Verify that target endstate is set: manage_dev_nodes.yml Run the playbook. Use the -s <SITE> parameter to select the target site. /opt/aplatform64/bin/ap64.sh -n -p manage_dev_nodes -s <SITE> Playbook Parameters \u00b6 Inventory \u00b6 Register the hosts that will consume the service in the Ansible Inventory file: File: inventories/<SITE>/dev_nodes.ini Host Group: dev_nodes End State \u00b6 A dedicated group_vars directory is used to store end-state configuration settings for both the playbook and related Ansible Roles. Set playbook specific settings in the file: inventories/<SITE>/group_vars/dev_nodes/manage_dev_nodes.yml dev_nodes_apps : gcc : git_client : java : nodejs : python : ruby : tools : vagrant : vscode : Parameter Required? Type Default Purpose / Value dev_nodes_apps yes dictionary Define what applications will be deployed dev_nodes_apps.gcc no boolean false Deploy the application? dev_nodes_apps.git_client no boolean false Deploy the application? dev_nodes_apps.java no boolean false Deploy the application? dev_nodes_apps.nodejs no boolean false Deploy the application? dev_nodes_apps.python no boolean false Deploy the application? dev_nodes_apps.ruby no boolean false Deploy the application? dev_nodes_apps.tools no boolean true Deploy the application? dev_nodes_apps.vagrant no boolean false Deploy the application? dev_nodes_apps.vscode no boolean false Deploy the application? Additional role specific settings are available to further customize the playbook: A:Platform64 role group_vars file serdigital64.application.app_vscode inventories/<SITE>/group_vars/dev_nodes/app_vscode.yml serdigital64.development.dev_java inventories/<SITE>/group_vars/dev_nodes/dev_java.yml serdigital64.devops.dops_git_client inventories/<SITE>/group_vars/dev_nodes/dops_git_client.yml serdigital64.system.sys_repository inventories/<SITE>/group_vars/dev_nodes/sys_repository.yml Deployment \u00b6 OS Compatibility \u00b6 OS compatibility is role dependant. Please refer to the respective role documentation. Dependencies \u00b6 Dependencies in this section are automatically solved during the installation of A:Platform64. Ansible Collections: serdigital64.backup serdigital64.system serdigital64.development serdigital64.devops serdigital64.application Prerequisites \u00b6 Ansible: Control Node: A:Platform64 installed and configured. Managed Nodes: target hosts prepared for A:Platform64 control. Installation Procedure \u00b6 The playbook is automatically deployed during the A:Platform64 installation process. Contributing \u00b6 Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details. Author \u00b6 SerDigital64 License \u00b6 GPL-3.0-or-later","title":"manage_dev_nodes"},{"location":"playbooks/manage_dev_nodes/#ansible-playbook-manage_dev_nodes","text":"","title":"Ansible Playbook: manage_dev_nodes"},{"location":"playbooks/manage_dev_nodes/#purpose","text":"Provision software development environments. Supported features in the current version: Install development languages: GCC Java NodeJS Python Ruby Install common development tools: make Install and setup IDEs: VSCode Install and setup VCS: GIT Install test/dev environment provisioners: Vagrant","title":"Purpose"},{"location":"playbooks/manage_dev_nodes/#use-cases","text":"","title":"Use Cases"},{"location":"playbooks/manage_dev_nodes/#deploy-software-development-environments","text":"Verify that target nodes are registered in the inventory file: dev_nodes.ini Verify that target endstate is set: manage_dev_nodes.yml Run the playbook. Use the -s <SITE> parameter to select the target site. /opt/aplatform64/bin/ap64.sh -n -p manage_dev_nodes -s <SITE>","title":"Deploy software development environments"},{"location":"playbooks/manage_dev_nodes/#playbook-parameters","text":"","title":"Playbook Parameters"},{"location":"playbooks/manage_dev_nodes/#inventory","text":"Register the hosts that will consume the service in the Ansible Inventory file: File: inventories/<SITE>/dev_nodes.ini Host Group: dev_nodes","title":"Inventory"},{"location":"playbooks/manage_dev_nodes/#end-state","text":"A dedicated group_vars directory is used to store end-state configuration settings for both the playbook and related Ansible Roles. Set playbook specific settings in the file: inventories/<SITE>/group_vars/dev_nodes/manage_dev_nodes.yml dev_nodes_apps : gcc : git_client : java : nodejs : python : ruby : tools : vagrant : vscode : Parameter Required? Type Default Purpose / Value dev_nodes_apps yes dictionary Define what applications will be deployed dev_nodes_apps.gcc no boolean false Deploy the application? dev_nodes_apps.git_client no boolean false Deploy the application? dev_nodes_apps.java no boolean false Deploy the application? dev_nodes_apps.nodejs no boolean false Deploy the application? dev_nodes_apps.python no boolean false Deploy the application? dev_nodes_apps.ruby no boolean false Deploy the application? dev_nodes_apps.tools no boolean true Deploy the application? dev_nodes_apps.vagrant no boolean false Deploy the application? dev_nodes_apps.vscode no boolean false Deploy the application? Additional role specific settings are available to further customize the playbook: A:Platform64 role group_vars file serdigital64.application.app_vscode inventories/<SITE>/group_vars/dev_nodes/app_vscode.yml serdigital64.development.dev_java inventories/<SITE>/group_vars/dev_nodes/dev_java.yml serdigital64.devops.dops_git_client inventories/<SITE>/group_vars/dev_nodes/dops_git_client.yml serdigital64.system.sys_repository inventories/<SITE>/group_vars/dev_nodes/sys_repository.yml","title":"End State"},{"location":"playbooks/manage_dev_nodes/#deployment","text":"","title":"Deployment"},{"location":"playbooks/manage_dev_nodes/#os-compatibility","text":"OS compatibility is role dependant. Please refer to the respective role documentation.","title":"OS Compatibility"},{"location":"playbooks/manage_dev_nodes/#dependencies","text":"Dependencies in this section are automatically solved during the installation of A:Platform64. Ansible Collections: serdigital64.backup serdigital64.system serdigital64.development serdigital64.devops serdigital64.application","title":"Dependencies"},{"location":"playbooks/manage_dev_nodes/#prerequisites","text":"Ansible: Control Node: A:Platform64 installed and configured. Managed Nodes: target hosts prepared for A:Platform64 control.","title":"Prerequisites"},{"location":"playbooks/manage_dev_nodes/#installation-procedure","text":"The playbook is automatically deployed during the A:Platform64 installation process.","title":"Installation Procedure"},{"location":"playbooks/manage_dev_nodes/#contributing","text":"Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details.","title":"Contributing"},{"location":"playbooks/manage_dev_nodes/#author","text":"SerDigital64","title":"Author"},{"location":"playbooks/manage_dev_nodes/#license","text":"GPL-3.0-or-later","title":"License"},{"location":"playbooks/manage_doc_sites/","text":"Ansible Playbook: manage_doc_sites \u00b6 Purpose \u00b6 Provision documentation site management tools. Supported features in the current version: Deploy static site generation tools: MkDocs Use Cases \u00b6 Deploy MkDocs tool \u00b6 Verify that target nodes are registered in the inventory file: doc_sites.ini Verify that target tools are selected in the playbook endstate file: manage_doc_sites.yml Run the playbook. Use the -s <SITE> parameter to select the target site. /opt/aplatform64/bin/ap64.sh -n -p manage_doc_sites -s <SITE> Playbook Parameters \u00b6 Inventory \u00b6 Register the hosts that will consume the service in the Ansible Inventory file: File: inventories/site/doc_sites.ini Host Group: doc_sites End State \u00b6 A dedicated group_vars directory is used to store end-state configuration settings for both the playbook and related Ansible Roles. Set playbook specific settings in the file: inventories/site/group_vars/doc_sites/manage_doc_sites.yml manage_doc_sites_apps : mkdocs : Parameter Required? Type Default Purpose / Value manage_doc_sites_apps no dictionary Define what applications will be deployed manage_doc_sites_apps.mkdocs no boolean true Deploy the application? Additional role specific settings are available to further customize the playbook: A:Platform64 role group_vars file serdigital64.system.sys_repository inventories/site/group_vars/doc_sites/sys_repository.yml Deployment \u00b6 OS Compatibility \u00b6 OS compatibility is role dependant. Please refer to the respective role documentation. Dependencies \u00b6 Dependencies in this section are automatically solved during the installation process. Ansible Collections: serdigital64.backup serdigital64.system serdigital64. Prerequisites \u00b6 Ansible: Control Node: A:Platform64 installed and configured Managed Nodes: target hosts prepared for A:Platform64 control Installation Procedure \u00b6 The playbook is automatically deployed during the A:Platform64 installation process Contributing \u00b6 Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details. Author \u00b6 SerDigital64 License \u00b6 GPL-3.0-or-later","title":"manage_doc_sites"},{"location":"playbooks/manage_doc_sites/#ansible-playbook-manage_doc_sites","text":"","title":"Ansible Playbook: manage_doc_sites"},{"location":"playbooks/manage_doc_sites/#purpose","text":"Provision documentation site management tools. Supported features in the current version: Deploy static site generation tools: MkDocs","title":"Purpose"},{"location":"playbooks/manage_doc_sites/#use-cases","text":"","title":"Use Cases"},{"location":"playbooks/manage_doc_sites/#deploy-mkdocs-tool","text":"Verify that target nodes are registered in the inventory file: doc_sites.ini Verify that target tools are selected in the playbook endstate file: manage_doc_sites.yml Run the playbook. Use the -s <SITE> parameter to select the target site. /opt/aplatform64/bin/ap64.sh -n -p manage_doc_sites -s <SITE>","title":"Deploy MkDocs tool"},{"location":"playbooks/manage_doc_sites/#playbook-parameters","text":"","title":"Playbook Parameters"},{"location":"playbooks/manage_doc_sites/#inventory","text":"Register the hosts that will consume the service in the Ansible Inventory file: File: inventories/site/doc_sites.ini Host Group: doc_sites","title":"Inventory"},{"location":"playbooks/manage_doc_sites/#end-state","text":"A dedicated group_vars directory is used to store end-state configuration settings for both the playbook and related Ansible Roles. Set playbook specific settings in the file: inventories/site/group_vars/doc_sites/manage_doc_sites.yml manage_doc_sites_apps : mkdocs : Parameter Required? Type Default Purpose / Value manage_doc_sites_apps no dictionary Define what applications will be deployed manage_doc_sites_apps.mkdocs no boolean true Deploy the application? Additional role specific settings are available to further customize the playbook: A:Platform64 role group_vars file serdigital64.system.sys_repository inventories/site/group_vars/doc_sites/sys_repository.yml","title":"End State"},{"location":"playbooks/manage_doc_sites/#deployment","text":"","title":"Deployment"},{"location":"playbooks/manage_doc_sites/#os-compatibility","text":"OS compatibility is role dependant. Please refer to the respective role documentation.","title":"OS Compatibility"},{"location":"playbooks/manage_doc_sites/#dependencies","text":"Dependencies in this section are automatically solved during the installation process. Ansible Collections: serdigital64.backup serdigital64.system serdigital64.","title":"Dependencies"},{"location":"playbooks/manage_doc_sites/#prerequisites","text":"Ansible: Control Node: A:Platform64 installed and configured Managed Nodes: target hosts prepared for A:Platform64 control","title":"Prerequisites"},{"location":"playbooks/manage_doc_sites/#installation-procedure","text":"The playbook is automatically deployed during the A:Platform64 installation process","title":"Installation Procedure"},{"location":"playbooks/manage_doc_sites/#contributing","text":"Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details.","title":"Contributing"},{"location":"playbooks/manage_doc_sites/#author","text":"SerDigital64","title":"Author"},{"location":"playbooks/manage_doc_sites/#license","text":"GPL-3.0-or-later","title":"License"},{"location":"playbooks/manage_file_servers/","text":"Ansible Playbook: manage_file_servers \u00b6 Purpose \u00b6 Manage file servers. Supported features in the current version: Create file repository structure Install NFS server Export NFS shares Use Cases \u00b6 Deploy file server \u00b6 Verify that target nodes are registered in the inventory file: file_service.ini Verify that target tools are selected in the playbook endstate file: manage_file_servers.yml Run the playbook. Use the -s <SITE> parameter to select the target site. /opt/aplatform64/bin/ap64.sh -n -p manage_file_servers -s <SITE> Playbook Parameters \u00b6 Inventory \u00b6 Register the hosts that will consume the service in the Ansible Inventory file: File: inventories/<SITE>/file_service.ini Host Group: file_servers End State \u00b6 A dedicated group_vars directory is used to store end-state configuration settings for both the playbook and related Ansible Roles. Set playbook specific settings in the file: inventories/<SITE>/group_vars/file_servers/manage_file_servers.yml manage_file_servers_apps : repository : nfs : Parameter Required? Type Default Purpose / Value manage_file_servers_apps no dictionary Define what applications will be deployed manage_file_servers_apps.repository no boolean true Deploy the application? manage_file_servers_apps.nfs no boolean true Deploy the application? Additional role specific settings are available to further customize the playbook: A:Platform64 role group_vars file serdigital64.storage.stg_repository inventories/<SITE>/group_vars/file_servers/stg_repository.yml serdigital64.storage.stg_nfs_server inventories/<SITE>/group_vars/file_servers/stg_nfs_server.yml Deployment \u00b6 OS Compatibility \u00b6 OS compatibility is role dependant. Please refer to the respective role documentation. - Ubuntu20 - Ubuntu21 - Fedora33 - Debian10 - Debian11 Dependencies \u00b6 Dependencies in this section are automatically solved during the installation process. Ansible Collections: serdigital64.backup serdigital64.storage serdigital64.system Prerequisites \u00b6 Ansible: Control Node: A:Platform64 installed and configured Managed Nodes: target hosts prepared for A:Platform64 control Installation Procedure \u00b6 The playbook is automatically deployed during the A:Platform64 installation process Contributing \u00b6 Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details. Author \u00b6 SerDigital64 License \u00b6 GPL-3.0-or-later","title":"manage_file_servers"},{"location":"playbooks/manage_file_servers/#ansible-playbook-manage_file_servers","text":"","title":"Ansible Playbook: manage_file_servers"},{"location":"playbooks/manage_file_servers/#purpose","text":"Manage file servers. Supported features in the current version: Create file repository structure Install NFS server Export NFS shares","title":"Purpose"},{"location":"playbooks/manage_file_servers/#use-cases","text":"","title":"Use Cases"},{"location":"playbooks/manage_file_servers/#deploy-file-server","text":"Verify that target nodes are registered in the inventory file: file_service.ini Verify that target tools are selected in the playbook endstate file: manage_file_servers.yml Run the playbook. Use the -s <SITE> parameter to select the target site. /opt/aplatform64/bin/ap64.sh -n -p manage_file_servers -s <SITE>","title":"Deploy file server"},{"location":"playbooks/manage_file_servers/#playbook-parameters","text":"","title":"Playbook Parameters"},{"location":"playbooks/manage_file_servers/#inventory","text":"Register the hosts that will consume the service in the Ansible Inventory file: File: inventories/<SITE>/file_service.ini Host Group: file_servers","title":"Inventory"},{"location":"playbooks/manage_file_servers/#end-state","text":"A dedicated group_vars directory is used to store end-state configuration settings for both the playbook and related Ansible Roles. Set playbook specific settings in the file: inventories/<SITE>/group_vars/file_servers/manage_file_servers.yml manage_file_servers_apps : repository : nfs : Parameter Required? Type Default Purpose / Value manage_file_servers_apps no dictionary Define what applications will be deployed manage_file_servers_apps.repository no boolean true Deploy the application? manage_file_servers_apps.nfs no boolean true Deploy the application? Additional role specific settings are available to further customize the playbook: A:Platform64 role group_vars file serdigital64.storage.stg_repository inventories/<SITE>/group_vars/file_servers/stg_repository.yml serdigital64.storage.stg_nfs_server inventories/<SITE>/group_vars/file_servers/stg_nfs_server.yml","title":"End State"},{"location":"playbooks/manage_file_servers/#deployment","text":"","title":"Deployment"},{"location":"playbooks/manage_file_servers/#os-compatibility","text":"OS compatibility is role dependant. Please refer to the respective role documentation. - Ubuntu20 - Ubuntu21 - Fedora33 - Debian10 - Debian11","title":"OS Compatibility"},{"location":"playbooks/manage_file_servers/#dependencies","text":"Dependencies in this section are automatically solved during the installation process. Ansible Collections: serdigital64.backup serdigital64.storage serdigital64.system","title":"Dependencies"},{"location":"playbooks/manage_file_servers/#prerequisites","text":"Ansible: Control Node: A:Platform64 installed and configured Managed Nodes: target hosts prepared for A:Platform64 control","title":"Prerequisites"},{"location":"playbooks/manage_file_servers/#installation-procedure","text":"The playbook is automatically deployed during the A:Platform64 installation process","title":"Installation Procedure"},{"location":"playbooks/manage_file_servers/#contributing","text":"Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details.","title":"Contributing"},{"location":"playbooks/manage_file_servers/#author","text":"SerDigital64","title":"Author"},{"location":"playbooks/manage_file_servers/#license","text":"GPL-3.0-or-later","title":"License"},{"location":"playbooks/manage_git_servers/","text":"Ansible Playbook: manage_git_servers \u00b6 Purpose \u00b6 Manage GIT servers. Supported features in the current version: Deploy GIT server Provision GIT remote repositories Install GIT client's SSH public keys Use Cases \u00b6 Deploy GIT server node \u00b6 Verify that target nodes are registered in the inventory file: git_service.ini Verify that target endstate is set: manage_git_servers.yml Run the playbook. Use the -s <SITE> parameter to select the target site. /opt/aplatform64/bin/ap64.sh -n -p manage_git_servers -s <SITE> Playbook Parameters \u00b6 Inventory \u00b6 Register the hosts that will consume the service in the Ansible Inventory file: File: inventories/<SITE>/git_service.ini Host Group: git_servers End State \u00b6 A dedicated group_vars directory is used to store end-state configuration settings for both the playbook and related Ansible Roles. Set playbook specific settings in the file: inventories/<SITE>/group_vars/git_servers/manage_git_servers.yml manage_git_servers_apps : git : Parameter Required? Type Default Purpose / Value manage_git_servers_apps no dictionary Define what applications will be deployed manage_git_servers_apps.git no boolean true Deploy the application? Additional role specific settings are available to further customize the playbook: A:Platform64 role group_vars file serdigital64.system.sys_repository inventories/<SITE>/group_vars/git_servers/sys_repository.yml serdigital64.devops.dops_git_server inventories/<SITE>/group_vars/git_servers/dops_git_server.yml Deployment \u00b6 OS Compatibility \u00b6 OS compatibility is role dependant. Please refer to the respective role documentation. Dependencies \u00b6 Dependencies in this section are automatically solved during the installation of A:Platform64. Ansible Collections: serdigital64.backup serdigital64.system serdigital64.devops Prerequisites \u00b6 Ansible: Control Node: A:Platform64 installed and configured. Managed Nodes: target hosts prepared for A:Platform64 control. Installation Procedure \u00b6 The playbook is automatically deployed during the A:Platform64 installation process. Contributing \u00b6 Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details. Author \u00b6 SerDigital64 License \u00b6 GPL-3.0-or-later","title":"manage_git_servers"},{"location":"playbooks/manage_git_servers/#ansible-playbook-manage_git_servers","text":"","title":"Ansible Playbook: manage_git_servers"},{"location":"playbooks/manage_git_servers/#purpose","text":"Manage GIT servers. Supported features in the current version: Deploy GIT server Provision GIT remote repositories Install GIT client's SSH public keys","title":"Purpose"},{"location":"playbooks/manage_git_servers/#use-cases","text":"","title":"Use Cases"},{"location":"playbooks/manage_git_servers/#deploy-git-server-node","text":"Verify that target nodes are registered in the inventory file: git_service.ini Verify that target endstate is set: manage_git_servers.yml Run the playbook. Use the -s <SITE> parameter to select the target site. /opt/aplatform64/bin/ap64.sh -n -p manage_git_servers -s <SITE>","title":"Deploy GIT server node"},{"location":"playbooks/manage_git_servers/#playbook-parameters","text":"","title":"Playbook Parameters"},{"location":"playbooks/manage_git_servers/#inventory","text":"Register the hosts that will consume the service in the Ansible Inventory file: File: inventories/<SITE>/git_service.ini Host Group: git_servers","title":"Inventory"},{"location":"playbooks/manage_git_servers/#end-state","text":"A dedicated group_vars directory is used to store end-state configuration settings for both the playbook and related Ansible Roles. Set playbook specific settings in the file: inventories/<SITE>/group_vars/git_servers/manage_git_servers.yml manage_git_servers_apps : git : Parameter Required? Type Default Purpose / Value manage_git_servers_apps no dictionary Define what applications will be deployed manage_git_servers_apps.git no boolean true Deploy the application? Additional role specific settings are available to further customize the playbook: A:Platform64 role group_vars file serdigital64.system.sys_repository inventories/<SITE>/group_vars/git_servers/sys_repository.yml serdigital64.devops.dops_git_server inventories/<SITE>/group_vars/git_servers/dops_git_server.yml","title":"End State"},{"location":"playbooks/manage_git_servers/#deployment","text":"","title":"Deployment"},{"location":"playbooks/manage_git_servers/#os-compatibility","text":"OS compatibility is role dependant. Please refer to the respective role documentation.","title":"OS Compatibility"},{"location":"playbooks/manage_git_servers/#dependencies","text":"Dependencies in this section are automatically solved during the installation of A:Platform64. Ansible Collections: serdigital64.backup serdigital64.system serdigital64.devops","title":"Dependencies"},{"location":"playbooks/manage_git_servers/#prerequisites","text":"Ansible: Control Node: A:Platform64 installed and configured. Managed Nodes: target hosts prepared for A:Platform64 control.","title":"Prerequisites"},{"location":"playbooks/manage_git_servers/#installation-procedure","text":"The playbook is automatically deployed during the A:Platform64 installation process.","title":"Installation Procedure"},{"location":"playbooks/manage_git_servers/#contributing","text":"Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details.","title":"Contributing"},{"location":"playbooks/manage_git_servers/#author","text":"SerDigital64","title":"Author"},{"location":"playbooks/manage_git_servers/#license","text":"GPL-3.0-or-later","title":"License"},{"location":"playbooks/manage_gitlab_servers/","text":"Ansible Playbook: manage_gitlab_servers \u00b6 Purpose \u00b6 Manage GitLab servers. Supported features in the current version: Configure OS package manager Add GitLab repo Provision OS Firewall Provision GitLab server Use Cases \u00b6 Deploy GIT server node \u00b6 Verify that target nodes are registered in the inventory file: gitlab_service.ini Verify that target endstate is set: manage_gitlab_servers.yml Run the playbook. Use the -s <SITE> parameter to select the target site. /opt/aplatform64/bin/ap64.sh -n -p manage_gitlab_servers -s <SITE> Playbook Parameters \u00b6 Inventory \u00b6 Register the hosts that will consume the service in the Ansible Inventory file: File: inventories/<SITE>/gitlab_service.ini Host Group: gitlab_server_nodes End State \u00b6 A dedicated group_vars directory is used to store end-state configuration settings for both the playbook and related Ansible Roles. Set playbook specific settings in the file: inventories/<SITE>/group_vars/gitlab_server_nodes/manage_gitlab_servers.yml manage_gitlab_servers_apps : gitlab : Parameter Required? Type Default Purpose / Value manage_gitlab_servers_apps no dictionary Define what applications will be deployed manage_gitlab_servers_apps.gitlab no boolean true Deploy the application? Additional role specific settings are available to further customize the playbook: A:Platform64 role group_vars file serdigital64.devops.dops_gitlab_server inventories/<SITE>/group_vars/gitlab_server_nodes/dops_gitlab_server.yml serdigital64.system.sys_repository inventories/<SITE>/group_vars/gitlab_server_nodes/sys_repository.yml Deployment \u00b6 OS Compatibility \u00b6 OS compatibility is role dependant. Please refer to the respective role documentation. Dependencies \u00b6 Dependencies in this section are automatically solved during the installation of A:Platform64. Ansible Collections: serdigital64.backup serdigital64.devops serdigital64.security serdigital64.system Prerequisites \u00b6 Ansible: Control Node: A:Platform64 installed and configured. Managed Nodes: target hosts prepared for A:Platform64 control. Installation Procedure \u00b6 The playbook is automatically deployed during the A:Platform64 installation process. Contributing \u00b6 Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details. Author \u00b6 SerDigital64 License \u00b6 GPL-3.0-or-later","title":"manage_gitlab_servers"},{"location":"playbooks/manage_gitlab_servers/#ansible-playbook-manage_gitlab_servers","text":"","title":"Ansible Playbook: manage_gitlab_servers"},{"location":"playbooks/manage_gitlab_servers/#purpose","text":"Manage GitLab servers. Supported features in the current version: Configure OS package manager Add GitLab repo Provision OS Firewall Provision GitLab server","title":"Purpose"},{"location":"playbooks/manage_gitlab_servers/#use-cases","text":"","title":"Use Cases"},{"location":"playbooks/manage_gitlab_servers/#deploy-git-server-node","text":"Verify that target nodes are registered in the inventory file: gitlab_service.ini Verify that target endstate is set: manage_gitlab_servers.yml Run the playbook. Use the -s <SITE> parameter to select the target site. /opt/aplatform64/bin/ap64.sh -n -p manage_gitlab_servers -s <SITE>","title":"Deploy GIT server node"},{"location":"playbooks/manage_gitlab_servers/#playbook-parameters","text":"","title":"Playbook Parameters"},{"location":"playbooks/manage_gitlab_servers/#inventory","text":"Register the hosts that will consume the service in the Ansible Inventory file: File: inventories/<SITE>/gitlab_service.ini Host Group: gitlab_server_nodes","title":"Inventory"},{"location":"playbooks/manage_gitlab_servers/#end-state","text":"A dedicated group_vars directory is used to store end-state configuration settings for both the playbook and related Ansible Roles. Set playbook specific settings in the file: inventories/<SITE>/group_vars/gitlab_server_nodes/manage_gitlab_servers.yml manage_gitlab_servers_apps : gitlab : Parameter Required? Type Default Purpose / Value manage_gitlab_servers_apps no dictionary Define what applications will be deployed manage_gitlab_servers_apps.gitlab no boolean true Deploy the application? Additional role specific settings are available to further customize the playbook: A:Platform64 role group_vars file serdigital64.devops.dops_gitlab_server inventories/<SITE>/group_vars/gitlab_server_nodes/dops_gitlab_server.yml serdigital64.system.sys_repository inventories/<SITE>/group_vars/gitlab_server_nodes/sys_repository.yml","title":"End State"},{"location":"playbooks/manage_gitlab_servers/#deployment","text":"","title":"Deployment"},{"location":"playbooks/manage_gitlab_servers/#os-compatibility","text":"OS compatibility is role dependant. Please refer to the respective role documentation.","title":"OS Compatibility"},{"location":"playbooks/manage_gitlab_servers/#dependencies","text":"Dependencies in this section are automatically solved during the installation of A:Platform64. Ansible Collections: serdigital64.backup serdigital64.devops serdigital64.security serdigital64.system","title":"Dependencies"},{"location":"playbooks/manage_gitlab_servers/#prerequisites","text":"Ansible: Control Node: A:Platform64 installed and configured. Managed Nodes: target hosts prepared for A:Platform64 control.","title":"Prerequisites"},{"location":"playbooks/manage_gitlab_servers/#installation-procedure","text":"The playbook is automatically deployed during the A:Platform64 installation process.","title":"Installation Procedure"},{"location":"playbooks/manage_gitlab_servers/#contributing","text":"Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details.","title":"Contributing"},{"location":"playbooks/manage_gitlab_servers/#author","text":"SerDigital64","title":"Author"},{"location":"playbooks/manage_gitlab_servers/#license","text":"GPL-3.0-or-later","title":"License"},{"location":"playbooks/manage_hpc_nodes/","text":"Ansible Playbook: manage_hpc_nodes \u00b6 Purpose \u00b6 Provision high-performance computing environments. Supported features in the current version: Deploy OpenCL environment Deploy AMD GPU drivers Use Cases \u00b6 Deploy high-performance computing environment \u00b6 Verify that target nodes are registered in the inventory file: hpc_nodes.ini Verify that target endstate is set: manage_hpc_nodes.yml Run the playbook. Use the -s <SITE> parameter to select the target site. /opt/aplatform64/bin/ap64.sh -n -p manage_hpc_nodes -s <SITE> Playbook Parameters \u00b6 Inventory \u00b6 Register the hosts that will consume the service in the Ansible Inventory file: File: inventories/<SITE>/hpc_nodes.ini Host Group: hpc_nodes End State \u00b6 A dedicated group_vars directory is used to store end-state configuration settings for both the playbook and related Ansible Roles. Set playbook specific settings in the file: inventories/<SITE>/group_vars/hpc_nodes/manage_hpc_nodes.yml manage_hpc_nodes_apps : opencl : gpu_amd : Parameter Required? Type Default Purpose / Value manage_hpc_nodes_apps yes dictionary Define what applications will be deployed manage_hpc_nodes_apps.opencl no boolean false Deploy the application? manage_hpc_nodes_apps.gpu_amd no boolean false Deploy the application? Additional role specific settings are available to further customize the playbook: A:Platform64 role group_vars file serdigital64.system.sys_repository inventories/<SITE>/group_vars/hpc_nodes/sys_repository.yml Deployment \u00b6 OS Compatibility \u00b6 OS compatibility is role dependant. Please refer to the respective role documentation. Dependencies \u00b6 Dependencies in this section are automatically solved during the installation of A:Platform64. Ansible Collections: serdigital64.backup serdigital64.system serdigital64.development serdigital64.hardware Prerequisites \u00b6 Ansible: Control Node: A:Platform64 installed and configured. Managed Nodes: target hosts prepared for A:Platform64 control. Installation Procedure \u00b6 The playbook is automatically deployed during the A:Platform64 installation process. Contributing \u00b6 Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details. Author \u00b6 SerDigital64 License \u00b6 GPL-3.0-or-later","title":"manage_hpc_nodes"},{"location":"playbooks/manage_hpc_nodes/#ansible-playbook-manage_hpc_nodes","text":"","title":"Ansible Playbook: manage_hpc_nodes"},{"location":"playbooks/manage_hpc_nodes/#purpose","text":"Provision high-performance computing environments. Supported features in the current version: Deploy OpenCL environment Deploy AMD GPU drivers","title":"Purpose"},{"location":"playbooks/manage_hpc_nodes/#use-cases","text":"","title":"Use Cases"},{"location":"playbooks/manage_hpc_nodes/#deploy-high-performance-computing-environment","text":"Verify that target nodes are registered in the inventory file: hpc_nodes.ini Verify that target endstate is set: manage_hpc_nodes.yml Run the playbook. Use the -s <SITE> parameter to select the target site. /opt/aplatform64/bin/ap64.sh -n -p manage_hpc_nodes -s <SITE>","title":"Deploy high-performance computing environment"},{"location":"playbooks/manage_hpc_nodes/#playbook-parameters","text":"","title":"Playbook Parameters"},{"location":"playbooks/manage_hpc_nodes/#inventory","text":"Register the hosts that will consume the service in the Ansible Inventory file: File: inventories/<SITE>/hpc_nodes.ini Host Group: hpc_nodes","title":"Inventory"},{"location":"playbooks/manage_hpc_nodes/#end-state","text":"A dedicated group_vars directory is used to store end-state configuration settings for both the playbook and related Ansible Roles. Set playbook specific settings in the file: inventories/<SITE>/group_vars/hpc_nodes/manage_hpc_nodes.yml manage_hpc_nodes_apps : opencl : gpu_amd : Parameter Required? Type Default Purpose / Value manage_hpc_nodes_apps yes dictionary Define what applications will be deployed manage_hpc_nodes_apps.opencl no boolean false Deploy the application? manage_hpc_nodes_apps.gpu_amd no boolean false Deploy the application? Additional role specific settings are available to further customize the playbook: A:Platform64 role group_vars file serdigital64.system.sys_repository inventories/<SITE>/group_vars/hpc_nodes/sys_repository.yml","title":"End State"},{"location":"playbooks/manage_hpc_nodes/#deployment","text":"","title":"Deployment"},{"location":"playbooks/manage_hpc_nodes/#os-compatibility","text":"OS compatibility is role dependant. Please refer to the respective role documentation.","title":"OS Compatibility"},{"location":"playbooks/manage_hpc_nodes/#dependencies","text":"Dependencies in this section are automatically solved during the installation of A:Platform64. Ansible Collections: serdigital64.backup serdigital64.system serdigital64.development serdigital64.hardware","title":"Dependencies"},{"location":"playbooks/manage_hpc_nodes/#prerequisites","text":"Ansible: Control Node: A:Platform64 installed and configured. Managed Nodes: target hosts prepared for A:Platform64 control.","title":"Prerequisites"},{"location":"playbooks/manage_hpc_nodes/#installation-procedure","text":"The playbook is automatically deployed during the A:Platform64 installation process.","title":"Installation Procedure"},{"location":"playbooks/manage_hpc_nodes/#contributing","text":"Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details.","title":"Contributing"},{"location":"playbooks/manage_hpc_nodes/#author","text":"SerDigital64","title":"Author"},{"location":"playbooks/manage_hpc_nodes/#license","text":"GPL-3.0-or-later","title":"License"},{"location":"playbooks/manage_jenkins_controllers/","text":"Ansible Playbook: manage_jenkins_controllers \u00b6 Purpose \u00b6 Manage Jenkins controllers. Supported features in the current version: Deploy prerequisites: OpenJDK 11 Deploy application: Jenkins Control systemd service Configure Jenkins server Use Cases \u00b6 Deploy Jenkins controller node \u00b6 Verify that target nodes are registered in the inventory file: jenkins_service.ini Verify that target endstate is set: manage_jenkins_controllers.yml Run the playbook. Use the -s <SITE> parameter to select the target site. /opt/aplatform64/bin/ap64.sh -n -p manage_jenkins_controllers -s <SITE> Playbook Parameters \u00b6 Inventory \u00b6 Register the hosts that will consume the service in the Ansible Inventory file: File: inventories/<SITE>/jenkins_service.ini Host Group: jenkins_controllers End State \u00b6 A dedicated group_vars directory is used to store end-state configuration settings for both the playbook and related Ansible Roles. Set playbook specific settings in the file: inventories/<SITE>/group_vars/jenkins_controllers/manage_jenkins_controllers.yml manage_jenkins_controllers_apps : jenkins : Parameter Required? Type Default Purpose / Value manage_jenkins_controllers_apps no dictionary Define what applications will be deployed manage_jenkins_controllers_apps.jenkins no boolean true Deploy the application? Additional role specific settings are available to further customize the playbook: A:Platform64 role group_vars file serdigital64.system.sys_repository inventories/<SITE>/group_vars/jenkins_controllers/sys_repository.yml serdigital64.development.dev_java inventories/<SITE>/group_vars/jenkins_controllers/dev_java.yml serdigital64.devops.dops_jenkins inventories/<SITE>/group_vars/jenkins_controllers/dops_jenkins.yml Deployment \u00b6 OS Compatibility \u00b6 OS compatibility is role dependant. Please refer to the respective role documentation. Dependencies \u00b6 Dependencies in this section are automatically solved during the installation of A:Platform64. Ansible Collections: serdigital64.backup serdigital64.system serdigital64.development serdigital64.devops Prerequisites \u00b6 Ansible: Control Node: A:Platform64 installed and configured. Managed Nodes: target hosts prepared for A:Platform64 control. Installation Procedure \u00b6 The playbook is automatically deployed during the A:Platform64 installation process. Contributing \u00b6 Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details. Author \u00b6 SerDigital64 License \u00b6 GPL-3.0-or-later","title":"manage_jenkins_controllers"},{"location":"playbooks/manage_jenkins_controllers/#ansible-playbook-manage_jenkins_controllers","text":"","title":"Ansible Playbook: manage_jenkins_controllers"},{"location":"playbooks/manage_jenkins_controllers/#purpose","text":"Manage Jenkins controllers. Supported features in the current version: Deploy prerequisites: OpenJDK 11 Deploy application: Jenkins Control systemd service Configure Jenkins server","title":"Purpose"},{"location":"playbooks/manage_jenkins_controllers/#use-cases","text":"","title":"Use Cases"},{"location":"playbooks/manage_jenkins_controllers/#deploy-jenkins-controller-node","text":"Verify that target nodes are registered in the inventory file: jenkins_service.ini Verify that target endstate is set: manage_jenkins_controllers.yml Run the playbook. Use the -s <SITE> parameter to select the target site. /opt/aplatform64/bin/ap64.sh -n -p manage_jenkins_controllers -s <SITE>","title":"Deploy Jenkins controller node"},{"location":"playbooks/manage_jenkins_controllers/#playbook-parameters","text":"","title":"Playbook Parameters"},{"location":"playbooks/manage_jenkins_controllers/#inventory","text":"Register the hosts that will consume the service in the Ansible Inventory file: File: inventories/<SITE>/jenkins_service.ini Host Group: jenkins_controllers","title":"Inventory"},{"location":"playbooks/manage_jenkins_controllers/#end-state","text":"A dedicated group_vars directory is used to store end-state configuration settings for both the playbook and related Ansible Roles. Set playbook specific settings in the file: inventories/<SITE>/group_vars/jenkins_controllers/manage_jenkins_controllers.yml manage_jenkins_controllers_apps : jenkins : Parameter Required? Type Default Purpose / Value manage_jenkins_controllers_apps no dictionary Define what applications will be deployed manage_jenkins_controllers_apps.jenkins no boolean true Deploy the application? Additional role specific settings are available to further customize the playbook: A:Platform64 role group_vars file serdigital64.system.sys_repository inventories/<SITE>/group_vars/jenkins_controllers/sys_repository.yml serdigital64.development.dev_java inventories/<SITE>/group_vars/jenkins_controllers/dev_java.yml serdigital64.devops.dops_jenkins inventories/<SITE>/group_vars/jenkins_controllers/dops_jenkins.yml","title":"End State"},{"location":"playbooks/manage_jenkins_controllers/#deployment","text":"","title":"Deployment"},{"location":"playbooks/manage_jenkins_controllers/#os-compatibility","text":"OS compatibility is role dependant. Please refer to the respective role documentation.","title":"OS Compatibility"},{"location":"playbooks/manage_jenkins_controllers/#dependencies","text":"Dependencies in this section are automatically solved during the installation of A:Platform64. Ansible Collections: serdigital64.backup serdigital64.system serdigital64.development serdigital64.devops","title":"Dependencies"},{"location":"playbooks/manage_jenkins_controllers/#prerequisites","text":"Ansible: Control Node: A:Platform64 installed and configured. Managed Nodes: target hosts prepared for A:Platform64 control.","title":"Prerequisites"},{"location":"playbooks/manage_jenkins_controllers/#installation-procedure","text":"The playbook is automatically deployed during the A:Platform64 installation process.","title":"Installation Procedure"},{"location":"playbooks/manage_jenkins_controllers/#contributing","text":"Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details.","title":"Contributing"},{"location":"playbooks/manage_jenkins_controllers/#author","text":"SerDigital64","title":"Author"},{"location":"playbooks/manage_jenkins_controllers/#license","text":"GPL-3.0-or-later","title":"License"},{"location":"playbooks/manage_jenkins_workers/","text":"Ansible Playbook: manage_jenkins_workers \u00b6 Purpose \u00b6 Manage Jenkins workers. Supported features in the current version: Deploy prerequisites: OpenJDK 11 Create dedicated remote access account for SSH agent Use Cases \u00b6 Deploy Jenkins worker node \u00b6 Verify that target nodes are registered in the inventory file: jenkins_service.ini Verify that target endstate is set: manage_jenkins_workers.yml Run the playbook. Use the -s <SITE> parameter to select the target site. /opt/aplatform64/bin/ap64.sh -n -p manage_jenkins_workers -s <SITE> Playbook Parameters \u00b6 Inventory \u00b6 Register the hosts that will consume the service in the Ansible Inventory file: File: inventories/<SITE>/jenkins_service.ini Host Group: jenkins_workers End State \u00b6 A dedicated group_vars directory is used to store end-state configuration settings for both the playbook and related Ansible Roles. Set playbook specific settings in the file: inventories/<SITE>/group_vars/jenkins_workers/manage_jenkins_workers.yml manage_jenkins_workers_apps : jenkins : Parameter Required? Type Default Purpose / Value manage_jenkins_workers_apps no dictionary Define what applications will be deployed manage_jenkins_workers_apps.jenkins no boolean true Deploy the application? Additional role specific settings are available to further customize the playbook: A:Platform64 role group_vars file serdigital64.system.sys_repository inventories/<SITE>/group_vars/jenkins_controllers/sys_repository.yml serdigital64.system.sys_user inventories/<SITE>/group_vars/jenkins_controllers/sys_user.yml serdigital64.development.dev_java inventories/<SITE>/group_vars/jenkins_controllers/dev_java.yml Deployment \u00b6 OS Compatibility \u00b6 OS compatibility is role dependant. Please refer to the respective role documentation. Dependencies \u00b6 Dependencies in this section are automatically solved during the installation of A:Platform64. Ansible Collections: serdigital64.backup serdigital64.system serdigital64.development Prerequisites \u00b6 Ansible: Control Node: A:Platform64 installed and configured. Managed Nodes: target hosts prepared for A:Platform64 control. Installation Procedure \u00b6 The playbook is automatically deployed during the A:Platform64 installation process. Contributing \u00b6 Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details. Author \u00b6 SerDigital64 License \u00b6 GPL-3.0-or-later","title":"manage_jenkins_workers"},{"location":"playbooks/manage_jenkins_workers/#ansible-playbook-manage_jenkins_workers","text":"","title":"Ansible Playbook: manage_jenkins_workers"},{"location":"playbooks/manage_jenkins_workers/#purpose","text":"Manage Jenkins workers. Supported features in the current version: Deploy prerequisites: OpenJDK 11 Create dedicated remote access account for SSH agent","title":"Purpose"},{"location":"playbooks/manage_jenkins_workers/#use-cases","text":"","title":"Use Cases"},{"location":"playbooks/manage_jenkins_workers/#deploy-jenkins-worker-node","text":"Verify that target nodes are registered in the inventory file: jenkins_service.ini Verify that target endstate is set: manage_jenkins_workers.yml Run the playbook. Use the -s <SITE> parameter to select the target site. /opt/aplatform64/bin/ap64.sh -n -p manage_jenkins_workers -s <SITE>","title":"Deploy Jenkins worker node"},{"location":"playbooks/manage_jenkins_workers/#playbook-parameters","text":"","title":"Playbook Parameters"},{"location":"playbooks/manage_jenkins_workers/#inventory","text":"Register the hosts that will consume the service in the Ansible Inventory file: File: inventories/<SITE>/jenkins_service.ini Host Group: jenkins_workers","title":"Inventory"},{"location":"playbooks/manage_jenkins_workers/#end-state","text":"A dedicated group_vars directory is used to store end-state configuration settings for both the playbook and related Ansible Roles. Set playbook specific settings in the file: inventories/<SITE>/group_vars/jenkins_workers/manage_jenkins_workers.yml manage_jenkins_workers_apps : jenkins : Parameter Required? Type Default Purpose / Value manage_jenkins_workers_apps no dictionary Define what applications will be deployed manage_jenkins_workers_apps.jenkins no boolean true Deploy the application? Additional role specific settings are available to further customize the playbook: A:Platform64 role group_vars file serdigital64.system.sys_repository inventories/<SITE>/group_vars/jenkins_controllers/sys_repository.yml serdigital64.system.sys_user inventories/<SITE>/group_vars/jenkins_controllers/sys_user.yml serdigital64.development.dev_java inventories/<SITE>/group_vars/jenkins_controllers/dev_java.yml","title":"End State"},{"location":"playbooks/manage_jenkins_workers/#deployment","text":"","title":"Deployment"},{"location":"playbooks/manage_jenkins_workers/#os-compatibility","text":"OS compatibility is role dependant. Please refer to the respective role documentation.","title":"OS Compatibility"},{"location":"playbooks/manage_jenkins_workers/#dependencies","text":"Dependencies in this section are automatically solved during the installation of A:Platform64. Ansible Collections: serdigital64.backup serdigital64.system serdigital64.development","title":"Dependencies"},{"location":"playbooks/manage_jenkins_workers/#prerequisites","text":"Ansible: Control Node: A:Platform64 installed and configured. Managed Nodes: target hosts prepared for A:Platform64 control.","title":"Prerequisites"},{"location":"playbooks/manage_jenkins_workers/#installation-procedure","text":"The playbook is automatically deployed during the A:Platform64 installation process.","title":"Installation Procedure"},{"location":"playbooks/manage_jenkins_workers/#contributing","text":"Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details.","title":"Contributing"},{"location":"playbooks/manage_jenkins_workers/#author","text":"SerDigital64","title":"Author"},{"location":"playbooks/manage_jenkins_workers/#license","text":"GPL-3.0-or-later","title":"License"},{"location":"playbooks/manage_linux_servers/","text":"Ansible Playbook: manage_linux_servers \u00b6 Purpose \u00b6 Manage Linux Servers. Supported features in the current version: Configure IAM Create users Create groups Create sudoers rules Provision and configure shells Provision and configure AutoFS Install fonts Install and configure TUI-based tools mc Provision container engines docker podman Configure OpenSSH client server Use Cases \u00b6 Provision users to Linux Workstation \u00b6 Verify that target nodes are registered in the inventory file: linux_servers.ini Verify that target endstate is set: manage_linux_servers.yml Run the playbook. Use the -s <SITE> parameter to select the target site. /opt/aplatform64/bin/ap64.sh -n -p manage_linux_servers -s <SITE> Playbook Parameters \u00b6 Inventory \u00b6 Register the hosts that will consume the service in the Ansible Inventory file: File: inventories/<SITE>/linux_servers.ini Host Group: linux_servers End State \u00b6 A dedicated group_vars directory is used to store end-state configuration settings for both the playbook and related Ansible Roles. Set playbook specific settings in the file: inventories/<SITE>/group_vars/linux_servers/manage_linux_servers.yml linux_servers_component : autofs : docker : fonts : mc : openssh_client : openssh_server : podman : shell : sudo : users : Parameter Required? Type Default Purpose / Value linux_servers_component no dictionary Define what applications will be deployed linux_servers_component.autofs no boolean false Enable components? linux_servers_component.docker no boolean false Enable components? linux_servers_component.fonts no boolean true Enable components? linux_servers_component.mc no boolean true Enable components? linux_servers_component.openssh_client no boolean true Enable components? linux_servers_component.openssh_server no boolean true Enable components? linux_servers_component.podman no boolean false Enable components? linux_servers_component.sudo no boolean true Enable components? linux_servers_component.shell no boolean true Enable components? linux_servers_component.users no boolean true Enable components? Additional role specific settings are available to further customize the playbook: A:Platform64 role group_vars file serdigital64.system.sys_mc inventories/<SITE>/group_vars/linux_servers/sys_mc.yml serdigital64.system.sys_repository inventories/<SITE>/group_vars/linux_servers/sys_repository.yml serdigital64.system.sys_sudo inventories/<SITE>/group_vars/linux_servers/sys_sudo.yml serdigital64.system.sys_shell inventories/<SITE>/group_vars/linux_servers/sys_shell.yml serdigital64.system.sys_user inventories/<SITE>/group_vars/linux_servers/sys_user.yml serdigital64.storage.stg_autofs inventories/<SITE>/group_vars/linux_servers/stg_autofs.yml Deployment \u00b6 OS Compatibility \u00b6 OS compatibility is role dependant. Please refer to the respective role documentation. Dependencies \u00b6 Dependencies in this section are automatically solved during the installation process. Ansible Collections: serdigital64.backup serdigital64.container serdigital64.security serdigital64.system serdigital64.storage Prerequisites \u00b6 Ansible: Control Node: A:Platform64 installed and configured Managed Nodes: target hosts prepared for A:Platform64 control Installation Procedure \u00b6 The playbook is automatically deployed during the A:Platform64 installation process Contributing \u00b6 Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details. Author \u00b6 SerDigital64 License \u00b6 GPL-3.0-or-later","title":"manage_linux_servers"},{"location":"playbooks/manage_linux_servers/#ansible-playbook-manage_linux_servers","text":"","title":"Ansible Playbook: manage_linux_servers"},{"location":"playbooks/manage_linux_servers/#purpose","text":"Manage Linux Servers. Supported features in the current version: Configure IAM Create users Create groups Create sudoers rules Provision and configure shells Provision and configure AutoFS Install fonts Install and configure TUI-based tools mc Provision container engines docker podman Configure OpenSSH client server","title":"Purpose"},{"location":"playbooks/manage_linux_servers/#use-cases","text":"","title":"Use Cases"},{"location":"playbooks/manage_linux_servers/#provision-users-to-linux-workstation","text":"Verify that target nodes are registered in the inventory file: linux_servers.ini Verify that target endstate is set: manage_linux_servers.yml Run the playbook. Use the -s <SITE> parameter to select the target site. /opt/aplatform64/bin/ap64.sh -n -p manage_linux_servers -s <SITE>","title":"Provision users to Linux Workstation"},{"location":"playbooks/manage_linux_servers/#playbook-parameters","text":"","title":"Playbook Parameters"},{"location":"playbooks/manage_linux_servers/#inventory","text":"Register the hosts that will consume the service in the Ansible Inventory file: File: inventories/<SITE>/linux_servers.ini Host Group: linux_servers","title":"Inventory"},{"location":"playbooks/manage_linux_servers/#end-state","text":"A dedicated group_vars directory is used to store end-state configuration settings for both the playbook and related Ansible Roles. Set playbook specific settings in the file: inventories/<SITE>/group_vars/linux_servers/manage_linux_servers.yml linux_servers_component : autofs : docker : fonts : mc : openssh_client : openssh_server : podman : shell : sudo : users : Parameter Required? Type Default Purpose / Value linux_servers_component no dictionary Define what applications will be deployed linux_servers_component.autofs no boolean false Enable components? linux_servers_component.docker no boolean false Enable components? linux_servers_component.fonts no boolean true Enable components? linux_servers_component.mc no boolean true Enable components? linux_servers_component.openssh_client no boolean true Enable components? linux_servers_component.openssh_server no boolean true Enable components? linux_servers_component.podman no boolean false Enable components? linux_servers_component.sudo no boolean true Enable components? linux_servers_component.shell no boolean true Enable components? linux_servers_component.users no boolean true Enable components? Additional role specific settings are available to further customize the playbook: A:Platform64 role group_vars file serdigital64.system.sys_mc inventories/<SITE>/group_vars/linux_servers/sys_mc.yml serdigital64.system.sys_repository inventories/<SITE>/group_vars/linux_servers/sys_repository.yml serdigital64.system.sys_sudo inventories/<SITE>/group_vars/linux_servers/sys_sudo.yml serdigital64.system.sys_shell inventories/<SITE>/group_vars/linux_servers/sys_shell.yml serdigital64.system.sys_user inventories/<SITE>/group_vars/linux_servers/sys_user.yml serdigital64.storage.stg_autofs inventories/<SITE>/group_vars/linux_servers/stg_autofs.yml","title":"End State"},{"location":"playbooks/manage_linux_servers/#deployment","text":"","title":"Deployment"},{"location":"playbooks/manage_linux_servers/#os-compatibility","text":"OS compatibility is role dependant. Please refer to the respective role documentation.","title":"OS Compatibility"},{"location":"playbooks/manage_linux_servers/#dependencies","text":"Dependencies in this section are automatically solved during the installation process. Ansible Collections: serdigital64.backup serdigital64.container serdigital64.security serdigital64.system serdigital64.storage","title":"Dependencies"},{"location":"playbooks/manage_linux_servers/#prerequisites","text":"Ansible: Control Node: A:Platform64 installed and configured Managed Nodes: target hosts prepared for A:Platform64 control","title":"Prerequisites"},{"location":"playbooks/manage_linux_servers/#installation-procedure","text":"The playbook is automatically deployed during the A:Platform64 installation process","title":"Installation Procedure"},{"location":"playbooks/manage_linux_servers/#contributing","text":"Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details.","title":"Contributing"},{"location":"playbooks/manage_linux_servers/#author","text":"SerDigital64","title":"Author"},{"location":"playbooks/manage_linux_servers/#license","text":"GPL-3.0-or-later","title":"License"},{"location":"playbooks/manage_linux_workstations/","text":"Ansible Playbook: manage_linux_workstations \u00b6 Purpose \u00b6 Manage Linux Workstations. Supported features in the current version: Configure IAM Create users Create groups Create sudoers rules Provision and configure shells Provision and configure AutoFS Install fonts Install native Desktop Managers and tools DConf Cinnamon Install and configure GUI-based tools Tilix Install and configure TUI-based tools mc Provision container engines docker podman Configure OpenSSH client server Use Cases \u00b6 Provision users to Linux Workstation \u00b6 Verify that target nodes are registered in the inventory file: linux_workstations.ini Verify that target endstate is set: manage_linux_workstations.yml Run the playbook. Use the -s <SITE> parameter to select the target site. /opt/aplatform64/bin/ap64.sh -n -p manage_linux_workstations -s <SITE> Playbook Parameters \u00b6 Inventory \u00b6 Register the hosts that will consume the service in the Ansible Inventory file: File: inventories/<SITE>/linux_workstations.ini Host Group: linux_workstations End State \u00b6 A dedicated group_vars directory is used to store end-state configuration settings for both the playbook and related Ansible Roles. Set playbook specific settings in the file: inventories/<SITE>/group_vars/linux_workstations/manage_linux_workstations.yml linux_workstations_component : autofs : cinnamon : dconf : docker : fonts : mc : openssh_client : openssh_server : podman : shell : sudo : tilix : users : Parameter Required? Type Default Purpose / Value linux_workstations_component no dictionary Define what applications will be deployed linux_workstations_component.autofs no boolean false Enable components? linux_workstations_component.cinnamon no boolean false Enable components? linux_workstations_component.dconf no boolean false Enable components? linux_workstations_component.docker no boolean false Enable components? linux_workstations_component.fonts no boolean true Enable components? linux_workstations_component.mc no boolean true Enable components? linux_workstations_component.openssh_client no boolean true Enable components? linux_workstations_component.openssh_server no boolean true Enable components? linux_workstations_component.podman no boolean false Enable components? linux_workstations_component.sudo no boolean true Enable components? linux_workstations_component.shell no boolean true Enable components? linux_workstations_component.tilix no boolean false Enable components? linux_workstations_component.users no boolean true Enable components? Additional role specific settings are available to further customize the playbook: A:Platform64 role group_vars file serdigital64.system.sys_mc inventories/<SITE>/group_vars/linux_workstations/sys_mc.yml serdigital64.system.sys_repository inventories/<SITE>/group_vars/linux_workstations/sys_repository.yml serdigital64.system.sys_sudo inventories/<SITE>/group_vars/linux_workstations/sys_sudo.yml serdigital64.system.sys_shell inventories/<SITE>/group_vars/linux_workstations/sys_shell.yml serdigital64.system.sys_user inventories/<SITE>/group_vars/linux_workstations/sys_user.yml serdigital64.storage.stg_autofs inventories/<SITE>/group_vars/linux_workstations/stg_autofs.yml Deployment \u00b6 OS Compatibility \u00b6 OS compatibility is role dependant. Please refer to the respective role documentation. Dependencies \u00b6 Dependencies in this section are automatically solved during the installation process. Ansible Collections: serdigital64.application serdigital64.backup serdigital64.container serdigital64.security serdigital64.system serdigital64.storage Prerequisites \u00b6 Ansible: Control Node: A:Platform64 installed and configured Managed Nodes: target hosts prepared for A:Platform64 control Installation Procedure \u00b6 The playbook is automatically deployed during the A:Platform64 installation process Contributing \u00b6 Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details. Author \u00b6 SerDigital64 License \u00b6 GPL-3.0-or-later","title":"manage_linux_workstations"},{"location":"playbooks/manage_linux_workstations/#ansible-playbook-manage_linux_workstations","text":"","title":"Ansible Playbook: manage_linux_workstations"},{"location":"playbooks/manage_linux_workstations/#purpose","text":"Manage Linux Workstations. Supported features in the current version: Configure IAM Create users Create groups Create sudoers rules Provision and configure shells Provision and configure AutoFS Install fonts Install native Desktop Managers and tools DConf Cinnamon Install and configure GUI-based tools Tilix Install and configure TUI-based tools mc Provision container engines docker podman Configure OpenSSH client server","title":"Purpose"},{"location":"playbooks/manage_linux_workstations/#use-cases","text":"","title":"Use Cases"},{"location":"playbooks/manage_linux_workstations/#provision-users-to-linux-workstation","text":"Verify that target nodes are registered in the inventory file: linux_workstations.ini Verify that target endstate is set: manage_linux_workstations.yml Run the playbook. Use the -s <SITE> parameter to select the target site. /opt/aplatform64/bin/ap64.sh -n -p manage_linux_workstations -s <SITE>","title":"Provision users to Linux Workstation"},{"location":"playbooks/manage_linux_workstations/#playbook-parameters","text":"","title":"Playbook Parameters"},{"location":"playbooks/manage_linux_workstations/#inventory","text":"Register the hosts that will consume the service in the Ansible Inventory file: File: inventories/<SITE>/linux_workstations.ini Host Group: linux_workstations","title":"Inventory"},{"location":"playbooks/manage_linux_workstations/#end-state","text":"A dedicated group_vars directory is used to store end-state configuration settings for both the playbook and related Ansible Roles. Set playbook specific settings in the file: inventories/<SITE>/group_vars/linux_workstations/manage_linux_workstations.yml linux_workstations_component : autofs : cinnamon : dconf : docker : fonts : mc : openssh_client : openssh_server : podman : shell : sudo : tilix : users : Parameter Required? Type Default Purpose / Value linux_workstations_component no dictionary Define what applications will be deployed linux_workstations_component.autofs no boolean false Enable components? linux_workstations_component.cinnamon no boolean false Enable components? linux_workstations_component.dconf no boolean false Enable components? linux_workstations_component.docker no boolean false Enable components? linux_workstations_component.fonts no boolean true Enable components? linux_workstations_component.mc no boolean true Enable components? linux_workstations_component.openssh_client no boolean true Enable components? linux_workstations_component.openssh_server no boolean true Enable components? linux_workstations_component.podman no boolean false Enable components? linux_workstations_component.sudo no boolean true Enable components? linux_workstations_component.shell no boolean true Enable components? linux_workstations_component.tilix no boolean false Enable components? linux_workstations_component.users no boolean true Enable components? Additional role specific settings are available to further customize the playbook: A:Platform64 role group_vars file serdigital64.system.sys_mc inventories/<SITE>/group_vars/linux_workstations/sys_mc.yml serdigital64.system.sys_repository inventories/<SITE>/group_vars/linux_workstations/sys_repository.yml serdigital64.system.sys_sudo inventories/<SITE>/group_vars/linux_workstations/sys_sudo.yml serdigital64.system.sys_shell inventories/<SITE>/group_vars/linux_workstations/sys_shell.yml serdigital64.system.sys_user inventories/<SITE>/group_vars/linux_workstations/sys_user.yml serdigital64.storage.stg_autofs inventories/<SITE>/group_vars/linux_workstations/stg_autofs.yml","title":"End State"},{"location":"playbooks/manage_linux_workstations/#deployment","text":"","title":"Deployment"},{"location":"playbooks/manage_linux_workstations/#os-compatibility","text":"OS compatibility is role dependant. Please refer to the respective role documentation.","title":"OS Compatibility"},{"location":"playbooks/manage_linux_workstations/#dependencies","text":"Dependencies in this section are automatically solved during the installation process. Ansible Collections: serdigital64.application serdigital64.backup serdigital64.container serdigital64.security serdigital64.system serdigital64.storage","title":"Dependencies"},{"location":"playbooks/manage_linux_workstations/#prerequisites","text":"Ansible: Control Node: A:Platform64 installed and configured Managed Nodes: target hosts prepared for A:Platform64 control","title":"Prerequisites"},{"location":"playbooks/manage_linux_workstations/#installation-procedure","text":"The playbook is automatically deployed during the A:Platform64 installation process","title":"Installation Procedure"},{"location":"playbooks/manage_linux_workstations/#contributing","text":"Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details.","title":"Contributing"},{"location":"playbooks/manage_linux_workstations/#author","text":"SerDigital64","title":"Author"},{"location":"playbooks/manage_linux_workstations/#license","text":"GPL-3.0-or-later","title":"License"},{"location":"playbooks/manage_office_nodes/","text":"Ansible Playbook: manage_office_nodes \u00b6 Purpose \u00b6 Provision office productivity applications. Supported features in the current version: Configure operating system for using the FlatHub package repository Install office productivity applications: Google Chrome Darktable DrawIO GIMP InkScape KeePassXC Kryta LibreOffice MS Teams OBS ShotCut Skype Spotify Zoom Deploy user configuration for: KeePassXC Use Cases \u00b6 Deploy office productivity applications \u00b6 Verify that target nodes are registered in the inventory file: office_nodes.ini Verify that target apps are selected in the playbook endstate file: manage_office_nodes.yml Run the playbook. Use the -s <SITE> parameter to select the target site. /opt/aplatform64/bin/ap64.sh -n -p manage_office_nodes -s <SITE> Playbook Parameters \u00b6 Inventory \u00b6 Register the hosts that will consume the service in the Ansible Inventory file: File: inventories/<SITE>/office_nodes.ini Host Group: office_nodes End State \u00b6 A dedicated group_vars directory is used to store end-state configuration settings for both the playbook and related Ansible Roles. Set playbook specific settings in the file: inventories/<SITE>/group_vars/office_nodes/manage_office_nodes.yml office_nodes_apps : chrome : darktable : drawio : gimp : inkscape : keepassxc : kryta : libreoffice : msteams : obs : shotcut : skype : spotify : zoom : Parameter Required? Type Default Purpose / Value office_nodes_apps yes dictionary Define what applications will be deployed office_nodes_apps.chrome no boolean false Deploy the application? office_nodes_apps.darktable no boolean false Deploy the application? office_nodes_apps.drawio no boolean false Deploy the application? office_nodes_apps.gimp no boolean false Deploy the application? office_nodes_apps.inkscape no boolean false Deploy the application? office_nodes_apps.keepassxc no boolean false Deploy the application? office_nodes_apps.kryta no boolean false Deploy the application? office_nodes_apps.libreoffice no boolean false Deploy the application? office_nodes_apps.msteams no boolean false Deploy the application? office_nodes_apps.obs no boolean false Deploy the application? office_nodes_apps.shotcut no boolean false Deploy the application? office_nodes_apps.skype no boolean false Deploy the application? office_nodes_apps.spotify no boolean false Deploy the application? office_nodes_apps.zoom no boolean false Deploy the application? Additional role specific settings are available to further customize the playbook: A:Platform64 role group_vars file serdigital64.application.app_keepassxc inventories/<SITE>/group_vars/office_nodes/app_keepassxc.yml serdigital64.system.sys_repository inventories/<SITE>/group_vars/office_nodes/sys_repository.yml Deployment \u00b6 OS Compatibility \u00b6 OS compatibility is role dependant. Please refer to the respective role documentation. Dependencies \u00b6 Dependencies in this section are automatically solved during the installation of A:Platform64. Ansible Collections: serdigital64.backup serdigital64.system serdigital64.application Prerequisites \u00b6 Ansible: Control Node: A:Platform64 installed and configured. Managed Nodes: target hosts prepared for A:Platform64 control. Installation Procedure \u00b6 The playbook is automatically deployed during the A:Platform64 installation process. Contributing \u00b6 Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details. Author \u00b6 SerDigital64 License \u00b6 GPL-3.0-or-later","title":"manage_office_nodes"},{"location":"playbooks/manage_office_nodes/#ansible-playbook-manage_office_nodes","text":"","title":"Ansible Playbook: manage_office_nodes"},{"location":"playbooks/manage_office_nodes/#purpose","text":"Provision office productivity applications. Supported features in the current version: Configure operating system for using the FlatHub package repository Install office productivity applications: Google Chrome Darktable DrawIO GIMP InkScape KeePassXC Kryta LibreOffice MS Teams OBS ShotCut Skype Spotify Zoom Deploy user configuration for: KeePassXC","title":"Purpose"},{"location":"playbooks/manage_office_nodes/#use-cases","text":"","title":"Use Cases"},{"location":"playbooks/manage_office_nodes/#deploy-office-productivity-applications","text":"Verify that target nodes are registered in the inventory file: office_nodes.ini Verify that target apps are selected in the playbook endstate file: manage_office_nodes.yml Run the playbook. Use the -s <SITE> parameter to select the target site. /opt/aplatform64/bin/ap64.sh -n -p manage_office_nodes -s <SITE>","title":"Deploy office productivity applications"},{"location":"playbooks/manage_office_nodes/#playbook-parameters","text":"","title":"Playbook Parameters"},{"location":"playbooks/manage_office_nodes/#inventory","text":"Register the hosts that will consume the service in the Ansible Inventory file: File: inventories/<SITE>/office_nodes.ini Host Group: office_nodes","title":"Inventory"},{"location":"playbooks/manage_office_nodes/#end-state","text":"A dedicated group_vars directory is used to store end-state configuration settings for both the playbook and related Ansible Roles. Set playbook specific settings in the file: inventories/<SITE>/group_vars/office_nodes/manage_office_nodes.yml office_nodes_apps : chrome : darktable : drawio : gimp : inkscape : keepassxc : kryta : libreoffice : msteams : obs : shotcut : skype : spotify : zoom : Parameter Required? Type Default Purpose / Value office_nodes_apps yes dictionary Define what applications will be deployed office_nodes_apps.chrome no boolean false Deploy the application? office_nodes_apps.darktable no boolean false Deploy the application? office_nodes_apps.drawio no boolean false Deploy the application? office_nodes_apps.gimp no boolean false Deploy the application? office_nodes_apps.inkscape no boolean false Deploy the application? office_nodes_apps.keepassxc no boolean false Deploy the application? office_nodes_apps.kryta no boolean false Deploy the application? office_nodes_apps.libreoffice no boolean false Deploy the application? office_nodes_apps.msteams no boolean false Deploy the application? office_nodes_apps.obs no boolean false Deploy the application? office_nodes_apps.shotcut no boolean false Deploy the application? office_nodes_apps.skype no boolean false Deploy the application? office_nodes_apps.spotify no boolean false Deploy the application? office_nodes_apps.zoom no boolean false Deploy the application? Additional role specific settings are available to further customize the playbook: A:Platform64 role group_vars file serdigital64.application.app_keepassxc inventories/<SITE>/group_vars/office_nodes/app_keepassxc.yml serdigital64.system.sys_repository inventories/<SITE>/group_vars/office_nodes/sys_repository.yml","title":"End State"},{"location":"playbooks/manage_office_nodes/#deployment","text":"","title":"Deployment"},{"location":"playbooks/manage_office_nodes/#os-compatibility","text":"OS compatibility is role dependant. Please refer to the respective role documentation.","title":"OS Compatibility"},{"location":"playbooks/manage_office_nodes/#dependencies","text":"Dependencies in this section are automatically solved during the installation of A:Platform64. Ansible Collections: serdigital64.backup serdigital64.system serdigital64.application","title":"Dependencies"},{"location":"playbooks/manage_office_nodes/#prerequisites","text":"Ansible: Control Node: A:Platform64 installed and configured. Managed Nodes: target hosts prepared for A:Platform64 control.","title":"Prerequisites"},{"location":"playbooks/manage_office_nodes/#installation-procedure","text":"The playbook is automatically deployed during the A:Platform64 installation process.","title":"Installation Procedure"},{"location":"playbooks/manage_office_nodes/#contributing","text":"Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details.","title":"Contributing"},{"location":"playbooks/manage_office_nodes/#author","text":"SerDigital64","title":"Author"},{"location":"playbooks/manage_office_nodes/#license","text":"GPL-3.0-or-later","title":"License"},{"location":"playbooks/manage_test_nodes/","text":"Ansible Playbook: manage_test_nodes \u00b6 Purpose \u00b6 Provision software testing tools. Supported features in the current version: Deploy testing tools: Bats Core Molecule Deploy code linting tools: YAMLLint AnsibleLint ShellCheck Use Cases \u00b6 Deploy unit testing tools \u00b6 Verify that target nodes are registered in the inventory file: test_nodes.ini Verify that target tools are selected in the playbook endstate file: manage_test_nodes.yml Run the playbook. Use the -s <SITE> parameter to select the target site. /opt/aplatform64/bin/ap64.sh -n -p manage_test_nodes -s <SITE> Playbook Parameters \u00b6 Inventory \u00b6 Register the hosts that will consume the service in the Ansible Inventory file: File: inventories/<SITE>/test_nodes.ini Host Group: test_nodes End State \u00b6 A dedicated group_vars directory is used to store end-state configuration settings for both the playbook and related Ansible Roles. Set playbook specific settings in the file: inventories/<SITE>/group_vars/test_nodes/manage_test_nodes.yml manage_test_nodes_apps : ansiblelint : batscore : molecule : shellcheck : yamllint : Parameter Required? Type Default Purpose / Value manage_test_nodes_apps no dictionary Define what applications will be deployed manage_test_nodes_apps.ansiblelint no boolean false Deploy the application? manage_test_nodes_apps.batscore no boolean true Deploy the application? manage_test_nodes_apps.molecule no boolean false Deploy the application? manage_test_nodes_apps.shellcheck no boolean true Deploy the application? manage_test_nodes_apps.yamllint no boolean true Deploy the application? Additional role specific settings are available to further customize the playbook: A:Platform64 role group_vars file serdigital64.system.sys_repository inventories/<SITE>/group_vars/test_nodes/sys_repository.yml Deployment \u00b6 OS Compatibility \u00b6 OS compatibility is role dependant. Please refer to the respective role documentation. Dependencies \u00b6 Dependencies in this section are automatically solved during the installation process. Ansible Collections: serdigital64.backup serdigital64.system serdigital64.devops Prerequisites \u00b6 Ansible: Control Node: A:Platform64 installed and configured Managed Nodes: target hosts prepared for A:Platform64 control Installation Procedure \u00b6 The playbook is automatically deployed during the A:Platform64 installation process Contributing \u00b6 Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details. Author \u00b6 SerDigital64 License \u00b6 GPL-3.0-or-later","title":"manage_test_nodes"},{"location":"playbooks/manage_test_nodes/#ansible-playbook-manage_test_nodes","text":"","title":"Ansible Playbook: manage_test_nodes"},{"location":"playbooks/manage_test_nodes/#purpose","text":"Provision software testing tools. Supported features in the current version: Deploy testing tools: Bats Core Molecule Deploy code linting tools: YAMLLint AnsibleLint ShellCheck","title":"Purpose"},{"location":"playbooks/manage_test_nodes/#use-cases","text":"","title":"Use Cases"},{"location":"playbooks/manage_test_nodes/#deploy-unit-testing-tools","text":"Verify that target nodes are registered in the inventory file: test_nodes.ini Verify that target tools are selected in the playbook endstate file: manage_test_nodes.yml Run the playbook. Use the -s <SITE> parameter to select the target site. /opt/aplatform64/bin/ap64.sh -n -p manage_test_nodes -s <SITE>","title":"Deploy unit testing tools"},{"location":"playbooks/manage_test_nodes/#playbook-parameters","text":"","title":"Playbook Parameters"},{"location":"playbooks/manage_test_nodes/#inventory","text":"Register the hosts that will consume the service in the Ansible Inventory file: File: inventories/<SITE>/test_nodes.ini Host Group: test_nodes","title":"Inventory"},{"location":"playbooks/manage_test_nodes/#end-state","text":"A dedicated group_vars directory is used to store end-state configuration settings for both the playbook and related Ansible Roles. Set playbook specific settings in the file: inventories/<SITE>/group_vars/test_nodes/manage_test_nodes.yml manage_test_nodes_apps : ansiblelint : batscore : molecule : shellcheck : yamllint : Parameter Required? Type Default Purpose / Value manage_test_nodes_apps no dictionary Define what applications will be deployed manage_test_nodes_apps.ansiblelint no boolean false Deploy the application? manage_test_nodes_apps.batscore no boolean true Deploy the application? manage_test_nodes_apps.molecule no boolean false Deploy the application? manage_test_nodes_apps.shellcheck no boolean true Deploy the application? manage_test_nodes_apps.yamllint no boolean true Deploy the application? Additional role specific settings are available to further customize the playbook: A:Platform64 role group_vars file serdigital64.system.sys_repository inventories/<SITE>/group_vars/test_nodes/sys_repository.yml","title":"End State"},{"location":"playbooks/manage_test_nodes/#deployment","text":"","title":"Deployment"},{"location":"playbooks/manage_test_nodes/#os-compatibility","text":"OS compatibility is role dependant. Please refer to the respective role documentation.","title":"OS Compatibility"},{"location":"playbooks/manage_test_nodes/#dependencies","text":"Dependencies in this section are automatically solved during the installation process. Ansible Collections: serdigital64.backup serdigital64.system serdigital64.devops","title":"Dependencies"},{"location":"playbooks/manage_test_nodes/#prerequisites","text":"Ansible: Control Node: A:Platform64 installed and configured Managed Nodes: target hosts prepared for A:Platform64 control","title":"Prerequisites"},{"location":"playbooks/manage_test_nodes/#installation-procedure","text":"The playbook is automatically deployed during the A:Platform64 installation process","title":"Installation Procedure"},{"location":"playbooks/manage_test_nodes/#contributing","text":"Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details.","title":"Contributing"},{"location":"playbooks/manage_test_nodes/#author","text":"SerDigital64","title":"Author"},{"location":"playbooks/manage_test_nodes/#license","text":"GPL-3.0-or-later","title":"License"},{"location":"roles/app_blender/","text":"Ansible Role: serdigital64.application.app_blender \u00b6 Purpose \u00b6 Manage provisioning of the Blender application. Supported features in the current version: Deploy application. Packages are defined in the variable app_blender_profiles . The app_blender Ansible-Role is part of the A:Platform64 project and is available in the application Ansible-Collection. Usage \u00b6 The following example is an Ansible Playbook that includes all the supported features: use this link if viewing the doc on github --- - name : \"Application / Blender / Usage example\" hosts : \"localhost\" gather_facts : true tasks : - name : \"Example: Install Blender\" vars : app_blender : resolve_prereq : true deploy : true ansible.builtin.include_role : name : \"serdigital64.application.app_blender\" ... The playbook can be run by executing: # Set ANSIBLE_COLLECTIONS_PATHS to the default location. Change as needed. ANSIBLE_COLLECTIONS_PATHS = \" ${ HOME } /.ansible/collections\" ansible-playbook \" ${ ANSIBLE_COLLECTIONS_PATHS } /ansible_collections/serdigital64/application/playbooks/app_blender.yml\" Role Parameters \u00b6 Actions \u00b6 Use action-parameters to control what tasks are enabled for the role to execute. Parameters should be declared as task level vars as they are intented to be dynamic. app_blender : resolve_prereq : deploy : Parameter Required? Type Default Purpose / Value app_blender.resolve_prereq no boolean false Enable automatic resolution of prequisites app_blender.deploy no boolean false Enable installation of application packages End State \u00b6 Use end-state parameters to define the target state after role execution. Parameters should be declared in host_vars or group_vars as they are intended to be permanent. app_blender_application : name : type : version : installed : Parameter Required? Type Default Purpose / Value app_blender_application yes(deploy) dictionary Set application package end state app_blender_application.name yes string \"blender\" Select application package name app_blender_application.type yes string \"flatpak\" Select application package type app_blender_application.version yes string \"latest\" Select application package version app_blender_application.installed yes boolean true Set application package end state Deployment \u00b6 OS Compatibility \u00b6 CentOS8 RedHat8 AlmaLinux8 OracleLinux8 Ubuntu20 Ubuntu21 Fedora33 Fedora35 Debian10 Debian11 Dependencies \u00b6 Ansible Collections: serdigital64.backup bkp_archive serdigital64.system sys_package sys_repository Prerequisites \u00b6 The Ansible engine must be already installed and configured for privileged access and remote execution. In addition the following prerequisites can be automatically solved when running the playbook by setting the role action: resolve_prereq: true Package manager for the target application is installed and enabled. Installation Procedure \u00b6 Manually install Ansible Collections from the Ansible Galaxy repository: ansible-galaxy collection install serdigital64.application Automatic installation is also available by deploying A:Platform64 Contributing \u00b6 Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details. Author \u00b6 SerDigital64 License \u00b6 GPL-3.0-or-later","title":"app_blender"},{"location":"roles/app_blender/#ansible-role-serdigital64applicationapp_blender","text":"","title":"Ansible Role: serdigital64.application.app_blender"},{"location":"roles/app_blender/#purpose","text":"Manage provisioning of the Blender application. Supported features in the current version: Deploy application. Packages are defined in the variable app_blender_profiles . The app_blender Ansible-Role is part of the A:Platform64 project and is available in the application Ansible-Collection.","title":"Purpose"},{"location":"roles/app_blender/#usage","text":"The following example is an Ansible Playbook that includes all the supported features: use this link if viewing the doc on github --- - name : \"Application / Blender / Usage example\" hosts : \"localhost\" gather_facts : true tasks : - name : \"Example: Install Blender\" vars : app_blender : resolve_prereq : true deploy : true ansible.builtin.include_role : name : \"serdigital64.application.app_blender\" ... The playbook can be run by executing: # Set ANSIBLE_COLLECTIONS_PATHS to the default location. Change as needed. ANSIBLE_COLLECTIONS_PATHS = \" ${ HOME } /.ansible/collections\" ansible-playbook \" ${ ANSIBLE_COLLECTIONS_PATHS } /ansible_collections/serdigital64/application/playbooks/app_blender.yml\"","title":"Usage"},{"location":"roles/app_blender/#role-parameters","text":"","title":"Role Parameters"},{"location":"roles/app_blender/#actions","text":"Use action-parameters to control what tasks are enabled for the role to execute. Parameters should be declared as task level vars as they are intented to be dynamic. app_blender : resolve_prereq : deploy : Parameter Required? Type Default Purpose / Value app_blender.resolve_prereq no boolean false Enable automatic resolution of prequisites app_blender.deploy no boolean false Enable installation of application packages","title":"Actions"},{"location":"roles/app_blender/#end-state","text":"Use end-state parameters to define the target state after role execution. Parameters should be declared in host_vars or group_vars as they are intended to be permanent. app_blender_application : name : type : version : installed : Parameter Required? Type Default Purpose / Value app_blender_application yes(deploy) dictionary Set application package end state app_blender_application.name yes string \"blender\" Select application package name app_blender_application.type yes string \"flatpak\" Select application package type app_blender_application.version yes string \"latest\" Select application package version app_blender_application.installed yes boolean true Set application package end state","title":"End State"},{"location":"roles/app_blender/#deployment","text":"","title":"Deployment"},{"location":"roles/app_blender/#os-compatibility","text":"CentOS8 RedHat8 AlmaLinux8 OracleLinux8 Ubuntu20 Ubuntu21 Fedora33 Fedora35 Debian10 Debian11","title":"OS Compatibility"},{"location":"roles/app_blender/#dependencies","text":"Ansible Collections: serdigital64.backup bkp_archive serdigital64.system sys_package sys_repository","title":"Dependencies"},{"location":"roles/app_blender/#prerequisites","text":"The Ansible engine must be already installed and configured for privileged access and remote execution. In addition the following prerequisites can be automatically solved when running the playbook by setting the role action: resolve_prereq: true Package manager for the target application is installed and enabled.","title":"Prerequisites"},{"location":"roles/app_blender/#installation-procedure","text":"Manually install Ansible Collections from the Ansible Galaxy repository: ansible-galaxy collection install serdigital64.application Automatic installation is also available by deploying A:Platform64","title":"Installation Procedure"},{"location":"roles/app_blender/#contributing","text":"Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details.","title":"Contributing"},{"location":"roles/app_blender/#author","text":"SerDigital64","title":"Author"},{"location":"roles/app_blender/#license","text":"GPL-3.0-or-later","title":"License"},{"location":"roles/app_chrome/","text":"Ansible Role: serdigital64.application.app_chrome \u00b6 Purpose \u00b6 Manage provisioning of the Google Chrome application Supported features in the current version: Deploy application. Packages are defined in the variable app_chrome_profiles . The app_chrome Ansible-Role is part of the A:Platform64 project and is available in the application Ansible-Collection. Usage \u00b6 The following example is an Ansible Playbook that includes all the supported features: use this link if viewing the doc on github use this link if viewing the doc on github --- - name : \"Application / Google Chrome / Usage example\" hosts : \"localhost\" gather_facts : true tasks : - name : \"Example: Install Google Chrome\" vars : app_chrome : resolve_prereq : true deploy : true ansible.builtin.include_role : name : \"serdigital64.application.app_chrome\" ... The playbook can be run by executing: # Set ANSIBLE_COLLECTIONS_PATHS to the default location. Change as needed. ANSIBLE_COLLECTIONS_PATHS = \" ${ HOME } /.ansible/collections\" ansible-playbook \" ${ ANSIBLE_COLLECTIONS_PATHS } /ansible_collections/serdigital64/application/playbooks/app_chrome.yml\" Role Parameters \u00b6 Actions \u00b6 Use action-parameters to control what tasks are enabled for the role to execute. Parameters should be declared as task level vars as they are intented to be dynamic. app_chrome : resolve_prereq : deploy : Parameter Required? Type Default Purpose / Value app_chrome.resolve_prereq no boolean false Enable automatic resolution of prequisites app_chrome.deploy no boolean false Enable installation of application packages End State \u00b6 Use end-state parameters to define the target state after role execution. Parameters should be declared in host_vars or group_vars as they are intended to be permanent. app_chrome_application : name : type : version : installed : Parameter Required? Type Default Purpose / Value app_chrome_application yes(deploy) dictionary Set application package end state app_chrome_application.name yes(deploy) string \"chrome\" Select application package name app_chrome_application.type yes(deploy) string \"native\" Select application package type app_chrome_application.version yes(deploy) string \"latest\" Select application package version app_chrome_application.installed yes(deploy) boolean true Set application package end state Deployment \u00b6 OS Compatibility \u00b6 CentOS8 RedHat8 AlmaLinux8 OracleLinux8 Ubuntu20 Ubuntu21 Fedora33 Fedora35 Debian10 Debian11 Dependencies \u00b6 Ansible Collections: serdigital64.backup bkp_archive serdigital64.system sys_package sys_repository Prerequisites \u00b6 The Ansible engine must be already installed and configured for privileged access and remote execution. In addition the following prerequisites can be automatically solved when running the playbook by setting the role action: resolve_prereq: true Package manager for the target application is installed and enabled. Installation Procedure \u00b6 Manually install Ansible Collections from the Ansible Galaxy repository: ansible-galaxy collection install serdigital64.application Automatic installation is also available by deploying A:Platform64 Contributing \u00b6 Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details. Author \u00b6 SerDigital64 License \u00b6 GPL-3.0-or-later","title":"app_chrome"},{"location":"roles/app_chrome/#ansible-role-serdigital64applicationapp_chrome","text":"","title":"Ansible Role: serdigital64.application.app_chrome"},{"location":"roles/app_chrome/#purpose","text":"Manage provisioning of the Google Chrome application Supported features in the current version: Deploy application. Packages are defined in the variable app_chrome_profiles . The app_chrome Ansible-Role is part of the A:Platform64 project and is available in the application Ansible-Collection.","title":"Purpose"},{"location":"roles/app_chrome/#usage","text":"The following example is an Ansible Playbook that includes all the supported features: use this link if viewing the doc on github use this link if viewing the doc on github --- - name : \"Application / Google Chrome / Usage example\" hosts : \"localhost\" gather_facts : true tasks : - name : \"Example: Install Google Chrome\" vars : app_chrome : resolve_prereq : true deploy : true ansible.builtin.include_role : name : \"serdigital64.application.app_chrome\" ... The playbook can be run by executing: # Set ANSIBLE_COLLECTIONS_PATHS to the default location. Change as needed. ANSIBLE_COLLECTIONS_PATHS = \" ${ HOME } /.ansible/collections\" ansible-playbook \" ${ ANSIBLE_COLLECTIONS_PATHS } /ansible_collections/serdigital64/application/playbooks/app_chrome.yml\"","title":"Usage"},{"location":"roles/app_chrome/#role-parameters","text":"","title":"Role Parameters"},{"location":"roles/app_chrome/#actions","text":"Use action-parameters to control what tasks are enabled for the role to execute. Parameters should be declared as task level vars as they are intented to be dynamic. app_chrome : resolve_prereq : deploy : Parameter Required? Type Default Purpose / Value app_chrome.resolve_prereq no boolean false Enable automatic resolution of prequisites app_chrome.deploy no boolean false Enable installation of application packages","title":"Actions"},{"location":"roles/app_chrome/#end-state","text":"Use end-state parameters to define the target state after role execution. Parameters should be declared in host_vars or group_vars as they are intended to be permanent. app_chrome_application : name : type : version : installed : Parameter Required? Type Default Purpose / Value app_chrome_application yes(deploy) dictionary Set application package end state app_chrome_application.name yes(deploy) string \"chrome\" Select application package name app_chrome_application.type yes(deploy) string \"native\" Select application package type app_chrome_application.version yes(deploy) string \"latest\" Select application package version app_chrome_application.installed yes(deploy) boolean true Set application package end state","title":"End State"},{"location":"roles/app_chrome/#deployment","text":"","title":"Deployment"},{"location":"roles/app_chrome/#os-compatibility","text":"CentOS8 RedHat8 AlmaLinux8 OracleLinux8 Ubuntu20 Ubuntu21 Fedora33 Fedora35 Debian10 Debian11","title":"OS Compatibility"},{"location":"roles/app_chrome/#dependencies","text":"Ansible Collections: serdigital64.backup bkp_archive serdigital64.system sys_package sys_repository","title":"Dependencies"},{"location":"roles/app_chrome/#prerequisites","text":"The Ansible engine must be already installed and configured for privileged access and remote execution. In addition the following prerequisites can be automatically solved when running the playbook by setting the role action: resolve_prereq: true Package manager for the target application is installed and enabled.","title":"Prerequisites"},{"location":"roles/app_chrome/#installation-procedure","text":"Manually install Ansible Collections from the Ansible Galaxy repository: ansible-galaxy collection install serdigital64.application Automatic installation is also available by deploying A:Platform64","title":"Installation Procedure"},{"location":"roles/app_chrome/#contributing","text":"Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details.","title":"Contributing"},{"location":"roles/app_chrome/#author","text":"SerDigital64","title":"Author"},{"location":"roles/app_chrome/#license","text":"GPL-3.0-or-later","title":"License"},{"location":"roles/app_darktable/","text":"Ansible Role: serdigital64.application.app_darktable \u00b6 Purpose \u00b6 Manage provisioning of the Darktable application. Supported features in the current version: Deploy application. Packages are defined in the variable app_darktable_profiles . The app_darktable Ansible-Role is part of the A:Platform64 project and is available in the application Ansible-Collection. Usage \u00b6 The following example is an Ansible Playbook that includes all the supported features: use this link if viewing the doc on github --- - name : \"Application / Darktable / Usage example\" hosts : \"localhost\" gather_facts : true tasks : - name : \"Example: Install Darktable\" vars : app_darktable : resolve_prereq : true deploy : true ansible.builtin.include_role : name : \"serdigital64.application.app_darktable\" ... The playbook can be run by executing: # Set ANSIBLE_COLLECTIONS_PATHS to the default location. Change as needed. ANSIBLE_COLLECTIONS_PATHS = \" ${ HOME } /.ansible/collections\" ansible-playbook \" ${ ANSIBLE_COLLECTIONS_PATHS } /ansible_collections/serdigital64/application/playbooks/app_darktable.yml\" Role Parameters \u00b6 Actions \u00b6 Use action-parameters to control what tasks are enabled for the role to execute. Parameters should be declared as task level vars as they are intented to be dynamic. app_darktable : resolve_prereq : deploy : Parameter Required? Type Default Purpose / Value app_darktable.resolve_prereq no boolean false Enable automatic resolution of prequisites app_darktable.deploy no boolean false Enable installation of application packages End State \u00b6 Use end-state parameters to define the target state after role execution. Parameters should be declared in host_vars or group_vars as they are intended to be permanent. app_darktable_application : name : type : version : installed : Parameter Required? Type Default Purpose / Value app_darktable_application yes(deploy) dictionary Set application package end state app_darktable_application.name yes string \"darktable\" Select application package name app_darktable_application.type yes string \"flatpak\" Select application package type app_darktable_application.version yes string \"latest\" Select application package version app_darktable_application.installed yes boolean true Set application package end state Deployment \u00b6 OS Compatibility \u00b6 CentOS8 RedHat8 AlmaLinux8 OracleLinux8 Ubuntu20 Ubuntu21 Fedora33 Fedora35 Debian10 Debian11 Dependencies \u00b6 Ansible Collections: serdigital64.backup bkp_archive serdigital64.system sys_package sys_repository Prerequisites \u00b6 The Ansible engine must be already installed and configured for privileged access and remote execution. In addition the following prerequisites can be automatically solved when running the playbook by setting the role action: resolve_prereq: true Package manager for the target application is installed and enabled. Installation Procedure \u00b6 Manually install Ansible Collections from the Ansible Galaxy repository: ansible-galaxy collection install serdigital64.application Automatic installation is also available by deploying A:Platform64 Contributing \u00b6 Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details. Author \u00b6 SerDigital64 License \u00b6 GPL-3.0-or-later","title":"app_darktable"},{"location":"roles/app_darktable/#ansible-role-serdigital64applicationapp_darktable","text":"","title":"Ansible Role: serdigital64.application.app_darktable"},{"location":"roles/app_darktable/#purpose","text":"Manage provisioning of the Darktable application. Supported features in the current version: Deploy application. Packages are defined in the variable app_darktable_profiles . The app_darktable Ansible-Role is part of the A:Platform64 project and is available in the application Ansible-Collection.","title":"Purpose"},{"location":"roles/app_darktable/#usage","text":"The following example is an Ansible Playbook that includes all the supported features: use this link if viewing the doc on github --- - name : \"Application / Darktable / Usage example\" hosts : \"localhost\" gather_facts : true tasks : - name : \"Example: Install Darktable\" vars : app_darktable : resolve_prereq : true deploy : true ansible.builtin.include_role : name : \"serdigital64.application.app_darktable\" ... The playbook can be run by executing: # Set ANSIBLE_COLLECTIONS_PATHS to the default location. Change as needed. ANSIBLE_COLLECTIONS_PATHS = \" ${ HOME } /.ansible/collections\" ansible-playbook \" ${ ANSIBLE_COLLECTIONS_PATHS } /ansible_collections/serdigital64/application/playbooks/app_darktable.yml\"","title":"Usage"},{"location":"roles/app_darktable/#role-parameters","text":"","title":"Role Parameters"},{"location":"roles/app_darktable/#actions","text":"Use action-parameters to control what tasks are enabled for the role to execute. Parameters should be declared as task level vars as they are intented to be dynamic. app_darktable : resolve_prereq : deploy : Parameter Required? Type Default Purpose / Value app_darktable.resolve_prereq no boolean false Enable automatic resolution of prequisites app_darktable.deploy no boolean false Enable installation of application packages","title":"Actions"},{"location":"roles/app_darktable/#end-state","text":"Use end-state parameters to define the target state after role execution. Parameters should be declared in host_vars or group_vars as they are intended to be permanent. app_darktable_application : name : type : version : installed : Parameter Required? Type Default Purpose / Value app_darktable_application yes(deploy) dictionary Set application package end state app_darktable_application.name yes string \"darktable\" Select application package name app_darktable_application.type yes string \"flatpak\" Select application package type app_darktable_application.version yes string \"latest\" Select application package version app_darktable_application.installed yes boolean true Set application package end state","title":"End State"},{"location":"roles/app_darktable/#deployment","text":"","title":"Deployment"},{"location":"roles/app_darktable/#os-compatibility","text":"CentOS8 RedHat8 AlmaLinux8 OracleLinux8 Ubuntu20 Ubuntu21 Fedora33 Fedora35 Debian10 Debian11","title":"OS Compatibility"},{"location":"roles/app_darktable/#dependencies","text":"Ansible Collections: serdigital64.backup bkp_archive serdigital64.system sys_package sys_repository","title":"Dependencies"},{"location":"roles/app_darktable/#prerequisites","text":"The Ansible engine must be already installed and configured for privileged access and remote execution. In addition the following prerequisites can be automatically solved when running the playbook by setting the role action: resolve_prereq: true Package manager for the target application is installed and enabled.","title":"Prerequisites"},{"location":"roles/app_darktable/#installation-procedure","text":"Manually install Ansible Collections from the Ansible Galaxy repository: ansible-galaxy collection install serdigital64.application Automatic installation is also available by deploying A:Platform64","title":"Installation Procedure"},{"location":"roles/app_darktable/#contributing","text":"Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details.","title":"Contributing"},{"location":"roles/app_darktable/#author","text":"SerDigital64","title":"Author"},{"location":"roles/app_darktable/#license","text":"GPL-3.0-or-later","title":"License"},{"location":"roles/app_drawio/","text":"Ansible Role: serdigital64.application.app_drawio \u00b6 Purpose \u00b6 Manage provisioning of the DrawIO application. Supported features in the current version: Deploy application. Packages are defined in the variable app_drawio_profiles . The app_drawio Ansible-Role is part of the A:Platform64 project and is available in the application Ansible-Collection. Usage \u00b6 The following example is an Ansible Playbook that includes all the supported features: use this link if viewing the doc on github --- - name : \"Application / DrawIO / Usage example\" hosts : \"localhost\" gather_facts : true tasks : - name : \"Example: Install DrawIO\" vars : app_drawio : resolve_prereq : true deploy : true ansible.builtin.include_role : name : \"serdigital64.application.app_drawio\" ... The playbook can be run by executing: # Set ANSIBLE_COLLECTIONS_PATHS to the default location. Change as needed. ANSIBLE_COLLECTIONS_PATHS = \" ${ HOME } /.ansible/collections\" ansible-playbook \" ${ ANSIBLE_COLLECTIONS_PATHS } /ansible_collections/serdigital64/application/playbooks/app_drawio.yml\" Role Parameters \u00b6 Actions \u00b6 Use action-parameters to control what tasks are enabled for the role to execute. Parameters should be declared as task level vars as they are intented to be dynamic. app_drawio : resolve_prereq : deploy : Parameter Required? Type Default Purpose / Value app_drawio.resolve_prereq no boolean false Enable automatic resolution of prequisites app_drawio.deploy no boolean false Enable installation of application packages End State \u00b6 Use end-state parameters to define the target state after role execution. Parameters should be declared in host_vars or group_vars as they are intended to be permanent. app_drawio_application : name : type : version : installed : Parameter Required? Type Default Purpose / Value app_drawio_application no dictionary Set application package end state app_drawio_application.name no string \"drawio\" Select application package name app_drawio_application.type no string \"flatpak\" Select application package type app_drawio_application.version no string \"latest\" Select application package version app_drawio_application.installed no boolean true Set application package end state Deployment \u00b6 OS Compatibility \u00b6 CentOS8 RedHat8 AlmaLinux8 OracleLinux8 Ubuntu20 Ubuntu21 Fedora33 Fedora35 Debian10 Debian11 Dependencies \u00b6 Ansible Collections: serdigital64.backup bkp_archive serdigital64.system sys_package sys_repository Prerequisites \u00b6 The Ansible engine must be already installed and configured for privileged access and remote execution. In addition the following prerequisites can be automatically solved when running the playbook by setting the role action: resolve_prereq: true Package manager for the target application is installed and enabled. Installation Procedure \u00b6 Manually install Ansible Collections from the Ansible Galaxy repository: ansible-galaxy collection install --upgrade serdigital64.application Automatic installation is also available by deploying A:Platform64 Contributing \u00b6 Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details. Author \u00b6 SerDigital64 License \u00b6 GPL-3.0-or-later","title":"app_drawio"},{"location":"roles/app_drawio/#ansible-role-serdigital64applicationapp_drawio","text":"","title":"Ansible Role: serdigital64.application.app_drawio"},{"location":"roles/app_drawio/#purpose","text":"Manage provisioning of the DrawIO application. Supported features in the current version: Deploy application. Packages are defined in the variable app_drawio_profiles . The app_drawio Ansible-Role is part of the A:Platform64 project and is available in the application Ansible-Collection.","title":"Purpose"},{"location":"roles/app_drawio/#usage","text":"The following example is an Ansible Playbook that includes all the supported features: use this link if viewing the doc on github --- - name : \"Application / DrawIO / Usage example\" hosts : \"localhost\" gather_facts : true tasks : - name : \"Example: Install DrawIO\" vars : app_drawio : resolve_prereq : true deploy : true ansible.builtin.include_role : name : \"serdigital64.application.app_drawio\" ... The playbook can be run by executing: # Set ANSIBLE_COLLECTIONS_PATHS to the default location. Change as needed. ANSIBLE_COLLECTIONS_PATHS = \" ${ HOME } /.ansible/collections\" ansible-playbook \" ${ ANSIBLE_COLLECTIONS_PATHS } /ansible_collections/serdigital64/application/playbooks/app_drawio.yml\"","title":"Usage"},{"location":"roles/app_drawio/#role-parameters","text":"","title":"Role Parameters"},{"location":"roles/app_drawio/#actions","text":"Use action-parameters to control what tasks are enabled for the role to execute. Parameters should be declared as task level vars as they are intented to be dynamic. app_drawio : resolve_prereq : deploy : Parameter Required? Type Default Purpose / Value app_drawio.resolve_prereq no boolean false Enable automatic resolution of prequisites app_drawio.deploy no boolean false Enable installation of application packages","title":"Actions"},{"location":"roles/app_drawio/#end-state","text":"Use end-state parameters to define the target state after role execution. Parameters should be declared in host_vars or group_vars as they are intended to be permanent. app_drawio_application : name : type : version : installed : Parameter Required? Type Default Purpose / Value app_drawio_application no dictionary Set application package end state app_drawio_application.name no string \"drawio\" Select application package name app_drawio_application.type no string \"flatpak\" Select application package type app_drawio_application.version no string \"latest\" Select application package version app_drawio_application.installed no boolean true Set application package end state","title":"End State"},{"location":"roles/app_drawio/#deployment","text":"","title":"Deployment"},{"location":"roles/app_drawio/#os-compatibility","text":"CentOS8 RedHat8 AlmaLinux8 OracleLinux8 Ubuntu20 Ubuntu21 Fedora33 Fedora35 Debian10 Debian11","title":"OS Compatibility"},{"location":"roles/app_drawio/#dependencies","text":"Ansible Collections: serdigital64.backup bkp_archive serdigital64.system sys_package sys_repository","title":"Dependencies"},{"location":"roles/app_drawio/#prerequisites","text":"The Ansible engine must be already installed and configured for privileged access and remote execution. In addition the following prerequisites can be automatically solved when running the playbook by setting the role action: resolve_prereq: true Package manager for the target application is installed and enabled.","title":"Prerequisites"},{"location":"roles/app_drawio/#installation-procedure","text":"Manually install Ansible Collections from the Ansible Galaxy repository: ansible-galaxy collection install --upgrade serdigital64.application Automatic installation is also available by deploying A:Platform64","title":"Installation Procedure"},{"location":"roles/app_drawio/#contributing","text":"Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details.","title":"Contributing"},{"location":"roles/app_drawio/#author","text":"SerDigital64","title":"Author"},{"location":"roles/app_drawio/#license","text":"GPL-3.0-or-later","title":"License"},{"location":"roles/app_firefox/","text":"Ansible Role: serdigital64.application.app_firefox \u00b6 Purpose \u00b6 Manage provisioning of the Mozilla Firefox application. Supported features in the current version: Deploy application. Packages are defined in the variable app_firefox_profiles . The app_firefox Ansible-Role is part of the A:Platform64 project and is available in the application Ansible-Collection. Usage \u00b6 The following example is an Ansible Playbook that includes all the supported features: use this link if viewing the doc on github --- - name : \"Application / Firefox / Usage example\" hosts : \"localhost\" gather_facts : true tasks : - name : \"Example: Install Firefox\" vars : app_firefox : resolve_prereq : true deploy : true ansible.builtin.include_role : name : \"serdigital64.application.app_firefox\" ... The playbook can be run by executing: # Set ANSIBLE_COLLECTIONS_PATHS to the default location. Change as needed. ANSIBLE_COLLECTIONS_PATHS = \" ${ HOME } /.ansible/collections\" ansible-playbook \" ${ ANSIBLE_COLLECTIONS_PATHS } /ansible_collections/serdigital64/application/playbooks/app_firefox.yml\" Role Parameters \u00b6 Actions \u00b6 Use action-parameters to control what tasks are enabled for the role to execute. Parameters should be declared as task level vars as they are intented to be dynamic. app_firefox : resolve_prereq : deploy : Parameter Required? Type Default Purpose / Value app_firefox.resolve_prereq no boolean false Enable automatic resolution of prequisites app_firefox.deploy no boolean false Enable installation of application packages End State \u00b6 Use end-state parameters to define the target state after role execution. Parameters should be declared in host_vars or group_vars as they are intended to be permanent. app_firefox_application : name : type : version : installed : Parameter Required? Type Default Purpose / Value app_firefox_application yes(deploy) dictionary Set application package end state app_firefox_application.name yes string \"firefox\" Select application package name app_firefox_application.type yes string \"distro\" Select application package type app_firefox_application.version yes string \"latest\" Select application package version app_firefox_application.installed yes boolean true Set application package end state Deployment \u00b6 OS Compatibility \u00b6 CentOS8 RedHat8 AlmaLinux8 OracleLinux8 Ubuntu20 Ubuntu21 Fedora33 Fedora35 Debian10 Debian11 Dependencies \u00b6 Ansible Collections: serdigital64.backup bkp_archive serdigital64.system sys_package sys_repository Prerequisites \u00b6 The Ansible engine must be already installed and configured for privileged access and remote execution. In addition the following prerequisites can be automatically solved when running the playbook by setting the role action: resolve_prereq: true Package manager for the target application is installed and enabled. Installation Procedure \u00b6 Manually install Ansible Collections from the Ansible Galaxy repository: ansible-galaxy collection install serdigital64.application Automatic installation is also available by deploying A:Platform64 Contributing \u00b6 Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details. Author \u00b6 SerDigital64 License \u00b6 GPL-3.0-or-later","title":"app_firefox"},{"location":"roles/app_firefox/#ansible-role-serdigital64applicationapp_firefox","text":"","title":"Ansible Role: serdigital64.application.app_firefox"},{"location":"roles/app_firefox/#purpose","text":"Manage provisioning of the Mozilla Firefox application. Supported features in the current version: Deploy application. Packages are defined in the variable app_firefox_profiles . The app_firefox Ansible-Role is part of the A:Platform64 project and is available in the application Ansible-Collection.","title":"Purpose"},{"location":"roles/app_firefox/#usage","text":"The following example is an Ansible Playbook that includes all the supported features: use this link if viewing the doc on github --- - name : \"Application / Firefox / Usage example\" hosts : \"localhost\" gather_facts : true tasks : - name : \"Example: Install Firefox\" vars : app_firefox : resolve_prereq : true deploy : true ansible.builtin.include_role : name : \"serdigital64.application.app_firefox\" ... The playbook can be run by executing: # Set ANSIBLE_COLLECTIONS_PATHS to the default location. Change as needed. ANSIBLE_COLLECTIONS_PATHS = \" ${ HOME } /.ansible/collections\" ansible-playbook \" ${ ANSIBLE_COLLECTIONS_PATHS } /ansible_collections/serdigital64/application/playbooks/app_firefox.yml\"","title":"Usage"},{"location":"roles/app_firefox/#role-parameters","text":"","title":"Role Parameters"},{"location":"roles/app_firefox/#actions","text":"Use action-parameters to control what tasks are enabled for the role to execute. Parameters should be declared as task level vars as they are intented to be dynamic. app_firefox : resolve_prereq : deploy : Parameter Required? Type Default Purpose / Value app_firefox.resolve_prereq no boolean false Enable automatic resolution of prequisites app_firefox.deploy no boolean false Enable installation of application packages","title":"Actions"},{"location":"roles/app_firefox/#end-state","text":"Use end-state parameters to define the target state after role execution. Parameters should be declared in host_vars or group_vars as they are intended to be permanent. app_firefox_application : name : type : version : installed : Parameter Required? Type Default Purpose / Value app_firefox_application yes(deploy) dictionary Set application package end state app_firefox_application.name yes string \"firefox\" Select application package name app_firefox_application.type yes string \"distro\" Select application package type app_firefox_application.version yes string \"latest\" Select application package version app_firefox_application.installed yes boolean true Set application package end state","title":"End State"},{"location":"roles/app_firefox/#deployment","text":"","title":"Deployment"},{"location":"roles/app_firefox/#os-compatibility","text":"CentOS8 RedHat8 AlmaLinux8 OracleLinux8 Ubuntu20 Ubuntu21 Fedora33 Fedora35 Debian10 Debian11","title":"OS Compatibility"},{"location":"roles/app_firefox/#dependencies","text":"Ansible Collections: serdigital64.backup bkp_archive serdigital64.system sys_package sys_repository","title":"Dependencies"},{"location":"roles/app_firefox/#prerequisites","text":"The Ansible engine must be already installed and configured for privileged access and remote execution. In addition the following prerequisites can be automatically solved when running the playbook by setting the role action: resolve_prereq: true Package manager for the target application is installed and enabled.","title":"Prerequisites"},{"location":"roles/app_firefox/#installation-procedure","text":"Manually install Ansible Collections from the Ansible Galaxy repository: ansible-galaxy collection install serdigital64.application Automatic installation is also available by deploying A:Platform64","title":"Installation Procedure"},{"location":"roles/app_firefox/#contributing","text":"Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details.","title":"Contributing"},{"location":"roles/app_firefox/#author","text":"SerDigital64","title":"Author"},{"location":"roles/app_firefox/#license","text":"GPL-3.0-or-later","title":"License"},{"location":"roles/app_freecad/","text":"Ansible Role: serdigital64.application.app_freecad \u00b6 Purpose \u00b6 Manage provisioning of the FreeCAD application. Supported features in the current version: Deploy application. Packages are defined in the variable app_freecad_profiles . The app_freecad Ansible-Role is part of the A:Platform64 project and is available in the application Ansible-Collection. Usage \u00b6 The following example is an Ansible Playbook that includes all the supported features: use this link if viewing the doc on github --- - name : \"Application / FreeCAD / Usage example\" hosts : \"localhost\" gather_facts : true tasks : - name : \"Example: Install FreeCAD\" vars : app_freecad : resolve_prereq : true deploy : true ansible.builtin.include_role : name : \"serdigital64.application.app_freecad\" ... The playbook can be run by executing: # Set ANSIBLE_COLLECTIONS_PATHS to the default location. Change as needed. ANSIBLE_COLLECTIONS_PATHS = \" ${ HOME } /.ansible/collections\" ansible-playbook \" ${ ANSIBLE_COLLECTIONS_PATHS } /ansible_collections/serdigital64/application/playbooks/app_freecad.yml\" Role Parameters \u00b6 Actions \u00b6 Use action-parameters to control what tasks are enabled for the role to execute. Parameters should be declared as task level vars as they are intented to be dynamic. app_freecad : resolve_prereq : deploy : Parameter Required? Type Default Purpose / Value app_freecad.resolve_prereq no boolean false Enable automatic resolution of prequisites app_freecad.deploy no boolean false Enable installation of application packages End State \u00b6 Use end-state parameters to define the target state after role execution. Parameters should be declared in host_vars or group_vars as they are intended to be permanent. app_freecad_application : name : type : version : installed : Parameter Required? Type Default Purpose / Value app_freecad_application yes(deploy) dictionary Set application package end state app_freecad_application.name yes string \"freecad\" Select application package name app_freecad_application.type yes string \"flatpak\" Select application package type app_freecad_application.version yes string \"latest\" Select application package version app_freecad_application.installed yes boolean true Set application package end state Deployment \u00b6 OS Compatibility \u00b6 CentOS8 RedHat8 AlmaLinux8 OracleLinux8 Ubuntu20 Ubuntu21 Fedora33 Fedora35 Debian10 Debian11 Dependencies \u00b6 Ansible Collections: serdigital64.backup bkp_archive serdigital64.system sys_package sys_repository Prerequisites \u00b6 The Ansible engine must be already installed and configured for privileged access and remote execution. In addition the following prerequisites can be automatically solved when running the playbook by setting the role action: resolve_prereq: true Package manager for the target application is installed and enabled. Installation Procedure \u00b6 Manually install Ansible Collections from the Ansible Galaxy repository: ansible-galaxy collection install serdigital64.application Automatic installation is also available by deploying A:Platform64 Contributing \u00b6 Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details. Author \u00b6 SerDigital64 License \u00b6 GPL-3.0-or-later","title":"app_freecad"},{"location":"roles/app_freecad/#ansible-role-serdigital64applicationapp_freecad","text":"","title":"Ansible Role: serdigital64.application.app_freecad"},{"location":"roles/app_freecad/#purpose","text":"Manage provisioning of the FreeCAD application. Supported features in the current version: Deploy application. Packages are defined in the variable app_freecad_profiles . The app_freecad Ansible-Role is part of the A:Platform64 project and is available in the application Ansible-Collection.","title":"Purpose"},{"location":"roles/app_freecad/#usage","text":"The following example is an Ansible Playbook that includes all the supported features: use this link if viewing the doc on github --- - name : \"Application / FreeCAD / Usage example\" hosts : \"localhost\" gather_facts : true tasks : - name : \"Example: Install FreeCAD\" vars : app_freecad : resolve_prereq : true deploy : true ansible.builtin.include_role : name : \"serdigital64.application.app_freecad\" ... The playbook can be run by executing: # Set ANSIBLE_COLLECTIONS_PATHS to the default location. Change as needed. ANSIBLE_COLLECTIONS_PATHS = \" ${ HOME } /.ansible/collections\" ansible-playbook \" ${ ANSIBLE_COLLECTIONS_PATHS } /ansible_collections/serdigital64/application/playbooks/app_freecad.yml\"","title":"Usage"},{"location":"roles/app_freecad/#role-parameters","text":"","title":"Role Parameters"},{"location":"roles/app_freecad/#actions","text":"Use action-parameters to control what tasks are enabled for the role to execute. Parameters should be declared as task level vars as they are intented to be dynamic. app_freecad : resolve_prereq : deploy : Parameter Required? Type Default Purpose / Value app_freecad.resolve_prereq no boolean false Enable automatic resolution of prequisites app_freecad.deploy no boolean false Enable installation of application packages","title":"Actions"},{"location":"roles/app_freecad/#end-state","text":"Use end-state parameters to define the target state after role execution. Parameters should be declared in host_vars or group_vars as they are intended to be permanent. app_freecad_application : name : type : version : installed : Parameter Required? Type Default Purpose / Value app_freecad_application yes(deploy) dictionary Set application package end state app_freecad_application.name yes string \"freecad\" Select application package name app_freecad_application.type yes string \"flatpak\" Select application package type app_freecad_application.version yes string \"latest\" Select application package version app_freecad_application.installed yes boolean true Set application package end state","title":"End State"},{"location":"roles/app_freecad/#deployment","text":"","title":"Deployment"},{"location":"roles/app_freecad/#os-compatibility","text":"CentOS8 RedHat8 AlmaLinux8 OracleLinux8 Ubuntu20 Ubuntu21 Fedora33 Fedora35 Debian10 Debian11","title":"OS Compatibility"},{"location":"roles/app_freecad/#dependencies","text":"Ansible Collections: serdigital64.backup bkp_archive serdigital64.system sys_package sys_repository","title":"Dependencies"},{"location":"roles/app_freecad/#prerequisites","text":"The Ansible engine must be already installed and configured for privileged access and remote execution. In addition the following prerequisites can be automatically solved when running the playbook by setting the role action: resolve_prereq: true Package manager for the target application is installed and enabled.","title":"Prerequisites"},{"location":"roles/app_freecad/#installation-procedure","text":"Manually install Ansible Collections from the Ansible Galaxy repository: ansible-galaxy collection install serdigital64.application Automatic installation is also available by deploying A:Platform64","title":"Installation Procedure"},{"location":"roles/app_freecad/#contributing","text":"Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details.","title":"Contributing"},{"location":"roles/app_freecad/#author","text":"SerDigital64","title":"Author"},{"location":"roles/app_freecad/#license","text":"GPL-3.0-or-later","title":"License"},{"location":"roles/app_gimp/","text":"Ansible Role: serdigital64.application.app_gimp \u00b6 Purpose \u00b6 Manage provisioning of the GIMP application. Supported features in the current version: Deploy application. Packages are defined in the variable app_gimp_profiles . The app_gimp Ansible-Role is part of the A:Platform64 project and is available in the application Ansible-Collection. Usage \u00b6 The following example is an Ansible Playbook that includes all the supported features: use this link if viewing the doc on github --- - name : \"Application / GIMP / Usage example\" hosts : \"localhost\" gather_facts : true tasks : - name : \"Example: Install GIMP\" vars : app_gimp : resolve_prereq : true deploy : true ansible.builtin.include_role : name : \"serdigital64.application.app_gimp\" ... The playbook can be run by executing: # Set ANSIBLE_COLLECTIONS_PATHS to the default location. Change as needed. ANSIBLE_COLLECTIONS_PATHS = \" ${ HOME } /.ansible/collections\" ansible-playbook \" ${ ANSIBLE_COLLECTIONS_PATHS } /ansible_collections/serdigital64/application/playbooks/app_gimp.yml\" Role Parameters \u00b6 Actions \u00b6 Use action-parameters to control what tasks are enabled for the role to execute. Parameters should be declared as task level vars as they are intented to be dynamic. app_gimp : resolve_prereq : deploy : Parameter Required? Type Default Purpose / Value app_gimp.resolve_prereq no boolean false Enable automatic resolution of prequisites app_gimp.deploy no boolean false Enable installation of application packages End State \u00b6 Use end-state parameters to define the target state after role execution. Parameters should be declared in host_vars or group_vars as they are intended to be permanent. app_gimp_application : name : type : version : installed : Parameter Required? Type Default Purpose / Value app_gimp_application no dictionary Set application package end state app_gimp_application.name no string \"gimp\" Select application package name app_gimp_application.type no string \"flatpak\" Select application package type app_gimp_application.version no string \"latest\" Select application package version app_gimp_application.installed no boolean true Set application package end state Deployment \u00b6 OS Compatibility \u00b6 CentOS8 RedHat8 AlmaLinux8 OracleLinux8 Ubuntu20 Ubuntu21 Fedora33 Fedora35 Debian10 Debian11 Dependencies \u00b6 Ansible Collections: serdigital64.backup bkp_archive serdigital64.system sys_package sys_repository Prerequisites \u00b6 The Ansible engine must be already installed and configured for privileged access and remote execution. In addition the following prerequisites can be automatically solved when running the playbook by setting the role action: resolve_prereq: true Package manager for the target application is installed and enabled. Installation Procedure \u00b6 Manually install Ansible Collections from the Ansible Galaxy repository: ansible-galaxy collection install --upgrade serdigital64.application Automatic installation is also available by deploying A:Platform64 Contributing \u00b6 Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details. Author \u00b6 SerDigital64 License \u00b6 GPL-3.0-or-later","title":"app_gimp"},{"location":"roles/app_gimp/#ansible-role-serdigital64applicationapp_gimp","text":"","title":"Ansible Role: serdigital64.application.app_gimp"},{"location":"roles/app_gimp/#purpose","text":"Manage provisioning of the GIMP application. Supported features in the current version: Deploy application. Packages are defined in the variable app_gimp_profiles . The app_gimp Ansible-Role is part of the A:Platform64 project and is available in the application Ansible-Collection.","title":"Purpose"},{"location":"roles/app_gimp/#usage","text":"The following example is an Ansible Playbook that includes all the supported features: use this link if viewing the doc on github --- - name : \"Application / GIMP / Usage example\" hosts : \"localhost\" gather_facts : true tasks : - name : \"Example: Install GIMP\" vars : app_gimp : resolve_prereq : true deploy : true ansible.builtin.include_role : name : \"serdigital64.application.app_gimp\" ... The playbook can be run by executing: # Set ANSIBLE_COLLECTIONS_PATHS to the default location. Change as needed. ANSIBLE_COLLECTIONS_PATHS = \" ${ HOME } /.ansible/collections\" ansible-playbook \" ${ ANSIBLE_COLLECTIONS_PATHS } /ansible_collections/serdigital64/application/playbooks/app_gimp.yml\"","title":"Usage"},{"location":"roles/app_gimp/#role-parameters","text":"","title":"Role Parameters"},{"location":"roles/app_gimp/#actions","text":"Use action-parameters to control what tasks are enabled for the role to execute. Parameters should be declared as task level vars as they are intented to be dynamic. app_gimp : resolve_prereq : deploy : Parameter Required? Type Default Purpose / Value app_gimp.resolve_prereq no boolean false Enable automatic resolution of prequisites app_gimp.deploy no boolean false Enable installation of application packages","title":"Actions"},{"location":"roles/app_gimp/#end-state","text":"Use end-state parameters to define the target state after role execution. Parameters should be declared in host_vars or group_vars as they are intended to be permanent. app_gimp_application : name : type : version : installed : Parameter Required? Type Default Purpose / Value app_gimp_application no dictionary Set application package end state app_gimp_application.name no string \"gimp\" Select application package name app_gimp_application.type no string \"flatpak\" Select application package type app_gimp_application.version no string \"latest\" Select application package version app_gimp_application.installed no boolean true Set application package end state","title":"End State"},{"location":"roles/app_gimp/#deployment","text":"","title":"Deployment"},{"location":"roles/app_gimp/#os-compatibility","text":"CentOS8 RedHat8 AlmaLinux8 OracleLinux8 Ubuntu20 Ubuntu21 Fedora33 Fedora35 Debian10 Debian11","title":"OS Compatibility"},{"location":"roles/app_gimp/#dependencies","text":"Ansible Collections: serdigital64.backup bkp_archive serdigital64.system sys_package sys_repository","title":"Dependencies"},{"location":"roles/app_gimp/#prerequisites","text":"The Ansible engine must be already installed and configured for privileged access and remote execution. In addition the following prerequisites can be automatically solved when running the playbook by setting the role action: resolve_prereq: true Package manager for the target application is installed and enabled.","title":"Prerequisites"},{"location":"roles/app_gimp/#installation-procedure","text":"Manually install Ansible Collections from the Ansible Galaxy repository: ansible-galaxy collection install --upgrade serdigital64.application Automatic installation is also available by deploying A:Platform64","title":"Installation Procedure"},{"location":"roles/app_gimp/#contributing","text":"Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details.","title":"Contributing"},{"location":"roles/app_gimp/#author","text":"SerDigital64","title":"Author"},{"location":"roles/app_gimp/#license","text":"GPL-3.0-or-later","title":"License"},{"location":"roles/app_inkscape/","text":"Ansible Role: serdigital64.application.app_inkscape \u00b6 Purpose \u00b6 Manage provisioning of the InkScape application. Supported features in the current version: Deploy application. Packages are defined in the variable app_inkscape_profiles . The app_inkscape Ansible-Role is part of the A:Platform64 project and is available in the application Ansible-Collection. Usage \u00b6 The following example is an Ansible Playbook that includes all the supported features: use this link if viewing the doc on github --- - name : \"Application / InkScape / Usage example\" hosts : \"localhost\" gather_facts : true tasks : - name : \"Example: Install InkScape\" vars : app_inkscape : resolve_prereq : true deploy : true ansible.builtin.include_role : name : \"serdigital64.application.app_inkscape\" ... The playbook can be run by executing: # Set ANSIBLE_COLLECTIONS_PATHS to the default location. Change as needed. ANSIBLE_COLLECTIONS_PATHS = \" ${ HOME } /.ansible/collections\" ansible-playbook \" ${ ANSIBLE_COLLECTIONS_PATHS } /ansible_collections/serdigital64/application/playbooks/app_inkscape.yml\" Role Parameters \u00b6 Actions \u00b6 Use action-parameters to control what tasks are enabled for the role to execute. Parameters should be declared as task level vars as they are intented to be dynamic. app_inkscape : resolve_prereq : deploy : Parameter Required? Type Default Purpose / Value app_inkscape.resolve_prereq no boolean false Enable automatic resolution of prequisites app_inkscape.deploy no boolean false Enable installation of application packages End State \u00b6 Use end-state parameters to define the target state after role execution. Parameters should be declared in host_vars or group_vars as they are intended to be permanent. app_inkscape_application : name : type : version : installed : Parameter Required? Type Default Purpose / Value app_inkscape_application no dictionary Set application package end state app_inkscape_application.name no string \"inkscape\" Select application package name app_inkscape_application.type no string \"flatpak\" Select application package type app_inkscape_application.version no string \"latest\" Select application package version app_inkscape_application.installed no boolean true Set application package end state Deployment \u00b6 OS Compatibility \u00b6 CentOS8 RedHat8 AlmaLinux8 OracleLinux8 Ubuntu20 Ubuntu21 Fedora33 Fedora35 Debian10 Debian11 Dependencies \u00b6 Ansible Collections: serdigital64.backup bkp_archive serdigital64.system sys_package sys_repository Prerequisites \u00b6 The Ansible engine must be already installed and configured for privileged access and remote execution. In addition the following prerequisites can be automatically solved when running the playbook by setting the role action: resolve_prereq: true Package manager for the target application is installed and enabled. Installation Procedure \u00b6 Manually install Ansible Collections from the Ansible Galaxy repository: ansible-galaxy collection install --upgrade serdigital64.application Automatic installation is also available by deploying A:Platform64 Contributing \u00b6 Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details. Author \u00b6 SerDigital64 License \u00b6 GPL-3.0-or-later","title":"app_inkscape"},{"location":"roles/app_inkscape/#ansible-role-serdigital64applicationapp_inkscape","text":"","title":"Ansible Role: serdigital64.application.app_inkscape"},{"location":"roles/app_inkscape/#purpose","text":"Manage provisioning of the InkScape application. Supported features in the current version: Deploy application. Packages are defined in the variable app_inkscape_profiles . The app_inkscape Ansible-Role is part of the A:Platform64 project and is available in the application Ansible-Collection.","title":"Purpose"},{"location":"roles/app_inkscape/#usage","text":"The following example is an Ansible Playbook that includes all the supported features: use this link if viewing the doc on github --- - name : \"Application / InkScape / Usage example\" hosts : \"localhost\" gather_facts : true tasks : - name : \"Example: Install InkScape\" vars : app_inkscape : resolve_prereq : true deploy : true ansible.builtin.include_role : name : \"serdigital64.application.app_inkscape\" ... The playbook can be run by executing: # Set ANSIBLE_COLLECTIONS_PATHS to the default location. Change as needed. ANSIBLE_COLLECTIONS_PATHS = \" ${ HOME } /.ansible/collections\" ansible-playbook \" ${ ANSIBLE_COLLECTIONS_PATHS } /ansible_collections/serdigital64/application/playbooks/app_inkscape.yml\"","title":"Usage"},{"location":"roles/app_inkscape/#role-parameters","text":"","title":"Role Parameters"},{"location":"roles/app_inkscape/#actions","text":"Use action-parameters to control what tasks are enabled for the role to execute. Parameters should be declared as task level vars as they are intented to be dynamic. app_inkscape : resolve_prereq : deploy : Parameter Required? Type Default Purpose / Value app_inkscape.resolve_prereq no boolean false Enable automatic resolution of prequisites app_inkscape.deploy no boolean false Enable installation of application packages","title":"Actions"},{"location":"roles/app_inkscape/#end-state","text":"Use end-state parameters to define the target state after role execution. Parameters should be declared in host_vars or group_vars as they are intended to be permanent. app_inkscape_application : name : type : version : installed : Parameter Required? Type Default Purpose / Value app_inkscape_application no dictionary Set application package end state app_inkscape_application.name no string \"inkscape\" Select application package name app_inkscape_application.type no string \"flatpak\" Select application package type app_inkscape_application.version no string \"latest\" Select application package version app_inkscape_application.installed no boolean true Set application package end state","title":"End State"},{"location":"roles/app_inkscape/#deployment","text":"","title":"Deployment"},{"location":"roles/app_inkscape/#os-compatibility","text":"CentOS8 RedHat8 AlmaLinux8 OracleLinux8 Ubuntu20 Ubuntu21 Fedora33 Fedora35 Debian10 Debian11","title":"OS Compatibility"},{"location":"roles/app_inkscape/#dependencies","text":"Ansible Collections: serdigital64.backup bkp_archive serdigital64.system sys_package sys_repository","title":"Dependencies"},{"location":"roles/app_inkscape/#prerequisites","text":"The Ansible engine must be already installed and configured for privileged access and remote execution. In addition the following prerequisites can be automatically solved when running the playbook by setting the role action: resolve_prereq: true Package manager for the target application is installed and enabled.","title":"Prerequisites"},{"location":"roles/app_inkscape/#installation-procedure","text":"Manually install Ansible Collections from the Ansible Galaxy repository: ansible-galaxy collection install --upgrade serdigital64.application Automatic installation is also available by deploying A:Platform64","title":"Installation Procedure"},{"location":"roles/app_inkscape/#contributing","text":"Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details.","title":"Contributing"},{"location":"roles/app_inkscape/#author","text":"SerDigital64","title":"Author"},{"location":"roles/app_inkscape/#license","text":"GPL-3.0-or-later","title":"License"},{"location":"roles/app_keepassxc/","text":"Ansible Role: serdigital64.application.app_keepassxc \u00b6 Purpose \u00b6 Manage provisioning of the KeePassXC application. Supported features in the current version: Deploy application. Packages are defined in the variable app_keepassxc_profiles . Configure application: Deploy default user configuration The app_keepassxc Ansible-Role is part of the A:Platform64 project and is available in the application Ansible-Collection. Usage \u00b6 The following example is an Ansible Playbook that includes all the supported features: use this link if viewing the doc on github --- - name : \"Application / KeePassXC / Usage example\" hosts : \"localhost\" gather_facts : true tasks : - name : \"Example: Install KeePassXC\" vars : app_keepassxc : resolve_prereq : true deploy : true ansible.builtin.include_role : name : \"serdigital64.application.app_keepassxc\" ... The playbook can be run by executing: # Set ANSIBLE_COLLECTIONS_PATHS to the default location. Change as needed. ANSIBLE_COLLECTIONS_PATHS = \" ${ HOME } /.ansible/collections\" ansible-playbook \" ${ ANSIBLE_COLLECTIONS_PATHS } /ansible_collections/serdigital64/application/playbooks/app_keepassxc.yml\" Role Parameters \u00b6 Actions \u00b6 Use action-parameters to control what tasks are enabled for the role to execute. Parameters should be declared as task level vars as they are intented to be dynamic. app_keepassxc : resolve_prereq : deploy : setup : Parameter Required? Type Default Purpose / Value app_keepassxc.resolve_prereq no boolean false Enable automatic resolution of prequisites app_keepassxc.deploy no boolean false Enable installation of application packages app_keepassxc.setup no boolean false Enable application configuration End State \u00b6 Use end-state parameters to define the target state after role execution. Parameters should be declared in host_vars or group_vars as they are intended to be permanent. app_keepassxc_application : name : type : version : installed : app_keepassxc_actions : setup : overwrite : app_keepassxc_setup_users : - name : home : Parameter Required? Type Default Purpose / Value app_keepassxc_application no dictionary Set application package end state app_keepassxc_application.name no string \"keepassxc\" Select application package name app_keepassxc_application.type no string \"distro\" Select application package type app_keepassxc_application.version no string \"latest\" Select application package version app_keepassxc_application.installed no boolean true Set application package end state app_keepassxc_actions no dictionary Set action options app_keepassxc_actions.setup no dictionary Set setup action options app_keepassxc_actions.setup.overwrite no boolean false Overwrite user configurations? app_keepassxc_setup_users yes(setup) list List of users for the setup task app_keepassxc_setup_users.0.name yes string User login name app_keepassxc_setup_users.0.home yes string Home full path Deployment \u00b6 OS Compatibility \u00b6 Ubuntu20 Ubuntu21 Fedora33 Fedora35 Debian10 Debian11 Dependencies \u00b6 Ansible Collections: serdigital64.backup bkp_archive serdigital64.system sys_package sys_repository Prerequisites \u00b6 The Ansible engine must be already installed and configured for privileged access and remote execution. In addition the following prerequisites can be automatically solved when running the playbook by setting the role action: resolve_prereq: true Package manager for the target application is installed and enabled. Installation Procedure \u00b6 Manually install Ansible Collections from the Ansible Galaxy repository: ansible-galaxy collection install --upgrade serdigital64.application Automatic installation is also available by deploying A:Platform64 Contributing \u00b6 Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details. Author \u00b6 SerDigital64 License \u00b6 GPL-3.0-or-later","title":"app_keepassxc"},{"location":"roles/app_keepassxc/#ansible-role-serdigital64applicationapp_keepassxc","text":"","title":"Ansible Role: serdigital64.application.app_keepassxc"},{"location":"roles/app_keepassxc/#purpose","text":"Manage provisioning of the KeePassXC application. Supported features in the current version: Deploy application. Packages are defined in the variable app_keepassxc_profiles . Configure application: Deploy default user configuration The app_keepassxc Ansible-Role is part of the A:Platform64 project and is available in the application Ansible-Collection.","title":"Purpose"},{"location":"roles/app_keepassxc/#usage","text":"The following example is an Ansible Playbook that includes all the supported features: use this link if viewing the doc on github --- - name : \"Application / KeePassXC / Usage example\" hosts : \"localhost\" gather_facts : true tasks : - name : \"Example: Install KeePassXC\" vars : app_keepassxc : resolve_prereq : true deploy : true ansible.builtin.include_role : name : \"serdigital64.application.app_keepassxc\" ... The playbook can be run by executing: # Set ANSIBLE_COLLECTIONS_PATHS to the default location. Change as needed. ANSIBLE_COLLECTIONS_PATHS = \" ${ HOME } /.ansible/collections\" ansible-playbook \" ${ ANSIBLE_COLLECTIONS_PATHS } /ansible_collections/serdigital64/application/playbooks/app_keepassxc.yml\"","title":"Usage"},{"location":"roles/app_keepassxc/#role-parameters","text":"","title":"Role Parameters"},{"location":"roles/app_keepassxc/#actions","text":"Use action-parameters to control what tasks are enabled for the role to execute. Parameters should be declared as task level vars as they are intented to be dynamic. app_keepassxc : resolve_prereq : deploy : setup : Parameter Required? Type Default Purpose / Value app_keepassxc.resolve_prereq no boolean false Enable automatic resolution of prequisites app_keepassxc.deploy no boolean false Enable installation of application packages app_keepassxc.setup no boolean false Enable application configuration","title":"Actions"},{"location":"roles/app_keepassxc/#end-state","text":"Use end-state parameters to define the target state after role execution. Parameters should be declared in host_vars or group_vars as they are intended to be permanent. app_keepassxc_application : name : type : version : installed : app_keepassxc_actions : setup : overwrite : app_keepassxc_setup_users : - name : home : Parameter Required? Type Default Purpose / Value app_keepassxc_application no dictionary Set application package end state app_keepassxc_application.name no string \"keepassxc\" Select application package name app_keepassxc_application.type no string \"distro\" Select application package type app_keepassxc_application.version no string \"latest\" Select application package version app_keepassxc_application.installed no boolean true Set application package end state app_keepassxc_actions no dictionary Set action options app_keepassxc_actions.setup no dictionary Set setup action options app_keepassxc_actions.setup.overwrite no boolean false Overwrite user configurations? app_keepassxc_setup_users yes(setup) list List of users for the setup task app_keepassxc_setup_users.0.name yes string User login name app_keepassxc_setup_users.0.home yes string Home full path","title":"End State"},{"location":"roles/app_keepassxc/#deployment","text":"","title":"Deployment"},{"location":"roles/app_keepassxc/#os-compatibility","text":"Ubuntu20 Ubuntu21 Fedora33 Fedora35 Debian10 Debian11","title":"OS Compatibility"},{"location":"roles/app_keepassxc/#dependencies","text":"Ansible Collections: serdigital64.backup bkp_archive serdigital64.system sys_package sys_repository","title":"Dependencies"},{"location":"roles/app_keepassxc/#prerequisites","text":"The Ansible engine must be already installed and configured for privileged access and remote execution. In addition the following prerequisites can be automatically solved when running the playbook by setting the role action: resolve_prereq: true Package manager for the target application is installed and enabled.","title":"Prerequisites"},{"location":"roles/app_keepassxc/#installation-procedure","text":"Manually install Ansible Collections from the Ansible Galaxy repository: ansible-galaxy collection install --upgrade serdigital64.application Automatic installation is also available by deploying A:Platform64","title":"Installation Procedure"},{"location":"roles/app_keepassxc/#contributing","text":"Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details.","title":"Contributing"},{"location":"roles/app_keepassxc/#author","text":"SerDigital64","title":"Author"},{"location":"roles/app_keepassxc/#license","text":"GPL-3.0-or-later","title":"License"},{"location":"roles/app_kryta/","text":"Ansible Role: serdigital64.application.app_kryta \u00b6 Purpose \u00b6 Manage provisioning of the Kryta application. Supported features in the current version: Deploy application. Packages are defined in the variable app_kryta_profiles . The app_kryta Ansible-Role is part of the A:Platform64 project and is available in the application Ansible-Collection. Usage \u00b6 The following example is an Ansible Playbook that includes all the supported features: use this link if viewing the doc on github --- - name : \"Application / Kryta / Usage example\" hosts : \"localhost\" gather_facts : true tasks : - name : \"Example: Install Kryta\" vars : app_kryta : resolve_prereq : true deploy : true ansible.builtin.include_role : name : \"serdigital64.application.app_kryta\" ... The playbook can be run by executing: # Set ANSIBLE_COLLECTIONS_PATHS to the default location. Change as needed. ANSIBLE_COLLECTIONS_PATHS = \" ${ HOME } /.ansible/collections\" ansible-playbook \" ${ ANSIBLE_COLLECTIONS_PATHS } /ansible_collections/serdigital64/application/playbooks/app_kryta.yml\" Role Parameters \u00b6 Actions \u00b6 Use action-parameters to control what tasks are enabled for the role to execute. Parameters should be declared as task level vars as they are intented to be dynamic. app_kryta : resolve_prereq : deploy : Parameter Required? Type Default Purpose / Value app_kryta.resolve_prereq no boolean false Enable automatic resolution of prequisites app_kryta.deploy no boolean false Enable installation of application packages End State \u00b6 Use end-state parameters to define the target state after role execution. Parameters should be declared in host_vars or group_vars as they are intended to be permanent. app_kryta_application : name : type : version : installed : Parameter Required? Type Default Purpose / Value app_kryta_application no dictionary Set application package end state app_kryta_application.name no string \"kryta\" Select application package name app_kryta_application.type no string \"flatpak\" Select application package type app_kryta_application.version no string \"latest\" Select application package version app_kryta_application.installed no boolean true Set application package end state Deployment \u00b6 OS Compatibility \u00b6 CentOS8 RedHat8 AlmaLinux8 OracleLinux8 Ubuntu20 Ubuntu21 Fedora33 Fedora35 Debian10 Debian11 Dependencies \u00b6 Ansible Collections: serdigital64.backup bkp_archive serdigital64.system sys_package sys_repository Prerequisites \u00b6 The Ansible engine must be already installed and configured for privileged access and remote execution. In addition the following prerequisites can be automatically solved when running the playbook by setting the role action: resolve_prereq: true Package manager for the target application is installed and enabled. Installation Procedure \u00b6 Manually install Ansible Collections from the Ansible Galaxy repository: ansible-galaxy collection install --upgrade serdigital64.application Automatic installation is also available by deploying A:Platform64 Contributing \u00b6 Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details. Author \u00b6 SerDigital64 License \u00b6 GPL-3.0-or-later","title":"app_kryta"},{"location":"roles/app_kryta/#ansible-role-serdigital64applicationapp_kryta","text":"","title":"Ansible Role: serdigital64.application.app_kryta"},{"location":"roles/app_kryta/#purpose","text":"Manage provisioning of the Kryta application. Supported features in the current version: Deploy application. Packages are defined in the variable app_kryta_profiles . The app_kryta Ansible-Role is part of the A:Platform64 project and is available in the application Ansible-Collection.","title":"Purpose"},{"location":"roles/app_kryta/#usage","text":"The following example is an Ansible Playbook that includes all the supported features: use this link if viewing the doc on github --- - name : \"Application / Kryta / Usage example\" hosts : \"localhost\" gather_facts : true tasks : - name : \"Example: Install Kryta\" vars : app_kryta : resolve_prereq : true deploy : true ansible.builtin.include_role : name : \"serdigital64.application.app_kryta\" ... The playbook can be run by executing: # Set ANSIBLE_COLLECTIONS_PATHS to the default location. Change as needed. ANSIBLE_COLLECTIONS_PATHS = \" ${ HOME } /.ansible/collections\" ansible-playbook \" ${ ANSIBLE_COLLECTIONS_PATHS } /ansible_collections/serdigital64/application/playbooks/app_kryta.yml\"","title":"Usage"},{"location":"roles/app_kryta/#role-parameters","text":"","title":"Role Parameters"},{"location":"roles/app_kryta/#actions","text":"Use action-parameters to control what tasks are enabled for the role to execute. Parameters should be declared as task level vars as they are intented to be dynamic. app_kryta : resolve_prereq : deploy : Parameter Required? Type Default Purpose / Value app_kryta.resolve_prereq no boolean false Enable automatic resolution of prequisites app_kryta.deploy no boolean false Enable installation of application packages","title":"Actions"},{"location":"roles/app_kryta/#end-state","text":"Use end-state parameters to define the target state after role execution. Parameters should be declared in host_vars or group_vars as they are intended to be permanent. app_kryta_application : name : type : version : installed : Parameter Required? Type Default Purpose / Value app_kryta_application no dictionary Set application package end state app_kryta_application.name no string \"kryta\" Select application package name app_kryta_application.type no string \"flatpak\" Select application package type app_kryta_application.version no string \"latest\" Select application package version app_kryta_application.installed no boolean true Set application package end state","title":"End State"},{"location":"roles/app_kryta/#deployment","text":"","title":"Deployment"},{"location":"roles/app_kryta/#os-compatibility","text":"CentOS8 RedHat8 AlmaLinux8 OracleLinux8 Ubuntu20 Ubuntu21 Fedora33 Fedora35 Debian10 Debian11","title":"OS Compatibility"},{"location":"roles/app_kryta/#dependencies","text":"Ansible Collections: serdigital64.backup bkp_archive serdigital64.system sys_package sys_repository","title":"Dependencies"},{"location":"roles/app_kryta/#prerequisites","text":"The Ansible engine must be already installed and configured for privileged access and remote execution. In addition the following prerequisites can be automatically solved when running the playbook by setting the role action: resolve_prereq: true Package manager for the target application is installed and enabled.","title":"Prerequisites"},{"location":"roles/app_kryta/#installation-procedure","text":"Manually install Ansible Collections from the Ansible Galaxy repository: ansible-galaxy collection install --upgrade serdigital64.application Automatic installation is also available by deploying A:Platform64","title":"Installation Procedure"},{"location":"roles/app_kryta/#contributing","text":"Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details.","title":"Contributing"},{"location":"roles/app_kryta/#author","text":"SerDigital64","title":"Author"},{"location":"roles/app_kryta/#license","text":"GPL-3.0-or-later","title":"License"},{"location":"roles/app_libreoffice/","text":"Ansible Role: serdigital64.application.app_libreoffice \u00b6 Purpose \u00b6 Manage provisioning of the LibreOffice application. Supported features in the current version: Deploy application. Packages are defined in the variable app_libreoffice_profiles . The app_libreoffice Ansible-Role is part of the A:Platform64 project and is available in the application Ansible-Collection. Usage \u00b6 The following example is an Ansible Playbook that includes all the supported features: use this link if viewing the doc on github --- - name : \"Application / LibreOffice / Usage example\" hosts : \"localhost\" gather_facts : true tasks : - name : \"Example: Install LibreOffice\" vars : app_libreoffice : resolve_prereq : true deploy : true ansible.builtin.include_role : name : \"serdigital64.application.app_libreoffice\" ... The playbook can be run by executing: # Set ANSIBLE_COLLECTIONS_PATHS to the default location. Change as needed. ANSIBLE_COLLECTIONS_PATHS = \" ${ HOME } /.ansible/collections\" ansible-playbook \" ${ ANSIBLE_COLLECTIONS_PATHS } /ansible_collections/serdigital64/application/playbooks/app_libreoffice.yml\" Role Parameters \u00b6 Actions \u00b6 Use action-parameters to control what tasks are enabled for the role to execute. Parameters should be declared as task level vars as they are intented to be dynamic. app_libreoffice : resolve_prereq : deploy : Parameter Required? Type Default Purpose / Value app_libreoffice.resolve_prereq no boolean false Enable automatic resolution of prequisites app_libreoffice.deploy no boolean false Enable installation of application packages End State \u00b6 Use end-state parameters to define the target state after role execution. Parameters should be declared in host_vars or group_vars as they are intended to be permanent. app_libreoffice_application : name : type : version : installed : Parameter Required? Type Default Purpose / Value app_libreoffice_application no dictionary Set application package end state app_libreoffice_application.name no string \"libreoffice\" Select application package name app_libreoffice_application.type no string \"flatpak\" Select application package type app_libreoffice_application.installed no boolean true Set application package end state app_libreoffice_application.version no string \"latest\" Select application package version Deployment \u00b6 OS Compatibility \u00b6 CentOS8 RedHat8 AlmaLinux8 OracleLinux8 Ubuntu20 Ubuntu21 Fedora33 Fedora35 Debian10 Debian11 Dependencies \u00b6 Ansible Collections: serdigital64.backup bkp_archive serdigital64.system sys_package sys_repository Prerequisites \u00b6 The Ansible engine must be already installed and configured for privileged access and remote execution. In addition the following prerequisites can be automatically solved when running the playbook by setting the role action: resolve_prereq: true Package manager for the target application is installed and enabled. Installation Procedure \u00b6 Manually install Ansible Collections from the Ansible Galaxy repository: ansible-galaxy collection install --upgrade serdigital64.application Automatic installation is also available by deploying A:Platform64 Contributing \u00b6 Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details. Author \u00b6 SerDigital64 License \u00b6 GPL-3.0-or-later","title":"app_libreoffice"},{"location":"roles/app_libreoffice/#ansible-role-serdigital64applicationapp_libreoffice","text":"","title":"Ansible Role: serdigital64.application.app_libreoffice"},{"location":"roles/app_libreoffice/#purpose","text":"Manage provisioning of the LibreOffice application. Supported features in the current version: Deploy application. Packages are defined in the variable app_libreoffice_profiles . The app_libreoffice Ansible-Role is part of the A:Platform64 project and is available in the application Ansible-Collection.","title":"Purpose"},{"location":"roles/app_libreoffice/#usage","text":"The following example is an Ansible Playbook that includes all the supported features: use this link if viewing the doc on github --- - name : \"Application / LibreOffice / Usage example\" hosts : \"localhost\" gather_facts : true tasks : - name : \"Example: Install LibreOffice\" vars : app_libreoffice : resolve_prereq : true deploy : true ansible.builtin.include_role : name : \"serdigital64.application.app_libreoffice\" ... The playbook can be run by executing: # Set ANSIBLE_COLLECTIONS_PATHS to the default location. Change as needed. ANSIBLE_COLLECTIONS_PATHS = \" ${ HOME } /.ansible/collections\" ansible-playbook \" ${ ANSIBLE_COLLECTIONS_PATHS } /ansible_collections/serdigital64/application/playbooks/app_libreoffice.yml\"","title":"Usage"},{"location":"roles/app_libreoffice/#role-parameters","text":"","title":"Role Parameters"},{"location":"roles/app_libreoffice/#actions","text":"Use action-parameters to control what tasks are enabled for the role to execute. Parameters should be declared as task level vars as they are intented to be dynamic. app_libreoffice : resolve_prereq : deploy : Parameter Required? Type Default Purpose / Value app_libreoffice.resolve_prereq no boolean false Enable automatic resolution of prequisites app_libreoffice.deploy no boolean false Enable installation of application packages","title":"Actions"},{"location":"roles/app_libreoffice/#end-state","text":"Use end-state parameters to define the target state after role execution. Parameters should be declared in host_vars or group_vars as they are intended to be permanent. app_libreoffice_application : name : type : version : installed : Parameter Required? Type Default Purpose / Value app_libreoffice_application no dictionary Set application package end state app_libreoffice_application.name no string \"libreoffice\" Select application package name app_libreoffice_application.type no string \"flatpak\" Select application package type app_libreoffice_application.installed no boolean true Set application package end state app_libreoffice_application.version no string \"latest\" Select application package version","title":"End State"},{"location":"roles/app_libreoffice/#deployment","text":"","title":"Deployment"},{"location":"roles/app_libreoffice/#os-compatibility","text":"CentOS8 RedHat8 AlmaLinux8 OracleLinux8 Ubuntu20 Ubuntu21 Fedora33 Fedora35 Debian10 Debian11","title":"OS Compatibility"},{"location":"roles/app_libreoffice/#dependencies","text":"Ansible Collections: serdigital64.backup bkp_archive serdigital64.system sys_package sys_repository","title":"Dependencies"},{"location":"roles/app_libreoffice/#prerequisites","text":"The Ansible engine must be already installed and configured for privileged access and remote execution. In addition the following prerequisites can be automatically solved when running the playbook by setting the role action: resolve_prereq: true Package manager for the target application is installed and enabled.","title":"Prerequisites"},{"location":"roles/app_libreoffice/#installation-procedure","text":"Manually install Ansible Collections from the Ansible Galaxy repository: ansible-galaxy collection install --upgrade serdigital64.application Automatic installation is also available by deploying A:Platform64","title":"Installation Procedure"},{"location":"roles/app_libreoffice/#contributing","text":"Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details.","title":"Contributing"},{"location":"roles/app_libreoffice/#author","text":"SerDigital64","title":"Author"},{"location":"roles/app_libreoffice/#license","text":"GPL-3.0-or-later","title":"License"},{"location":"roles/app_msteams/","text":"Ansible Role: serdigital64.application.app_msteams \u00b6 Purpose \u00b6 Manage provisioning of the MS Teams application Supported features in the current version: Deploy application. Packages are defined in the variable app_msteams_profiles . The app_msteams Ansible-Role is part of the A:Platform64 project and is available in the application Ansible-Collection. Usage \u00b6 The following example is an Ansible Playbook that includes all the supported features: use this link if viewing the doc on github --- - name : \"Application / MS Teams / Usage example\" hosts : \"localhost\" gather_facts : true tasks : - name : \"Example: Install MS Teams\" vars : app_msteams : resolve_prereq : true deploy : true ansible.builtin.include_role : name : \"serdigital64.application.app_msteams\" ... The playbook can be run by executing: # Set ANSIBLE_COLLECTIONS_PATHS to the default location. Change as needed. ANSIBLE_COLLECTIONS_PATHS = \" ${ HOME } /.ansible/collections\" ansible-playbook \" ${ ANSIBLE_COLLECTIONS_PATHS } /ansible_collections/serdigital64/application/playbooks/app_msteams.yml\" Role Parameters \u00b6 Actions \u00b6 Use action-parameters to control what tasks are enabled for the role to execute. Parameters should be declared as task level vars as they are intented to be dynamic. app_msteams : resolve_prereq : deploy : Parameter Required? Type Default Purpose / Value app_msteams.resolve_prereq no boolean false Enable automatic resolution of prequisites app_msteams.deploy no boolean false Enable installation of application packages End State \u00b6 Use end-state parameters to define the target state after role execution. Parameters should be declared in host_vars or group_vars as they are intended to be permanent. app_msteams_application : name : type : version : installed : Parameter Required? Type Default Purpose / Value app_msteams_application yes(deploy) dictionary Set application package end state app_msteams_application.name yes(deploy) string \"msteams\" Select application package name app_msteams_application.type yes(deploy) string \"flatpak\" Select application package type app_msteams_application.version yes(deploy) string \"latest\" Select application package version app_msteams_application.installed yes(deploy) boolean true Set application package end state Deployment \u00b6 OS Compatibility \u00b6 CentOS8 RedHat8 AlmaLinux8 OracleLinux8 Ubuntu20 Ubuntu21 Fedora33 Fedora35 Debian10 Debian11 Dependencies \u00b6 Ansible Collections: serdigital64.backup bkp_archive serdigital64.system sys_package sys_repository Prerequisites \u00b6 The Ansible engine must be already installed and configured for privileged access and remote execution. In addition the following prerequisites can be automatically solved when running the playbook by setting the role action: resolve_prereq: true Package manager for the target application is installed and enabled. Installation Procedure \u00b6 Manually install Ansible Collections from the Ansible Galaxy repository: ansible-galaxy collection install serdigital64.application Automatic installation is also available by deploying A:Platform64 Contributing \u00b6 Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details. Author \u00b6 SerDigital64 License \u00b6 GPL-3.0-or-later","title":"app_msteams"},{"location":"roles/app_msteams/#ansible-role-serdigital64applicationapp_msteams","text":"","title":"Ansible Role: serdigital64.application.app_msteams"},{"location":"roles/app_msteams/#purpose","text":"Manage provisioning of the MS Teams application Supported features in the current version: Deploy application. Packages are defined in the variable app_msteams_profiles . The app_msteams Ansible-Role is part of the A:Platform64 project and is available in the application Ansible-Collection.","title":"Purpose"},{"location":"roles/app_msteams/#usage","text":"The following example is an Ansible Playbook that includes all the supported features: use this link if viewing the doc on github --- - name : \"Application / MS Teams / Usage example\" hosts : \"localhost\" gather_facts : true tasks : - name : \"Example: Install MS Teams\" vars : app_msteams : resolve_prereq : true deploy : true ansible.builtin.include_role : name : \"serdigital64.application.app_msteams\" ... The playbook can be run by executing: # Set ANSIBLE_COLLECTIONS_PATHS to the default location. Change as needed. ANSIBLE_COLLECTIONS_PATHS = \" ${ HOME } /.ansible/collections\" ansible-playbook \" ${ ANSIBLE_COLLECTIONS_PATHS } /ansible_collections/serdigital64/application/playbooks/app_msteams.yml\"","title":"Usage"},{"location":"roles/app_msteams/#role-parameters","text":"","title":"Role Parameters"},{"location":"roles/app_msteams/#actions","text":"Use action-parameters to control what tasks are enabled for the role to execute. Parameters should be declared as task level vars as they are intented to be dynamic. app_msteams : resolve_prereq : deploy : Parameter Required? Type Default Purpose / Value app_msteams.resolve_prereq no boolean false Enable automatic resolution of prequisites app_msteams.deploy no boolean false Enable installation of application packages","title":"Actions"},{"location":"roles/app_msteams/#end-state","text":"Use end-state parameters to define the target state after role execution. Parameters should be declared in host_vars or group_vars as they are intended to be permanent. app_msteams_application : name : type : version : installed : Parameter Required? Type Default Purpose / Value app_msteams_application yes(deploy) dictionary Set application package end state app_msteams_application.name yes(deploy) string \"msteams\" Select application package name app_msteams_application.type yes(deploy) string \"flatpak\" Select application package type app_msteams_application.version yes(deploy) string \"latest\" Select application package version app_msteams_application.installed yes(deploy) boolean true Set application package end state","title":"End State"},{"location":"roles/app_msteams/#deployment","text":"","title":"Deployment"},{"location":"roles/app_msteams/#os-compatibility","text":"CentOS8 RedHat8 AlmaLinux8 OracleLinux8 Ubuntu20 Ubuntu21 Fedora33 Fedora35 Debian10 Debian11","title":"OS Compatibility"},{"location":"roles/app_msteams/#dependencies","text":"Ansible Collections: serdigital64.backup bkp_archive serdigital64.system sys_package sys_repository","title":"Dependencies"},{"location":"roles/app_msteams/#prerequisites","text":"The Ansible engine must be already installed and configured for privileged access and remote execution. In addition the following prerequisites can be automatically solved when running the playbook by setting the role action: resolve_prereq: true Package manager for the target application is installed and enabled.","title":"Prerequisites"},{"location":"roles/app_msteams/#installation-procedure","text":"Manually install Ansible Collections from the Ansible Galaxy repository: ansible-galaxy collection install serdigital64.application Automatic installation is also available by deploying A:Platform64","title":"Installation Procedure"},{"location":"roles/app_msteams/#contributing","text":"Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details.","title":"Contributing"},{"location":"roles/app_msteams/#author","text":"SerDigital64","title":"Author"},{"location":"roles/app_msteams/#license","text":"GPL-3.0-or-later","title":"License"},{"location":"roles/app_obs/","text":"Ansible Role: serdigital64.application.app_obs \u00b6 Purpose \u00b6 Manage provisioning of the OBS application. Supported features in the current version: Deploy application. Packages are defined in the variable app_obs_profiles . The app_obs Ansible-Role is part of the A:Platform64 project and is available in the application Ansible-Collection. Usage \u00b6 The following example is an Ansible Playbook that includes all the supported features: use this link if viewing the doc on github --- - name : \"Application / OBS / Usage example\" hosts : \"localhost\" gather_facts : true tasks : - name : \"Example: Install OBS\" vars : app_obs : resolve_prereq : true deploy : true ansible.builtin.include_role : name : \"serdigital64.application.app_obs\" ... The playbook can be run by executing: # Set ANSIBLE_COLLECTIONS_PATHS to the default location. Change as needed. ANSIBLE_COLLECTIONS_PATHS = \" ${ HOME } /.ansible/collections\" ansible-playbook \" ${ ANSIBLE_COLLECTIONS_PATHS } /ansible_collections/serdigital64/application/playbooks/app_obs.yml\" Role Parameters \u00b6 Actions \u00b6 Use action-parameters to control what tasks are enabled for the role to execute. Parameters should be declared as task level vars as they are intented to be dynamic. app_obs : resolve_prereq : deploy : Parameter Required? Type Default Purpose / Value app_obs.resolve_prereq no boolean false Enable automatic resolution of prequisites app_obs.deploy no boolean false Enable installation of application packages End State \u00b6 Use end-state parameters to define the target state after role execution. Parameters should be declared in host_vars or group_vars as they are intended to be permanent. app_obs_application : name : type : version : installed : Parameter Required? Type Default Purpose / Value app_obs_application no dictionary Set application package end state app_obs_application.name no string \"obs\" Select application package name app_obs_application.type no string \"flatpak\" Select application package type app_obs_application.installed no boolean true Set application package end state app_obs_application.version no string \"latest\" Select application package version Deployment \u00b6 OS Compatibility \u00b6 CentOS8 RedHat8 AlmaLinux8 OracleLinux8 Ubuntu20 Ubuntu21 Fedora33 Fedora35 Debian10 Debian11 Dependencies \u00b6 Ansible Collections: serdigital64.backup bkp_archive serdigital64.system sys_package sys_repository Prerequisites \u00b6 The Ansible engine must be already installed and configured for privileged access and remote execution. In addition the following prerequisites can be automatically solved when running the playbook by setting the role action: resolve_prereq: true Package manager for the target application is installed and enabled. Installation Procedure \u00b6 Manually install Ansible Collections from the Ansible Galaxy repository: ansible-galaxy collection install --upgrade serdigital64.application Automatic installation is also available by deploying A:Platform64 Contributing \u00b6 Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details. Author \u00b6 SerDigital64 License \u00b6 GPL-3.0-or-later","title":"app_obs"},{"location":"roles/app_obs/#ansible-role-serdigital64applicationapp_obs","text":"","title":"Ansible Role: serdigital64.application.app_obs"},{"location":"roles/app_obs/#purpose","text":"Manage provisioning of the OBS application. Supported features in the current version: Deploy application. Packages are defined in the variable app_obs_profiles . The app_obs Ansible-Role is part of the A:Platform64 project and is available in the application Ansible-Collection.","title":"Purpose"},{"location":"roles/app_obs/#usage","text":"The following example is an Ansible Playbook that includes all the supported features: use this link if viewing the doc on github --- - name : \"Application / OBS / Usage example\" hosts : \"localhost\" gather_facts : true tasks : - name : \"Example: Install OBS\" vars : app_obs : resolve_prereq : true deploy : true ansible.builtin.include_role : name : \"serdigital64.application.app_obs\" ... The playbook can be run by executing: # Set ANSIBLE_COLLECTIONS_PATHS to the default location. Change as needed. ANSIBLE_COLLECTIONS_PATHS = \" ${ HOME } /.ansible/collections\" ansible-playbook \" ${ ANSIBLE_COLLECTIONS_PATHS } /ansible_collections/serdigital64/application/playbooks/app_obs.yml\"","title":"Usage"},{"location":"roles/app_obs/#role-parameters","text":"","title":"Role Parameters"},{"location":"roles/app_obs/#actions","text":"Use action-parameters to control what tasks are enabled for the role to execute. Parameters should be declared as task level vars as they are intented to be dynamic. app_obs : resolve_prereq : deploy : Parameter Required? Type Default Purpose / Value app_obs.resolve_prereq no boolean false Enable automatic resolution of prequisites app_obs.deploy no boolean false Enable installation of application packages","title":"Actions"},{"location":"roles/app_obs/#end-state","text":"Use end-state parameters to define the target state after role execution. Parameters should be declared in host_vars or group_vars as they are intended to be permanent. app_obs_application : name : type : version : installed : Parameter Required? Type Default Purpose / Value app_obs_application no dictionary Set application package end state app_obs_application.name no string \"obs\" Select application package name app_obs_application.type no string \"flatpak\" Select application package type app_obs_application.installed no boolean true Set application package end state app_obs_application.version no string \"latest\" Select application package version","title":"End State"},{"location":"roles/app_obs/#deployment","text":"","title":"Deployment"},{"location":"roles/app_obs/#os-compatibility","text":"CentOS8 RedHat8 AlmaLinux8 OracleLinux8 Ubuntu20 Ubuntu21 Fedora33 Fedora35 Debian10 Debian11","title":"OS Compatibility"},{"location":"roles/app_obs/#dependencies","text":"Ansible Collections: serdigital64.backup bkp_archive serdigital64.system sys_package sys_repository","title":"Dependencies"},{"location":"roles/app_obs/#prerequisites","text":"The Ansible engine must be already installed and configured for privileged access and remote execution. In addition the following prerequisites can be automatically solved when running the playbook by setting the role action: resolve_prereq: true Package manager for the target application is installed and enabled.","title":"Prerequisites"},{"location":"roles/app_obs/#installation-procedure","text":"Manually install Ansible Collections from the Ansible Galaxy repository: ansible-galaxy collection install --upgrade serdigital64.application Automatic installation is also available by deploying A:Platform64","title":"Installation Procedure"},{"location":"roles/app_obs/#contributing","text":"Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details.","title":"Contributing"},{"location":"roles/app_obs/#author","text":"SerDigital64","title":"Author"},{"location":"roles/app_obs/#license","text":"GPL-3.0-or-later","title":"License"},{"location":"roles/app_pinta/","text":"Ansible Role: serdigital64.application.app_pinta \u00b6 Purpose \u00b6 Manage provisioning of the Pinta application. Supported features in the current version: Deploy application. Packages are defined in the variable app_pinta_profiles . The app_pinta Ansible-Role is part of the A:Platform64 project and is available in the application Ansible-Collection. Usage \u00b6 The following example is an Ansible Playbook that includes all the supported features: use this link if viewing the doc on github --- - name : \"Application / Pinta / Usage example\" hosts : \"localhost\" gather_facts : true tasks : - name : \"Example: Install Pinta\" vars : app_pinta : resolve_prereq : true deploy : true ansible.builtin.include_role : name : \"serdigital64.application.app_pinta\" ... The playbook can be run by executing: # Set ANSIBLE_COLLECTIONS_PATHS to the default location. Change as needed. ANSIBLE_COLLECTIONS_PATHS = \" ${ HOME } /.ansible/collections\" ansible-playbook \" ${ ANSIBLE_COLLECTIONS_PATHS } /ansible_collections/serdigital64/application/playbooks/app_pinta.yml\" Role Parameters \u00b6 Actions \u00b6 Use action-parameters to control what tasks are enabled for the role to execute. Parameters should be declared as task level vars as they are intented to be dynamic. app_pinta : resolve_prereq : deploy : Parameter Required? Type Default Purpose / Value app_pinta.resolve_prereq no boolean false Enable automatic resolution of prequisites app_pinta.deploy no boolean false Enable installation of application packages End State \u00b6 Use end-state parameters to define the target state after role execution. Parameters should be declared in host_vars or group_vars as they are intended to be permanent. app_pinta_application : name : type : version : installed : Parameter Required? Type Default Purpose / Value app_pinta_application yes(deploy) dictionary Set application package end state app_pinta_application.name yes string \"pinta\" Select application package name app_pinta_application.type yes string \"flatpak\" Select application package type app_pinta_application.version yes string \"latest\" Select application package version app_pinta_application.installed yes boolean true Set application package end state Deployment \u00b6 OS Compatibility \u00b6 CentOS8 RedHat8 AlmaLinux8 OracleLinux8 Ubuntu20 Ubuntu21 Fedora33 Fedora35 Debian10 Debian11 Dependencies \u00b6 Ansible Collections: serdigital64.backup bkp_archive serdigital64.system sys_package sys_repository Prerequisites \u00b6 The Ansible engine must be already installed and configured for privileged access and remote execution. In addition the following prerequisites can be automatically solved when running the playbook by setting the role action: resolve_prereq: true Package manager for the target application is installed and enabled. Installation Procedure \u00b6 Manually install Ansible Collections from the Ansible Galaxy repository: ansible-galaxy collection install serdigital64.application Automatic installation is also available by deploying A:Platform64 Contributing \u00b6 Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details. Author \u00b6 SerDigital64 License \u00b6 GPL-3.0-or-later","title":"app_pinta"},{"location":"roles/app_pinta/#ansible-role-serdigital64applicationapp_pinta","text":"","title":"Ansible Role: serdigital64.application.app_pinta"},{"location":"roles/app_pinta/#purpose","text":"Manage provisioning of the Pinta application. Supported features in the current version: Deploy application. Packages are defined in the variable app_pinta_profiles . The app_pinta Ansible-Role is part of the A:Platform64 project and is available in the application Ansible-Collection.","title":"Purpose"},{"location":"roles/app_pinta/#usage","text":"The following example is an Ansible Playbook that includes all the supported features: use this link if viewing the doc on github --- - name : \"Application / Pinta / Usage example\" hosts : \"localhost\" gather_facts : true tasks : - name : \"Example: Install Pinta\" vars : app_pinta : resolve_prereq : true deploy : true ansible.builtin.include_role : name : \"serdigital64.application.app_pinta\" ... The playbook can be run by executing: # Set ANSIBLE_COLLECTIONS_PATHS to the default location. Change as needed. ANSIBLE_COLLECTIONS_PATHS = \" ${ HOME } /.ansible/collections\" ansible-playbook \" ${ ANSIBLE_COLLECTIONS_PATHS } /ansible_collections/serdigital64/application/playbooks/app_pinta.yml\"","title":"Usage"},{"location":"roles/app_pinta/#role-parameters","text":"","title":"Role Parameters"},{"location":"roles/app_pinta/#actions","text":"Use action-parameters to control what tasks are enabled for the role to execute. Parameters should be declared as task level vars as they are intented to be dynamic. app_pinta : resolve_prereq : deploy : Parameter Required? Type Default Purpose / Value app_pinta.resolve_prereq no boolean false Enable automatic resolution of prequisites app_pinta.deploy no boolean false Enable installation of application packages","title":"Actions"},{"location":"roles/app_pinta/#end-state","text":"Use end-state parameters to define the target state after role execution. Parameters should be declared in host_vars or group_vars as they are intended to be permanent. app_pinta_application : name : type : version : installed : Parameter Required? Type Default Purpose / Value app_pinta_application yes(deploy) dictionary Set application package end state app_pinta_application.name yes string \"pinta\" Select application package name app_pinta_application.type yes string \"flatpak\" Select application package type app_pinta_application.version yes string \"latest\" Select application package version app_pinta_application.installed yes boolean true Set application package end state","title":"End State"},{"location":"roles/app_pinta/#deployment","text":"","title":"Deployment"},{"location":"roles/app_pinta/#os-compatibility","text":"CentOS8 RedHat8 AlmaLinux8 OracleLinux8 Ubuntu20 Ubuntu21 Fedora33 Fedora35 Debian10 Debian11","title":"OS Compatibility"},{"location":"roles/app_pinta/#dependencies","text":"Ansible Collections: serdigital64.backup bkp_archive serdigital64.system sys_package sys_repository","title":"Dependencies"},{"location":"roles/app_pinta/#prerequisites","text":"The Ansible engine must be already installed and configured for privileged access and remote execution. In addition the following prerequisites can be automatically solved when running the playbook by setting the role action: resolve_prereq: true Package manager for the target application is installed and enabled.","title":"Prerequisites"},{"location":"roles/app_pinta/#installation-procedure","text":"Manually install Ansible Collections from the Ansible Galaxy repository: ansible-galaxy collection install serdigital64.application Automatic installation is also available by deploying A:Platform64","title":"Installation Procedure"},{"location":"roles/app_pinta/#contributing","text":"Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details.","title":"Contributing"},{"location":"roles/app_pinta/#author","text":"SerDigital64","title":"Author"},{"location":"roles/app_pinta/#license","text":"GPL-3.0-or-later","title":"License"},{"location":"roles/app_pitivi/","text":"Ansible Role: serdigital64.application.app_pitivi \u00b6 Purpose \u00b6 Manage provisioning of the Pitivi application. Supported features in the current version: Deploy application. Packages are defined in the variable app_pitivi_profiles . The app_pitivi Ansible-Role is part of the A:Platform64 project and is available in the application Ansible-Collection. Usage \u00b6 The following example is an Ansible Playbook that includes all the supported features: use this link if viewing the doc on github --- - name : \"Application / Pitivi / Usage example\" hosts : \"localhost\" gather_facts : true tasks : - name : \"Example: Install Pitivi\" vars : app_pitivi : resolve_prereq : true deploy : true ansible.builtin.include_role : name : \"serdigital64.application.app_pitivi\" ... The playbook can be run by executing: # Set ANSIBLE_COLLECTIONS_PATHS to the default location. Change as needed. ANSIBLE_COLLECTIONS_PATHS = \" ${ HOME } /.ansible/collections\" ansible-playbook \" ${ ANSIBLE_COLLECTIONS_PATHS } /ansible_collections/serdigital64/application/playbooks/app_pitivi.yml\" Role Parameters \u00b6 Actions \u00b6 Use action-parameters to control what tasks are enabled for the role to execute. Parameters should be declared as task level vars as they are intented to be dynamic. app_pitivi : resolve_prereq : deploy : Parameter Required? Type Default Purpose / Value app_pitivi.resolve_prereq no boolean false Enable automatic resolution of prequisites app_pitivi.deploy no boolean false Enable installation of application packages End State \u00b6 Use end-state parameters to define the target state after role execution. Parameters should be declared in host_vars or group_vars as they are intended to be permanent. app_pitivi_application : name : type : version : installed : Parameter Required? Type Default Purpose / Value app_pitivi_application yes(deploy) dictionary Set application package end state app_pitivi_application.name yes string \"pitivi\" Select application package name app_pitivi_application.type yes string \"flatpak\" Select application package type app_pitivi_application.version yes string \"latest\" Select application package version app_pitivi_application.installed yes boolean true Set application package end state Deployment \u00b6 OS Compatibility \u00b6 CentOS8 RedHat8 AlmaLinux8 OracleLinux8 Ubuntu20 Ubuntu21 Fedora33 Fedora35 Debian10 Debian11 Dependencies \u00b6 Ansible Collections: serdigital64.backup bkp_archive serdigital64.system sys_package sys_repository Prerequisites \u00b6 The Ansible engine must be already installed and configured for privileged access and remote execution. In addition the following prerequisites can be automatically solved when running the playbook by setting the role action: resolve_prereq: true Package manager for the target application is installed and enabled. Installation Procedure \u00b6 Manually install Ansible Collections from the Ansible Galaxy repository: ansible-galaxy collection install serdigital64.application Automatic installation is also available by deploying A:Platform64 Contributing \u00b6 Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details. Author \u00b6 SerDigital64 License \u00b6 GPL-3.0-or-later","title":"app_pitivi"},{"location":"roles/app_pitivi/#ansible-role-serdigital64applicationapp_pitivi","text":"","title":"Ansible Role: serdigital64.application.app_pitivi"},{"location":"roles/app_pitivi/#purpose","text":"Manage provisioning of the Pitivi application. Supported features in the current version: Deploy application. Packages are defined in the variable app_pitivi_profiles . The app_pitivi Ansible-Role is part of the A:Platform64 project and is available in the application Ansible-Collection.","title":"Purpose"},{"location":"roles/app_pitivi/#usage","text":"The following example is an Ansible Playbook that includes all the supported features: use this link if viewing the doc on github --- - name : \"Application / Pitivi / Usage example\" hosts : \"localhost\" gather_facts : true tasks : - name : \"Example: Install Pitivi\" vars : app_pitivi : resolve_prereq : true deploy : true ansible.builtin.include_role : name : \"serdigital64.application.app_pitivi\" ... The playbook can be run by executing: # Set ANSIBLE_COLLECTIONS_PATHS to the default location. Change as needed. ANSIBLE_COLLECTIONS_PATHS = \" ${ HOME } /.ansible/collections\" ansible-playbook \" ${ ANSIBLE_COLLECTIONS_PATHS } /ansible_collections/serdigital64/application/playbooks/app_pitivi.yml\"","title":"Usage"},{"location":"roles/app_pitivi/#role-parameters","text":"","title":"Role Parameters"},{"location":"roles/app_pitivi/#actions","text":"Use action-parameters to control what tasks are enabled for the role to execute. Parameters should be declared as task level vars as they are intented to be dynamic. app_pitivi : resolve_prereq : deploy : Parameter Required? Type Default Purpose / Value app_pitivi.resolve_prereq no boolean false Enable automatic resolution of prequisites app_pitivi.deploy no boolean false Enable installation of application packages","title":"Actions"},{"location":"roles/app_pitivi/#end-state","text":"Use end-state parameters to define the target state after role execution. Parameters should be declared in host_vars or group_vars as they are intended to be permanent. app_pitivi_application : name : type : version : installed : Parameter Required? Type Default Purpose / Value app_pitivi_application yes(deploy) dictionary Set application package end state app_pitivi_application.name yes string \"pitivi\" Select application package name app_pitivi_application.type yes string \"flatpak\" Select application package type app_pitivi_application.version yes string \"latest\" Select application package version app_pitivi_application.installed yes boolean true Set application package end state","title":"End State"},{"location":"roles/app_pitivi/#deployment","text":"","title":"Deployment"},{"location":"roles/app_pitivi/#os-compatibility","text":"CentOS8 RedHat8 AlmaLinux8 OracleLinux8 Ubuntu20 Ubuntu21 Fedora33 Fedora35 Debian10 Debian11","title":"OS Compatibility"},{"location":"roles/app_pitivi/#dependencies","text":"Ansible Collections: serdigital64.backup bkp_archive serdigital64.system sys_package sys_repository","title":"Dependencies"},{"location":"roles/app_pitivi/#prerequisites","text":"The Ansible engine must be already installed and configured for privileged access and remote execution. In addition the following prerequisites can be automatically solved when running the playbook by setting the role action: resolve_prereq: true Package manager for the target application is installed and enabled.","title":"Prerequisites"},{"location":"roles/app_pitivi/#installation-procedure","text":"Manually install Ansible Collections from the Ansible Galaxy repository: ansible-galaxy collection install serdigital64.application Automatic installation is also available by deploying A:Platform64","title":"Installation Procedure"},{"location":"roles/app_pitivi/#contributing","text":"Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details.","title":"Contributing"},{"location":"roles/app_pitivi/#author","text":"SerDigital64","title":"Author"},{"location":"roles/app_pitivi/#license","text":"GPL-3.0-or-later","title":"License"},{"location":"roles/app_shotcut/","text":"Ansible Role: serdigital64.application.app_shotcut \u00b6 Purpose \u00b6 Manage provisioning of the ShotCut application. Supported features in the current version: Deploy application. Packages are defined in the variable app_shotcut_profiles . The app_shotcut Ansible-Role is part of the A:Platform64 project and is available in the application Ansible-Collection. Usage \u00b6 The following example is an Ansible Playbook that includes all the supported features: use this link if viewing the doc on github --- - name : \"Application / ShotCut / Usage example\" hosts : \"localhost\" gather_facts : true tasks : - name : \"Example: Install ShotCut\" vars : app_shotcut : resolve_prereq : true deploy : true ansible.builtin.include_role : name : \"serdigital64.application.app_shotcut\" ... The playbook can be run by executing: # Set ANSIBLE_COLLECTIONS_PATHS to the default location. Change as needed. ANSIBLE_COLLECTIONS_PATHS = \" ${ HOME } /.ansible/collections\" ansible-playbook \" ${ ANSIBLE_COLLECTIONS_PATHS } /ansible_collections/serdigital64/application/playbooks/app_shotcut.yml\" Role Parameters \u00b6 Actions \u00b6 Use action-parameters to control what tasks are enabled for the role to execute. Parameters should be declared as task level vars as they are intented to be dynamic. app_shotcut : resolve_prereq : deploy : Parameter Required? Type Default Purpose / Value app_shotcut.resolve_prereq no boolean false Enable automatic resolution of prequisites app_shotcut.deploy no boolean false Enable installation of application packages End State \u00b6 Use end-state parameters to define the target state after role execution. Parameters should be declared in host_vars or group_vars as they are intended to be permanent. app_shotcut_application : name : type : version : installed : Parameter Required? Type Default Purpose / Value app_shotcut_application no dictionary Set application package end state app_shotcut_application.name no string \"shotcut\" Select application package name app_shotcut_application.type no string \"flatpak\" Select application package type app_shotcut_application.version no string \"latest\" Select application package version app_shotcut_application.installed no boolean true Set application package end state Deployment \u00b6 OS Compatibility \u00b6 CentOS8 RedHat8 AlmaLinux8 OracleLinux8 Ubuntu20 Ubuntu21 Fedora33 Fedora35 Debian10 Debian11 Dependencies \u00b6 Ansible Collections: serdigital64.backup bkp_archive serdigital64.system sys_package sys_repository Prerequisites \u00b6 The Ansible engine must be already installed and configured for privileged access and remote execution. In addition the following prerequisites can be automatically solved when running the playbook by setting the role action: resolve_prereq: true Package manager for the target application is installed and enabled. Installation Procedure \u00b6 Manually install Ansible Collections from the Ansible Galaxy repository: ansible-galaxy collection install --upgrade serdigital64.application Automatic installation is also available by deploying A:Platform64 Contributing \u00b6 Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details. Author \u00b6 SerDigital64 License \u00b6 GPL-3.0-or-later","title":"app_shotcut"},{"location":"roles/app_shotcut/#ansible-role-serdigital64applicationapp_shotcut","text":"","title":"Ansible Role: serdigital64.application.app_shotcut"},{"location":"roles/app_shotcut/#purpose","text":"Manage provisioning of the ShotCut application. Supported features in the current version: Deploy application. Packages are defined in the variable app_shotcut_profiles . The app_shotcut Ansible-Role is part of the A:Platform64 project and is available in the application Ansible-Collection.","title":"Purpose"},{"location":"roles/app_shotcut/#usage","text":"The following example is an Ansible Playbook that includes all the supported features: use this link if viewing the doc on github --- - name : \"Application / ShotCut / Usage example\" hosts : \"localhost\" gather_facts : true tasks : - name : \"Example: Install ShotCut\" vars : app_shotcut : resolve_prereq : true deploy : true ansible.builtin.include_role : name : \"serdigital64.application.app_shotcut\" ... The playbook can be run by executing: # Set ANSIBLE_COLLECTIONS_PATHS to the default location. Change as needed. ANSIBLE_COLLECTIONS_PATHS = \" ${ HOME } /.ansible/collections\" ansible-playbook \" ${ ANSIBLE_COLLECTIONS_PATHS } /ansible_collections/serdigital64/application/playbooks/app_shotcut.yml\"","title":"Usage"},{"location":"roles/app_shotcut/#role-parameters","text":"","title":"Role Parameters"},{"location":"roles/app_shotcut/#actions","text":"Use action-parameters to control what tasks are enabled for the role to execute. Parameters should be declared as task level vars as they are intented to be dynamic. app_shotcut : resolve_prereq : deploy : Parameter Required? Type Default Purpose / Value app_shotcut.resolve_prereq no boolean false Enable automatic resolution of prequisites app_shotcut.deploy no boolean false Enable installation of application packages","title":"Actions"},{"location":"roles/app_shotcut/#end-state","text":"Use end-state parameters to define the target state after role execution. Parameters should be declared in host_vars or group_vars as they are intended to be permanent. app_shotcut_application : name : type : version : installed : Parameter Required? Type Default Purpose / Value app_shotcut_application no dictionary Set application package end state app_shotcut_application.name no string \"shotcut\" Select application package name app_shotcut_application.type no string \"flatpak\" Select application package type app_shotcut_application.version no string \"latest\" Select application package version app_shotcut_application.installed no boolean true Set application package end state","title":"End State"},{"location":"roles/app_shotcut/#deployment","text":"","title":"Deployment"},{"location":"roles/app_shotcut/#os-compatibility","text":"CentOS8 RedHat8 AlmaLinux8 OracleLinux8 Ubuntu20 Ubuntu21 Fedora33 Fedora35 Debian10 Debian11","title":"OS Compatibility"},{"location":"roles/app_shotcut/#dependencies","text":"Ansible Collections: serdigital64.backup bkp_archive serdigital64.system sys_package sys_repository","title":"Dependencies"},{"location":"roles/app_shotcut/#prerequisites","text":"The Ansible engine must be already installed and configured for privileged access and remote execution. In addition the following prerequisites can be automatically solved when running the playbook by setting the role action: resolve_prereq: true Package manager for the target application is installed and enabled.","title":"Prerequisites"},{"location":"roles/app_shotcut/#installation-procedure","text":"Manually install Ansible Collections from the Ansible Galaxy repository: ansible-galaxy collection install --upgrade serdigital64.application Automatic installation is also available by deploying A:Platform64","title":"Installation Procedure"},{"location":"roles/app_shotcut/#contributing","text":"Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details.","title":"Contributing"},{"location":"roles/app_shotcut/#author","text":"SerDigital64","title":"Author"},{"location":"roles/app_shotcut/#license","text":"GPL-3.0-or-later","title":"License"},{"location":"roles/app_skype/","text":"Ansible Role: serdigital64.application.app_skype \u00b6 Purpose \u00b6 Manage provisioning of the Skype application. Supported features in the current version: Deploy application. Packages are defined in the variable app_skype_profiles . The app_skype Ansible-Role is part of the A:Platform64 project and is available in the application Ansible-Collection. Usage \u00b6 The following example is an Ansible Playbook that includes all the supported features: use this link if viewing the doc on github --- - name : \"Application / Skype / Usage example\" hosts : \"localhost\" gather_facts : true tasks : - name : \"Example: Install Skype\" vars : app_skype : resolve_prereq : true deploy : true ansible.builtin.include_role : name : \"serdigital64.application.app_skype\" ... The playbook can be run by executing: # Set ANSIBLE_COLLECTIONS_PATHS to the default location. Change as needed. ANSIBLE_COLLECTIONS_PATHS = \" ${ HOME } /.ansible/collections\" ansible-playbook \" ${ ANSIBLE_COLLECTIONS_PATHS } /ansible_collections/serdigital64/application/playbooks/app_skype.yml\" Role Parameters \u00b6 Actions \u00b6 Use action-parameters to control what tasks are enabled for the role to execute. Parameters should be declared as task level vars as they are intented to be dynamic. app_skype : resolve_prereq : deploy : Parameter Required? Type Default Purpose / Value app_skype.resolve_prereq no boolean false Enable automatic resolution of prequisites app_skype.deploy no boolean false Enable installation of application packages End State \u00b6 Use end-state parameters to define the target state after role execution. Parameters should be declared in host_vars or group_vars as they are intended to be permanent. app_skype_application : name : type : version : installed : Parameter Required? Type Default Purpose / Value app_skype_application no dictionary Set application package end state app_skype_application.name no string \"skype\" Select application package name app_skype_application.type no string \"flatpak\" Select application package type app_skype_application.version no string \"latest\" Select application package version app_skype_application.installed no boolean true Set application package end state Deployment \u00b6 OS Compatibility \u00b6 CentOS8 RedHat8 AlmaLinux8 OracleLinux8 Ubuntu20 Ubuntu21 Fedora33 Fedora35 Debian10 Debian11 Dependencies \u00b6 Ansible Collections: serdigital64.backup bkp_archive serdigital64.system sys_package sys_repository Prerequisites \u00b6 The Ansible engine must be already installed and configured for privileged access and remote execution. In addition the following prerequisites can be automatically solved when running the playbook by setting the role action: resolve_prereq: true Package manager for the target application is installed and enabled. Installation Procedure \u00b6 Manually install Ansible Collections from the Ansible Galaxy repository: ansible-galaxy collection install --upgrade serdigital64.application Automatic installation is also available by deploying A:Platform64 Contributing \u00b6 Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details. Author \u00b6 SerDigital64 License \u00b6 GPL-3.0-or-later","title":"app_skype"},{"location":"roles/app_skype/#ansible-role-serdigital64applicationapp_skype","text":"","title":"Ansible Role: serdigital64.application.app_skype"},{"location":"roles/app_skype/#purpose","text":"Manage provisioning of the Skype application. Supported features in the current version: Deploy application. Packages are defined in the variable app_skype_profiles . The app_skype Ansible-Role is part of the A:Platform64 project and is available in the application Ansible-Collection.","title":"Purpose"},{"location":"roles/app_skype/#usage","text":"The following example is an Ansible Playbook that includes all the supported features: use this link if viewing the doc on github --- - name : \"Application / Skype / Usage example\" hosts : \"localhost\" gather_facts : true tasks : - name : \"Example: Install Skype\" vars : app_skype : resolve_prereq : true deploy : true ansible.builtin.include_role : name : \"serdigital64.application.app_skype\" ... The playbook can be run by executing: # Set ANSIBLE_COLLECTIONS_PATHS to the default location. Change as needed. ANSIBLE_COLLECTIONS_PATHS = \" ${ HOME } /.ansible/collections\" ansible-playbook \" ${ ANSIBLE_COLLECTIONS_PATHS } /ansible_collections/serdigital64/application/playbooks/app_skype.yml\"","title":"Usage"},{"location":"roles/app_skype/#role-parameters","text":"","title":"Role Parameters"},{"location":"roles/app_skype/#actions","text":"Use action-parameters to control what tasks are enabled for the role to execute. Parameters should be declared as task level vars as they are intented to be dynamic. app_skype : resolve_prereq : deploy : Parameter Required? Type Default Purpose / Value app_skype.resolve_prereq no boolean false Enable automatic resolution of prequisites app_skype.deploy no boolean false Enable installation of application packages","title":"Actions"},{"location":"roles/app_skype/#end-state","text":"Use end-state parameters to define the target state after role execution. Parameters should be declared in host_vars or group_vars as they are intended to be permanent. app_skype_application : name : type : version : installed : Parameter Required? Type Default Purpose / Value app_skype_application no dictionary Set application package end state app_skype_application.name no string \"skype\" Select application package name app_skype_application.type no string \"flatpak\" Select application package type app_skype_application.version no string \"latest\" Select application package version app_skype_application.installed no boolean true Set application package end state","title":"End State"},{"location":"roles/app_skype/#deployment","text":"","title":"Deployment"},{"location":"roles/app_skype/#os-compatibility","text":"CentOS8 RedHat8 AlmaLinux8 OracleLinux8 Ubuntu20 Ubuntu21 Fedora33 Fedora35 Debian10 Debian11","title":"OS Compatibility"},{"location":"roles/app_skype/#dependencies","text":"Ansible Collections: serdigital64.backup bkp_archive serdigital64.system sys_package sys_repository","title":"Dependencies"},{"location":"roles/app_skype/#prerequisites","text":"The Ansible engine must be already installed and configured for privileged access and remote execution. In addition the following prerequisites can be automatically solved when running the playbook by setting the role action: resolve_prereq: true Package manager for the target application is installed and enabled.","title":"Prerequisites"},{"location":"roles/app_skype/#installation-procedure","text":"Manually install Ansible Collections from the Ansible Galaxy repository: ansible-galaxy collection install --upgrade serdigital64.application Automatic installation is also available by deploying A:Platform64","title":"Installation Procedure"},{"location":"roles/app_skype/#contributing","text":"Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details.","title":"Contributing"},{"location":"roles/app_skype/#author","text":"SerDigital64","title":"Author"},{"location":"roles/app_skype/#license","text":"GPL-3.0-or-later","title":"License"},{"location":"roles/app_slack/","text":"Ansible Role: serdigital64.application.app_slack \u00b6 Purpose \u00b6 Manage provisioning of the Slack application. Supported features in the current version: Deploy application. Packages are defined in the variable app_slack_profiles . The app_slack Ansible-Role is part of the A:Platform64 project and is available in the application Ansible-Collection. Usage \u00b6 The following example is an Ansible Playbook that includes all the supported features: use this link if viewing the doc on github --- - name : \"Application / Slack / Usage example\" hosts : \"localhost\" gather_facts : true tasks : - name : \"Example: Install Slack\" vars : app_slack : resolve_prereq : true deploy : true ansible.builtin.include_role : name : \"serdigital64.application.app_slack\" ... The playbook can be run by executing: # Set ANSIBLE_COLLECTIONS_PATHS to the default location. Change as needed. ANSIBLE_COLLECTIONS_PATHS = \" ${ HOME } /.ansible/collections\" ansible-playbook \" ${ ANSIBLE_COLLECTIONS_PATHS } /ansible_collections/serdigital64/application/playbooks/app_slack.yml\" Role Parameters \u00b6 Actions \u00b6 Use action-parameters to control what tasks are enabled for the role to execute. Parameters should be declared as task level vars as they are intented to be dynamic. app_slack : resolve_prereq : deploy : Parameter Required? Type Default Purpose / Value app_slack.resolve_prereq no boolean false Enable automatic resolution of prequisites app_slack.deploy no boolean false Enable installation of application packages End State \u00b6 Use end-state parameters to define the target state after role execution. Parameters should be declared in host_vars or group_vars as they are intended to be permanent. app_slack_application : name : type : version : installed : Parameter Required? Type Default Purpose / Value app_slack_application yes(deploy) dictionary Set application package end state app_slack_application.name yes string \"slack\" Select application package name app_slack_application.type yes string \"flatpak\" Select application package type app_slack_application.version yes string \"latest\" Select application package version app_slack_application.installed yes boolean true Set application package end state Deployment \u00b6 OS Compatibility \u00b6 CentOS8 RedHat8 AlmaLinux8 OracleLinux8 Ubuntu20 Ubuntu21 Fedora33 Fedora35 Debian10 Debian11 Dependencies \u00b6 Ansible Collections: serdigital64.backup bkp_archive serdigital64.system sys_package sys_repository Prerequisites \u00b6 The Ansible engine must be already installed and configured for privileged access and remote execution. In addition the following prerequisites can be automatically solved when running the playbook by setting the role action: resolve_prereq: true Package manager for the target application is installed and enabled. Installation Procedure \u00b6 Manually install Ansible Collections from the Ansible Galaxy repository: ansible-galaxy collection install serdigital64.application Automatic installation is also available by deploying A:Platform64 Contributing \u00b6 Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details. Author \u00b6 SerDigital64 License \u00b6 GPL-3.0-or-later","title":"app_slack"},{"location":"roles/app_slack/#ansible-role-serdigital64applicationapp_slack","text":"","title":"Ansible Role: serdigital64.application.app_slack"},{"location":"roles/app_slack/#purpose","text":"Manage provisioning of the Slack application. Supported features in the current version: Deploy application. Packages are defined in the variable app_slack_profiles . The app_slack Ansible-Role is part of the A:Platform64 project and is available in the application Ansible-Collection.","title":"Purpose"},{"location":"roles/app_slack/#usage","text":"The following example is an Ansible Playbook that includes all the supported features: use this link if viewing the doc on github --- - name : \"Application / Slack / Usage example\" hosts : \"localhost\" gather_facts : true tasks : - name : \"Example: Install Slack\" vars : app_slack : resolve_prereq : true deploy : true ansible.builtin.include_role : name : \"serdigital64.application.app_slack\" ... The playbook can be run by executing: # Set ANSIBLE_COLLECTIONS_PATHS to the default location. Change as needed. ANSIBLE_COLLECTIONS_PATHS = \" ${ HOME } /.ansible/collections\" ansible-playbook \" ${ ANSIBLE_COLLECTIONS_PATHS } /ansible_collections/serdigital64/application/playbooks/app_slack.yml\"","title":"Usage"},{"location":"roles/app_slack/#role-parameters","text":"","title":"Role Parameters"},{"location":"roles/app_slack/#actions","text":"Use action-parameters to control what tasks are enabled for the role to execute. Parameters should be declared as task level vars as they are intented to be dynamic. app_slack : resolve_prereq : deploy : Parameter Required? Type Default Purpose / Value app_slack.resolve_prereq no boolean false Enable automatic resolution of prequisites app_slack.deploy no boolean false Enable installation of application packages","title":"Actions"},{"location":"roles/app_slack/#end-state","text":"Use end-state parameters to define the target state after role execution. Parameters should be declared in host_vars or group_vars as they are intended to be permanent. app_slack_application : name : type : version : installed : Parameter Required? Type Default Purpose / Value app_slack_application yes(deploy) dictionary Set application package end state app_slack_application.name yes string \"slack\" Select application package name app_slack_application.type yes string \"flatpak\" Select application package type app_slack_application.version yes string \"latest\" Select application package version app_slack_application.installed yes boolean true Set application package end state","title":"End State"},{"location":"roles/app_slack/#deployment","text":"","title":"Deployment"},{"location":"roles/app_slack/#os-compatibility","text":"CentOS8 RedHat8 AlmaLinux8 OracleLinux8 Ubuntu20 Ubuntu21 Fedora33 Fedora35 Debian10 Debian11","title":"OS Compatibility"},{"location":"roles/app_slack/#dependencies","text":"Ansible Collections: serdigital64.backup bkp_archive serdigital64.system sys_package sys_repository","title":"Dependencies"},{"location":"roles/app_slack/#prerequisites","text":"The Ansible engine must be already installed and configured for privileged access and remote execution. In addition the following prerequisites can be automatically solved when running the playbook by setting the role action: resolve_prereq: true Package manager for the target application is installed and enabled.","title":"Prerequisites"},{"location":"roles/app_slack/#installation-procedure","text":"Manually install Ansible Collections from the Ansible Galaxy repository: ansible-galaxy collection install serdigital64.application Automatic installation is also available by deploying A:Platform64","title":"Installation Procedure"},{"location":"roles/app_slack/#contributing","text":"Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details.","title":"Contributing"},{"location":"roles/app_slack/#author","text":"SerDigital64","title":"Author"},{"location":"roles/app_slack/#license","text":"GPL-3.0-or-later","title":"License"},{"location":"roles/app_spotify/","text":"Ansible Role: serdigital64.application.app_spotify \u00b6 Purpose \u00b6 Manage provisioning of the Spotify application. Supported features in the current version: Deploy application. Packages are defined in the variable app_spotify_profiles . The app_spotify Ansible-Role is part of the A:Platform64 project and is available in the [application](../collections/applicaspotify Ansible-Collection. Usage \u00b6 The following example is an Ansible Playbook that includes all the supported features: use this link if viewing the doc on github --- - name : \"Application / Spotify / Usage example\" hosts : \"localhost\" gather_facts : true tasks : - name : \"Example: Install Spotify\" vars : app_spotify : resolve_prereq : true deploy : true ansible.builtin.include_role : name : \"serdigital64.application.app_spotify\" ... The playbook can be run by executing: # Set ANSIBLE_COLLECTIONS_PATHS to the default location. Change as needed. ANSIBLE_COLLECTIONS_PATHS = \" ${ HOME } /.ansible/collections\" ansible-playbook \" ${ ANSIBLE_COLLECTIONS_PATHS } /ansible_collections/serdigital64/application/playbooks/app_spotify.yml\" Role Parameters \u00b6 Actions \u00b6 Use action-parameters to control what tasks are enabled for the role to execute. Parameters should be declared as task level vars as they are intented to be dynamic. app_spotify : resolve_prereq : deploy : Parameter Required? Type Default Purpose / Value app_spotify.resolve_prereq no boolean false Enable automatic resolution of prequspotify app_spotify.deploy no boolean false Enable installation of application pspotify End State \u00b6 Use end-state parameters to define the target state after role execution. Parameters should be declared in host_vars or group_vars as they are intended to be permanent. app_spotify_application : name : type : version : installed : Parameter Required? Type Default Purpose / Value app_spotify_application no dictionary Set application package end state app_spotify_application.name no string \"spotify\" Select application package name app_spotify_application.type no string \"flatpak\" Select application package type app_spotify_application.version no string \"latest\" Select application package version app_spotify_application.installed no boolean true Set application package end state Deployment \u00b6 OS Compatibility \u00b6 CentOS8 RedHat8 AlmaLinux8 OracleLinux8 Ubuntu20 Ubuntu21 Fedora33 Fedora35 Debian10 Debian11 Dependencies \u00b6 Ansible Collections: serdigital64.backup bkp_archive serdigital64.system sys_package sys_repository Prerequisites \u00b6 The Ansible engine must be already installed and configured for privileged access and remote execution. In addition the following prerequisites can be automatically solved when running the playbook by setting the role action: resolve_prereq: true Package manager for the target application is installed and enabled. Installation Procedure \u00b6 Manually install Ansible Collections from the Ansible Galaxy repository: ansible-galaxy collection install --upgrade serdigital64.application Automatic installation is also available by deploying A:Platform64 Contributing \u00b6 Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details. Author \u00b6 SerDigital64 License \u00b6 GPL-3.0-or-later","title":"app_spotify"},{"location":"roles/app_spotify/#ansible-role-serdigital64applicationapp_spotify","text":"","title":"Ansible Role: serdigital64.application.app_spotify"},{"location":"roles/app_spotify/#purpose","text":"Manage provisioning of the Spotify application. Supported features in the current version: Deploy application. Packages are defined in the variable app_spotify_profiles . The app_spotify Ansible-Role is part of the A:Platform64 project and is available in the [application](../collections/applicaspotify Ansible-Collection.","title":"Purpose"},{"location":"roles/app_spotify/#usage","text":"The following example is an Ansible Playbook that includes all the supported features: use this link if viewing the doc on github --- - name : \"Application / Spotify / Usage example\" hosts : \"localhost\" gather_facts : true tasks : - name : \"Example: Install Spotify\" vars : app_spotify : resolve_prereq : true deploy : true ansible.builtin.include_role : name : \"serdigital64.application.app_spotify\" ... The playbook can be run by executing: # Set ANSIBLE_COLLECTIONS_PATHS to the default location. Change as needed. ANSIBLE_COLLECTIONS_PATHS = \" ${ HOME } /.ansible/collections\" ansible-playbook \" ${ ANSIBLE_COLLECTIONS_PATHS } /ansible_collections/serdigital64/application/playbooks/app_spotify.yml\"","title":"Usage"},{"location":"roles/app_spotify/#role-parameters","text":"","title":"Role Parameters"},{"location":"roles/app_spotify/#actions","text":"Use action-parameters to control what tasks are enabled for the role to execute. Parameters should be declared as task level vars as they are intented to be dynamic. app_spotify : resolve_prereq : deploy : Parameter Required? Type Default Purpose / Value app_spotify.resolve_prereq no boolean false Enable automatic resolution of prequspotify app_spotify.deploy no boolean false Enable installation of application pspotify","title":"Actions"},{"location":"roles/app_spotify/#end-state","text":"Use end-state parameters to define the target state after role execution. Parameters should be declared in host_vars or group_vars as they are intended to be permanent. app_spotify_application : name : type : version : installed : Parameter Required? Type Default Purpose / Value app_spotify_application no dictionary Set application package end state app_spotify_application.name no string \"spotify\" Select application package name app_spotify_application.type no string \"flatpak\" Select application package type app_spotify_application.version no string \"latest\" Select application package version app_spotify_application.installed no boolean true Set application package end state","title":"End State"},{"location":"roles/app_spotify/#deployment","text":"","title":"Deployment"},{"location":"roles/app_spotify/#os-compatibility","text":"CentOS8 RedHat8 AlmaLinux8 OracleLinux8 Ubuntu20 Ubuntu21 Fedora33 Fedora35 Debian10 Debian11","title":"OS Compatibility"},{"location":"roles/app_spotify/#dependencies","text":"Ansible Collections: serdigital64.backup bkp_archive serdigital64.system sys_package sys_repository","title":"Dependencies"},{"location":"roles/app_spotify/#prerequisites","text":"The Ansible engine must be already installed and configured for privileged access and remote execution. In addition the following prerequisites can be automatically solved when running the playbook by setting the role action: resolve_prereq: true Package manager for the target application is installed and enabled.","title":"Prerequisites"},{"location":"roles/app_spotify/#installation-procedure","text":"Manually install Ansible Collections from the Ansible Galaxy repository: ansible-galaxy collection install --upgrade serdigital64.application Automatic installation is also available by deploying A:Platform64","title":"Installation Procedure"},{"location":"roles/app_spotify/#contributing","text":"Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details.","title":"Contributing"},{"location":"roles/app_spotify/#author","text":"SerDigital64","title":"Author"},{"location":"roles/app_spotify/#license","text":"GPL-3.0-or-later","title":"License"},{"location":"roles/app_tilix/","text":"Ansible Role: serdigital64.application.app_tilix \u00b6 Purpose \u00b6 Manage provisioning of the Tilix application Supported features in the current version: Prepare environment for application deployment. Deploy application. Packages are defined in the variable app_tilix_profiles . Configure users. The app_tilix Ansible-Role is part of the A:Platform64 project and is available in the application Ansible-Collection. Usage \u00b6 The following example is an Ansible Playbook that includes all the supported features: use this link if viewing the doc on github --- - name : \"Application / Tilix / Usage example\" hosts : \"localhost\" gather_facts : true tasks : - name : \"Example: Install Tilix\" vars : app_tilix : resolve_prereq : true deploy : true ansible.builtin.include_role : name : \"serdigital64.application.app_tilix\" ... The playbook can be run by executing: # Set ANSIBLE_COLLECTIONS_PATHS to the default location. Change as needed. ANSIBLE_COLLECTIONS_PATHS = \" ${ HOME } /.ansible/collections\" ansible-playbook \" ${ ANSIBLE_COLLECTIONS_PATHS } /ansible_collections/serdigital64/application/playbooks/app_tilix.yml\" Role Parameters \u00b6 Actions \u00b6 Use action-parameters to control what tasks are enabled for the role to execute. Parameters should be declared as task level vars as they are intented to be dynamic. app_tilix : resolve_prereq : prepare : deploy : setup : Parameter Required? Type Default Purpose / Value app_tilix.resolve_prereq no boolean false Enable automatic resolution of prequisites app_tilix.prepare no boolean false Enable environment preparation app_tilix.deploy no boolean false Enable installation of application packages app_tilix.setup no boolean false Enable application configuration End State \u00b6 Use end-state parameters to define the target state after role execution. Parameters should be declared in host_vars or group_vars as they are intended to be permanent. app_tilix_application : name : type : version : installed : app_tilix_dconf : tilix : Parameter Required? Type Default Purpose / Value app_tilix_application yes(deploy) dictionary Set application package end state app_tilix_application.name yes(deploy) string \"tilix\" Select application package name app_tilix_application.type yes(deploy) string \"distro\" Select application package type app_tilix_application.version yes(deploy) string \"latest\" Select application package version app_tilix_application.installed yes(deploy) boolean true Set application package end state app_tilix_dconf yes(setup) dictionary Define user options app_tilix_dconf.tilix yes string \"p10k_v1\" Desktop configuration set Deployment \u00b6 OS Compatibility \u00b6 Ubuntu20 Ubuntu21 Fedora33 Fedora35 Debian10 Debian11 Dependencies \u00b6 Ansible Collections: serdigital64.backup bkp_archive serdigital64.system sys_package sys_repository Prerequisites \u00b6 The Ansible engine must be already installed and configured for privileged access and remote execution. In addition the following prerequisites can be automatically solved when running the playbook by setting the role action: resolve_prereq: true Package manager for the target application is installed and enabled. Installation Procedure \u00b6 Manually install Ansible Collections from the Ansible Galaxy repository: ansible-galaxy collection install serdigital64.application Automatic installation is also available by deploying A:Platform64 Contributing \u00b6 Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details. Author \u00b6 SerDigital64 License \u00b6 GPL-3.0-or-later","title":"app_tilix"},{"location":"roles/app_tilix/#ansible-role-serdigital64applicationapp_tilix","text":"","title":"Ansible Role: serdigital64.application.app_tilix"},{"location":"roles/app_tilix/#purpose","text":"Manage provisioning of the Tilix application Supported features in the current version: Prepare environment for application deployment. Deploy application. Packages are defined in the variable app_tilix_profiles . Configure users. The app_tilix Ansible-Role is part of the A:Platform64 project and is available in the application Ansible-Collection.","title":"Purpose"},{"location":"roles/app_tilix/#usage","text":"The following example is an Ansible Playbook that includes all the supported features: use this link if viewing the doc on github --- - name : \"Application / Tilix / Usage example\" hosts : \"localhost\" gather_facts : true tasks : - name : \"Example: Install Tilix\" vars : app_tilix : resolve_prereq : true deploy : true ansible.builtin.include_role : name : \"serdigital64.application.app_tilix\" ... The playbook can be run by executing: # Set ANSIBLE_COLLECTIONS_PATHS to the default location. Change as needed. ANSIBLE_COLLECTIONS_PATHS = \" ${ HOME } /.ansible/collections\" ansible-playbook \" ${ ANSIBLE_COLLECTIONS_PATHS } /ansible_collections/serdigital64/application/playbooks/app_tilix.yml\"","title":"Usage"},{"location":"roles/app_tilix/#role-parameters","text":"","title":"Role Parameters"},{"location":"roles/app_tilix/#actions","text":"Use action-parameters to control what tasks are enabled for the role to execute. Parameters should be declared as task level vars as they are intented to be dynamic. app_tilix : resolve_prereq : prepare : deploy : setup : Parameter Required? Type Default Purpose / Value app_tilix.resolve_prereq no boolean false Enable automatic resolution of prequisites app_tilix.prepare no boolean false Enable environment preparation app_tilix.deploy no boolean false Enable installation of application packages app_tilix.setup no boolean false Enable application configuration","title":"Actions"},{"location":"roles/app_tilix/#end-state","text":"Use end-state parameters to define the target state after role execution. Parameters should be declared in host_vars or group_vars as they are intended to be permanent. app_tilix_application : name : type : version : installed : app_tilix_dconf : tilix : Parameter Required? Type Default Purpose / Value app_tilix_application yes(deploy) dictionary Set application package end state app_tilix_application.name yes(deploy) string \"tilix\" Select application package name app_tilix_application.type yes(deploy) string \"distro\" Select application package type app_tilix_application.version yes(deploy) string \"latest\" Select application package version app_tilix_application.installed yes(deploy) boolean true Set application package end state app_tilix_dconf yes(setup) dictionary Define user options app_tilix_dconf.tilix yes string \"p10k_v1\" Desktop configuration set","title":"End State"},{"location":"roles/app_tilix/#deployment","text":"","title":"Deployment"},{"location":"roles/app_tilix/#os-compatibility","text":"Ubuntu20 Ubuntu21 Fedora33 Fedora35 Debian10 Debian11","title":"OS Compatibility"},{"location":"roles/app_tilix/#dependencies","text":"Ansible Collections: serdigital64.backup bkp_archive serdigital64.system sys_package sys_repository","title":"Dependencies"},{"location":"roles/app_tilix/#prerequisites","text":"The Ansible engine must be already installed and configured for privileged access and remote execution. In addition the following prerequisites can be automatically solved when running the playbook by setting the role action: resolve_prereq: true Package manager for the target application is installed and enabled.","title":"Prerequisites"},{"location":"roles/app_tilix/#installation-procedure","text":"Manually install Ansible Collections from the Ansible Galaxy repository: ansible-galaxy collection install serdigital64.application Automatic installation is also available by deploying A:Platform64","title":"Installation Procedure"},{"location":"roles/app_tilix/#contributing","text":"Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details.","title":"Contributing"},{"location":"roles/app_tilix/#author","text":"SerDigital64","title":"Author"},{"location":"roles/app_tilix/#license","text":"GPL-3.0-or-later","title":"License"},{"location":"roles/app_vscode/","text":"Ansible Role: serdigital64.application.app_vscode \u00b6 Purpose \u00b6 Manage provisioning of the VSCode application Supported features in the current version: Deploy application. Packages are defined in the variable app_vscode_profiles . Setup user-level application configuration. Create user-level recommended extensions file. The role defines in the variable app_vscode_catalog a curated list of extensions groupd by category. The recommended extension file will be created using group names from the catalog. The app_vscode Ansible-Role is part of the A:Platform64 project and is available in the application Ansible-Collection. Usage \u00b6 The following example is an Ansible Playbook that includes all the supported features: use this link if viewing the doc on github --- - name : \"Application / VSCode / Usage example\" hosts : \"localhost\" gather_facts : true vars : test_user : \"testusr64\" test_home : \"/home/testusr64\" pre_tasks : - name : \"Create test user\" vars : sys_user : setup : true sys_user_accounts : - name : \"{{ test_user }}\" home : \"{{ test_home }}\" ansible.builtin.include_role : name : \"serdigital64.system.sys_user\" tasks : - name : \"Example: Install VSCode\" vars : app_vscode : resolve_prereq : true deploy : true ansible.builtin.include_role : name : \"serdigital64.application.app_vscode\" - name : \"Example: Configure VSCode for the user {{ test_user }}\" vars : app_vscode : setup : true app_vscode_users : - name : \"{{ test_user }}\" home : \"{{ test_home }}\" extensions : - \"markdown\" - \"java\" ansible.builtin.include_role : name : \"serdigital64.application.app_vscode\" ... The playbook can be run by executing: # Set ANSIBLE_COLLECTIONS_PATHS to the default location. Change as needed. ANSIBLE_COLLECTIONS_PATHS = \" ${ HOME } /.ansible/collections\" ansible-playbook \" ${ ANSIBLE_COLLECTIONS_PATHS } /ansible_collections/serdigital64/application/playbooks/app_vscode.yml\" Role Parameters \u00b6 Actions \u00b6 Use action-parameters to control what tasks are enabled for the role to execute. Parameters should be declared as task level vars as they are intented to be dynamic. app_vscode : resolve_prereq : deploy : setup : Parameter Required? Type Default Purpose / Value app_vscode.resolve_prereq no boolean false Enable automatic resolution of prequisites app_vscode.deploy no boolean false Enable installation of application packages app_vscode.setup no boolean false Enable application setup End State \u00b6 Use end-state parameters to define the target state after role execution. Parameters should be declared in host_vars or group_vars as they are intended to be permanent. app_vscode_application : name : type : version : installed : app_vscode_users : - name : home : extensions : app_vscode_default_extensions : Parameter Required? Type Default Purpose / Value app_vscode_application no dictionary Set application package end state app_vscode_application.name no string \"vscode\" Select application package name app_vscode_application.type no string \"distro\" Select application package type app_vscode_application.version no string \"latest\" Select application package version app_vscode_application.installed no boolean true Set application package end state app_vscode_users no list Target list of users where the app will be configured app_vscode_users.0.name yes string User's login name app_vscode_users.0.home yes string User's home directory, full path app_vscode_users.0.extensions no list List of extension groups as defined in app_vscode_catalog app_vscode_default_extensions no list [\"icons\",\"themes\",\"tools\"] List of default extension groups Deployment \u00b6 OS Compatibility \u00b6 CentOS8 RedHat8 AlmaLinux8 OracleLinux8 Ubuntu20 Ubuntu21 Fedora33 Fedora35 Debian10 Debian11 Dependencies \u00b6 Ansible Collections: serdigital64.backup bkp_archive serdigital64.system sys_package sys_repository Prerequisites \u00b6 The Ansible engine must be already installed and configured for privileged access and remote execution. In addition the following prerequisites can be automatically solved when running the playbook by setting the role action: resolve_prereq: true Package manager for the target application is installed and enabled. Installation Procedure \u00b6 Manually install Ansible Collections from the Ansible Galaxy repository: ansible-galaxy collection install --upgrade serdigital64.application Automatic installation is also available by deploying A:Platform64 Contributing \u00b6 Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details. Author \u00b6 SerDigital64 License \u00b6 GPL-3.0-or-later","title":"app_vscode"},{"location":"roles/app_vscode/#ansible-role-serdigital64applicationapp_vscode","text":"","title":"Ansible Role: serdigital64.application.app_vscode"},{"location":"roles/app_vscode/#purpose","text":"Manage provisioning of the VSCode application Supported features in the current version: Deploy application. Packages are defined in the variable app_vscode_profiles . Setup user-level application configuration. Create user-level recommended extensions file. The role defines in the variable app_vscode_catalog a curated list of extensions groupd by category. The recommended extension file will be created using group names from the catalog. The app_vscode Ansible-Role is part of the A:Platform64 project and is available in the application Ansible-Collection.","title":"Purpose"},{"location":"roles/app_vscode/#usage","text":"The following example is an Ansible Playbook that includes all the supported features: use this link if viewing the doc on github --- - name : \"Application / VSCode / Usage example\" hosts : \"localhost\" gather_facts : true vars : test_user : \"testusr64\" test_home : \"/home/testusr64\" pre_tasks : - name : \"Create test user\" vars : sys_user : setup : true sys_user_accounts : - name : \"{{ test_user }}\" home : \"{{ test_home }}\" ansible.builtin.include_role : name : \"serdigital64.system.sys_user\" tasks : - name : \"Example: Install VSCode\" vars : app_vscode : resolve_prereq : true deploy : true ansible.builtin.include_role : name : \"serdigital64.application.app_vscode\" - name : \"Example: Configure VSCode for the user {{ test_user }}\" vars : app_vscode : setup : true app_vscode_users : - name : \"{{ test_user }}\" home : \"{{ test_home }}\" extensions : - \"markdown\" - \"java\" ansible.builtin.include_role : name : \"serdigital64.application.app_vscode\" ... The playbook can be run by executing: # Set ANSIBLE_COLLECTIONS_PATHS to the default location. Change as needed. ANSIBLE_COLLECTIONS_PATHS = \" ${ HOME } /.ansible/collections\" ansible-playbook \" ${ ANSIBLE_COLLECTIONS_PATHS } /ansible_collections/serdigital64/application/playbooks/app_vscode.yml\"","title":"Usage"},{"location":"roles/app_vscode/#role-parameters","text":"","title":"Role Parameters"},{"location":"roles/app_vscode/#actions","text":"Use action-parameters to control what tasks are enabled for the role to execute. Parameters should be declared as task level vars as they are intented to be dynamic. app_vscode : resolve_prereq : deploy : setup : Parameter Required? Type Default Purpose / Value app_vscode.resolve_prereq no boolean false Enable automatic resolution of prequisites app_vscode.deploy no boolean false Enable installation of application packages app_vscode.setup no boolean false Enable application setup","title":"Actions"},{"location":"roles/app_vscode/#end-state","text":"Use end-state parameters to define the target state after role execution. Parameters should be declared in host_vars or group_vars as they are intended to be permanent. app_vscode_application : name : type : version : installed : app_vscode_users : - name : home : extensions : app_vscode_default_extensions : Parameter Required? Type Default Purpose / Value app_vscode_application no dictionary Set application package end state app_vscode_application.name no string \"vscode\" Select application package name app_vscode_application.type no string \"distro\" Select application package type app_vscode_application.version no string \"latest\" Select application package version app_vscode_application.installed no boolean true Set application package end state app_vscode_users no list Target list of users where the app will be configured app_vscode_users.0.name yes string User's login name app_vscode_users.0.home yes string User's home directory, full path app_vscode_users.0.extensions no list List of extension groups as defined in app_vscode_catalog app_vscode_default_extensions no list [\"icons\",\"themes\",\"tools\"] List of default extension groups","title":"End State"},{"location":"roles/app_vscode/#deployment","text":"","title":"Deployment"},{"location":"roles/app_vscode/#os-compatibility","text":"CentOS8 RedHat8 AlmaLinux8 OracleLinux8 Ubuntu20 Ubuntu21 Fedora33 Fedora35 Debian10 Debian11","title":"OS Compatibility"},{"location":"roles/app_vscode/#dependencies","text":"Ansible Collections: serdigital64.backup bkp_archive serdigital64.system sys_package sys_repository","title":"Dependencies"},{"location":"roles/app_vscode/#prerequisites","text":"The Ansible engine must be already installed and configured for privileged access and remote execution. In addition the following prerequisites can be automatically solved when running the playbook by setting the role action: resolve_prereq: true Package manager for the target application is installed and enabled.","title":"Prerequisites"},{"location":"roles/app_vscode/#installation-procedure","text":"Manually install Ansible Collections from the Ansible Galaxy repository: ansible-galaxy collection install --upgrade serdigital64.application Automatic installation is also available by deploying A:Platform64","title":"Installation Procedure"},{"location":"roles/app_vscode/#contributing","text":"Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details.","title":"Contributing"},{"location":"roles/app_vscode/#author","text":"SerDigital64","title":"Author"},{"location":"roles/app_vscode/#license","text":"GPL-3.0-or-later","title":"License"},{"location":"roles/app_xmind/","text":"Ansible Role: serdigital64.application.app_xmind \u00b6 Purpose \u00b6 Manage provisioning of the XMind application. Supported features in the current version: Deploy application. Packages are defined in the variable app_xmind_profiles . The app_xmind Ansible-Role is part of the A:Platform64 project and is available in the application Ansible-Collection. Usage \u00b6 The following example is an Ansible Playbook that includes all the supported features: use this link if viewing the doc on github --- - name : \"Application / XMind / Usage example\" hosts : \"localhost\" gather_facts : true tasks : - name : \"Example: Install XMind\" vars : app_xmind : resolve_prereq : true deploy : true ansible.builtin.include_role : name : \"serdigital64.application.app_xmind\" ... The playbook can be run by executing: # Set ANSIBLE_COLLECTIONS_PATHS to the default location. Change as needed. ANSIBLE_COLLECTIONS_PATHS = \" ${ HOME } /.ansible/collections\" ansible-playbook \" ${ ANSIBLE_COLLECTIONS_PATHS } /ansible_collections/serdigital64/application/playbooks/app_xmind.yml\" Role Parameters \u00b6 Actions \u00b6 Use action-parameters to control what tasks are enabled for the role to execute. Parameters should be declared as task level vars as they are intented to be dynamic. app_xmind : resolve_prereq : deploy : false Parameter Required? Type Default Purpose / Value app_xmind.resolve_prereq no boolean false Enable automatic resolution of prequisites app_xmind.deploy no boolean false Enable installation of application packages End State \u00b6 Use end-state parameters to define the target state after role execution. Parameters should be declared in host_vars or group_vars as they are intended to be permanent. app_xmind_application : name : type : version : installed : Parameter Required? Type Default Purpose / Value app_xmind_application no dictionary Set application package end state app_xmind_application.name no string \"xmind\" Define application application app_xmind_application.type no string \"flatpak\" Select application type from application app_xmind_application.version no string \"latest\" Select application package version app_xmind_application.installed no boolean true Set application package end application Deployment \u00b6 OS Compatibility \u00b6 CentOS8 RedHat8 AlmaLinux8 OracleLinux8 Ubuntu20 Ubuntu21 Fedora33 Fedora35 Debian10 Debian11 Dependencies \u00b6 Ansible Collections: serdigital64.backup bkp_archive serdigital64.system sys_package sys_repository Prerequisites \u00b6 The Ansible engine must be already installed and configured for privileged access and remote execution. In addition the following prerequisites can be automatically solved when running the playbook by setting the role action: resolve_prereq: true Package manager for the target application is installed and enabled. Installation Procedure \u00b6 Manually install Ansible Collections from the Ansible Galaxy repository: ansible-galaxy collection install --upgrade serdigital64.application Automatic installation is also available by deploying A:Platform64 Contributing \u00b6 Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details. Author \u00b6 SerDigital64 License \u00b6 GPL-3.0-or-later","title":"app_xmind"},{"location":"roles/app_xmind/#ansible-role-serdigital64applicationapp_xmind","text":"","title":"Ansible Role: serdigital64.application.app_xmind"},{"location":"roles/app_xmind/#purpose","text":"Manage provisioning of the XMind application. Supported features in the current version: Deploy application. Packages are defined in the variable app_xmind_profiles . The app_xmind Ansible-Role is part of the A:Platform64 project and is available in the application Ansible-Collection.","title":"Purpose"},{"location":"roles/app_xmind/#usage","text":"The following example is an Ansible Playbook that includes all the supported features: use this link if viewing the doc on github --- - name : \"Application / XMind / Usage example\" hosts : \"localhost\" gather_facts : true tasks : - name : \"Example: Install XMind\" vars : app_xmind : resolve_prereq : true deploy : true ansible.builtin.include_role : name : \"serdigital64.application.app_xmind\" ... The playbook can be run by executing: # Set ANSIBLE_COLLECTIONS_PATHS to the default location. Change as needed. ANSIBLE_COLLECTIONS_PATHS = \" ${ HOME } /.ansible/collections\" ansible-playbook \" ${ ANSIBLE_COLLECTIONS_PATHS } /ansible_collections/serdigital64/application/playbooks/app_xmind.yml\"","title":"Usage"},{"location":"roles/app_xmind/#role-parameters","text":"","title":"Role Parameters"},{"location":"roles/app_xmind/#actions","text":"Use action-parameters to control what tasks are enabled for the role to execute. Parameters should be declared as task level vars as they are intented to be dynamic. app_xmind : resolve_prereq : deploy : false Parameter Required? Type Default Purpose / Value app_xmind.resolve_prereq no boolean false Enable automatic resolution of prequisites app_xmind.deploy no boolean false Enable installation of application packages","title":"Actions"},{"location":"roles/app_xmind/#end-state","text":"Use end-state parameters to define the target state after role execution. Parameters should be declared in host_vars or group_vars as they are intended to be permanent. app_xmind_application : name : type : version : installed : Parameter Required? Type Default Purpose / Value app_xmind_application no dictionary Set application package end state app_xmind_application.name no string \"xmind\" Define application application app_xmind_application.type no string \"flatpak\" Select application type from application app_xmind_application.version no string \"latest\" Select application package version app_xmind_application.installed no boolean true Set application package end application","title":"End State"},{"location":"roles/app_xmind/#deployment","text":"","title":"Deployment"},{"location":"roles/app_xmind/#os-compatibility","text":"CentOS8 RedHat8 AlmaLinux8 OracleLinux8 Ubuntu20 Ubuntu21 Fedora33 Fedora35 Debian10 Debian11","title":"OS Compatibility"},{"location":"roles/app_xmind/#dependencies","text":"Ansible Collections: serdigital64.backup bkp_archive serdigital64.system sys_package sys_repository","title":"Dependencies"},{"location":"roles/app_xmind/#prerequisites","text":"The Ansible engine must be already installed and configured for privileged access and remote execution. In addition the following prerequisites can be automatically solved when running the playbook by setting the role action: resolve_prereq: true Package manager for the target application is installed and enabled.","title":"Prerequisites"},{"location":"roles/app_xmind/#installation-procedure","text":"Manually install Ansible Collections from the Ansible Galaxy repository: ansible-galaxy collection install --upgrade serdigital64.application Automatic installation is also available by deploying A:Platform64","title":"Installation Procedure"},{"location":"roles/app_xmind/#contributing","text":"Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details.","title":"Contributing"},{"location":"roles/app_xmind/#author","text":"SerDigital64","title":"Author"},{"location":"roles/app_xmind/#license","text":"GPL-3.0-or-later","title":"License"},{"location":"roles/app_zoom/","text":"Ansible Role: serdigital64.application.app_zoom \u00b6 Purpose \u00b6 Manage provisioning of the Zoom application. Supported features in the current version: Deploy application. Packages are defined in the variable app_zoom_profiles . The app_zoom Ansible-Role is part of the A:Platform64 project and is available in the application Ansible-Collection. Usage \u00b6 The following example is an Ansible Playbook that includes all the supported features: use this link if viewing the doc on github --- - name : \"Application / Zoom / Usage example\" hosts : \"localhost\" gather_facts : true tasks : - name : \"Example: Install Zoom\" vars : app_zoom : resolve_prereq : true deploy : true ansible.builtin.include_role : name : \"serdigital64.application.app_zoom\" ... The playbook can be run by executing: # Set ANSIBLE_COLLECTIONS_PATHS to the default location. Change as needed. ANSIBLE_COLLECTIONS_PATHS = \" ${ HOME } /.ansible/collections\" ansible-playbook \" ${ ANSIBLE_COLLECTIONS_PATHS } /ansible_collections/serdigital64/application/playbooks/app_zoom.yml\" Role Parameters \u00b6 Actions \u00b6 Use action-parameters to control what tasks are enabled for the role to execute. Parameters should be declared as task level vars as they are intented to be dynamic. app_zoom : resolve_prereq : deploy : false Parameter Required? Type Default Purpose / Value app_zoom.resolve_prereq no boolean false Enable automatic resolution of prequisites app_zoom.deploy no boolean false Enable installation of application packages End State \u00b6 Use end-state parameters to define the target state after role execution. Parameters should be declared in host_vars or group_vars as they are intended to be permanent. app_zoom_application : name : type : version : installed : Parameter Required? Type Default Purpose / Value app_zoom_application no dictionary Set application package end state app_zoom_application.name no string \"zoom\" Define application application app_zoom_application.type no string \"flatpak\" Select application type from application app_zoom_application.version no string \"latest\" Select application package version app_zoom_application.installed no boolean true Set application package end application Deployment \u00b6 OS Compatibility \u00b6 CentOS8 RedHat8 AlmaLinux8 OracleLinux8 Ubuntu20 Ubuntu21 Fedora33 Fedora35 Debian10 Debian11 Dependencies \u00b6 Ansible Collections: serdigital64.backup bkp_archive serdigital64.system sys_package sys_repository Prerequisites \u00b6 The Ansible engine must be already installed and configured for privileged access and remote execution. In addition the following prerequisites can be automatically solved when running the playbook by setting the role action: resolve_prereq: true Package manager for the target application is installed and enabled. Installation Procedure \u00b6 Manually install Ansible Collections from the Ansible Galaxy repository: ansible-galaxy collection install --upgrade serdigital64.application Automatic installation is also available by deploying A:Platform64 Contributing \u00b6 Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details. Author \u00b6 SerDigital64 License \u00b6 GPL-3.0-or-later","title":"app_zoom"},{"location":"roles/app_zoom/#ansible-role-serdigital64applicationapp_zoom","text":"","title":"Ansible Role: serdigital64.application.app_zoom"},{"location":"roles/app_zoom/#purpose","text":"Manage provisioning of the Zoom application. Supported features in the current version: Deploy application. Packages are defined in the variable app_zoom_profiles . The app_zoom Ansible-Role is part of the A:Platform64 project and is available in the application Ansible-Collection.","title":"Purpose"},{"location":"roles/app_zoom/#usage","text":"The following example is an Ansible Playbook that includes all the supported features: use this link if viewing the doc on github --- - name : \"Application / Zoom / Usage example\" hosts : \"localhost\" gather_facts : true tasks : - name : \"Example: Install Zoom\" vars : app_zoom : resolve_prereq : true deploy : true ansible.builtin.include_role : name : \"serdigital64.application.app_zoom\" ... The playbook can be run by executing: # Set ANSIBLE_COLLECTIONS_PATHS to the default location. Change as needed. ANSIBLE_COLLECTIONS_PATHS = \" ${ HOME } /.ansible/collections\" ansible-playbook \" ${ ANSIBLE_COLLECTIONS_PATHS } /ansible_collections/serdigital64/application/playbooks/app_zoom.yml\"","title":"Usage"},{"location":"roles/app_zoom/#role-parameters","text":"","title":"Role Parameters"},{"location":"roles/app_zoom/#actions","text":"Use action-parameters to control what tasks are enabled for the role to execute. Parameters should be declared as task level vars as they are intented to be dynamic. app_zoom : resolve_prereq : deploy : false Parameter Required? Type Default Purpose / Value app_zoom.resolve_prereq no boolean false Enable automatic resolution of prequisites app_zoom.deploy no boolean false Enable installation of application packages","title":"Actions"},{"location":"roles/app_zoom/#end-state","text":"Use end-state parameters to define the target state after role execution. Parameters should be declared in host_vars or group_vars as they are intended to be permanent. app_zoom_application : name : type : version : installed : Parameter Required? Type Default Purpose / Value app_zoom_application no dictionary Set application package end state app_zoom_application.name no string \"zoom\" Define application application app_zoom_application.type no string \"flatpak\" Select application type from application app_zoom_application.version no string \"latest\" Select application package version app_zoom_application.installed no boolean true Set application package end application","title":"End State"},{"location":"roles/app_zoom/#deployment","text":"","title":"Deployment"},{"location":"roles/app_zoom/#os-compatibility","text":"CentOS8 RedHat8 AlmaLinux8 OracleLinux8 Ubuntu20 Ubuntu21 Fedora33 Fedora35 Debian10 Debian11","title":"OS Compatibility"},{"location":"roles/app_zoom/#dependencies","text":"Ansible Collections: serdigital64.backup bkp_archive serdigital64.system sys_package sys_repository","title":"Dependencies"},{"location":"roles/app_zoom/#prerequisites","text":"The Ansible engine must be already installed and configured for privileged access and remote execution. In addition the following prerequisites can be automatically solved when running the playbook by setting the role action: resolve_prereq: true Package manager for the target application is installed and enabled.","title":"Prerequisites"},{"location":"roles/app_zoom/#installation-procedure","text":"Manually install Ansible Collections from the Ansible Galaxy repository: ansible-galaxy collection install --upgrade serdigital64.application Automatic installation is also available by deploying A:Platform64","title":"Installation Procedure"},{"location":"roles/app_zoom/#contributing","text":"Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details.","title":"Contributing"},{"location":"roles/app_zoom/#author","text":"SerDigital64","title":"Author"},{"location":"roles/app_zoom/#license","text":"GPL-3.0-or-later","title":"License"},{"location":"roles/auto_ansible_control/","text":"Ansible Role: serdigital64.automation.auto_ansible_control \u00b6 Purpose \u00b6 Automate the management of Ansible Control Node. Supported features in the current version: Create directory structure. Setup site configuration files: ansible.cfg: regular operation ansible-debug.cfg: task debugging Create OpenSSH Public/Private key pair for Ansible Managed Nodes Register Ansible Managed Nodes`s OpenSSH server keys in known_hosts file. Create shell environment script for setting Ansible variables. The auto_ansible_control Ansible-Role is part of the A:Platform64 project and is available in the application Ansible-Collection. Directory structure \u00b6 The directory structure is based on the collection structure recommended by Ansible documentation and extended to hold all the assets that the Ansible Control node will require to manage the target environment. Content is separated into two main groups: root: infrastructure-as-code content that can be added to a GIT repository. Path is defined in the auto_ansible_control_paths.root variable. var: temporary files, not to be added to GIT. Path is defined in the auto_ansible_control_paths.var variable. Additional directories are create to further organize content. The full list is defined in auto_ansible_control_base variable. Path Content Ansible Variable root/etc/cfg Ansible configuration files ANSIBLE_CONFIG root/etc/keys OpenSSH key pairs ANSIBLE_PRIVATE_KEY_FILE root/etc/tokens API tokens ANSIBLE_GALAXY_TOKEN_PATH root/bin/ Shell scripts root/inventories/ Ansible inventory files, host_vars and group_vars ANSIBLE_INVENTORY root/playbooks/ Ansible Playbooks ANSIBLE_PLAYBOOK_DIR root/collections/ Collections installed from Ansible-Galaxy ANSIBLE_COLLECTIONS_PATHS root/roles/ Custom site-specific Ansible Roles ANSIBLE_ROLES_PATH root/files/ Custom site-specific data files root/templates/ Custom site-specific Ansible Templates root/vars/ Custom site-specific Ansible variables root/tests/ Ansible playbooks for testing Custom Ansible Roles and Playbooks root/docs/ Repository for storing site-specific documentation var/cache General purpose cache ANSIBLE_CACHE_PLUGIN_CONNECTION, ANSIBLE_GALAXY_CACHE_DIR var/logs General purpose log store ANSIBLE_LOG_PATH var/persistence General purpose persistence store ANSIBLE_PERSISTENT_CONTROL_PATH_DIR,ANSIBLE_SSH_CONTROL_PATH_DIR var/tmp General purpose ephemeral store ANSIBLE_RETRY_FILES_SAVE_PATH The directory structure incorporates the concept of sites: Sites are used to isolate group of hosts from each other. For example, create separate sites for production, development, testing environments. Each content directory will have additional subdirectories to hold each site. For example: etc/cfg/prod etc/cfg/dev etc/cfg/qa Sites can be activated by using the corresponding environment load script. For example, to set the environment for the prod site: source ansible_control-prod.sh Usage \u00b6 The following example is an Ansible Playbook that includes all the supported features: use this link if viewing the doc on github --- - name : \"Automation / Ansible / Control / Usage example\" hosts : \"localhost\" gather_facts : true vars : test_user : \"{{ lookup('env','USER') }}\" test_group : \"{{ test_user }}\" test_home : \"/home/{{ test_user }}\" test_control : \"{{ test_home }}/test_ansible64\" tasks : - name : \"Example: Create the directory structure for Ansible and create the site test\" vars : auto_ansible_control : prepare : true setup : true auto_ansible_control_users : control : name : \"{{ test_user }}\" group : \"{{ test_group }}\" home : \"{{ test_home }}\" auto_ansible_control_paths : root : \"{{ test_control }}\" var : \"{{ test_control }}\" auto_ansible_control_site : \"test\" ansible.builtin.include_role : name : \"serdigital64.automation.auto_ansible_control\" ... The playbook can be run by executing: # Set ANSIBLE_COLLECTIONS_PATHS to the default location. Change as needed. ANSIBLE_COLLECTIONS_PATHS = \" ${ HOME } /.ansible/collections\" ansible-playbook \" ${ ANSIBLE_COLLECTIONS_PATHS } /ansible_collections/serdigital64/automation/playbooks/auto_ansible_control.yml\" Role Parameters \u00b6 Actions \u00b6 Use action-parameters to control what tasks are enabled for the role to execute. Parameters should be declared as task level vars as they are intented to be dynamic. auto_ansible_control : resolve_prereq : prepare : setup : provision : Parameter Required? Type Default Purpose / Value auto_ansible_control.resolve_prereq no boolean false Enable automatic resolution of prequisites auto_ansible_control.prepare no boolean false Enable preparation of the runtime environment auto_ansible_control.setup no boolean false Enable configuration of the runtime environment auto_ansible_control.provision no boolean false Enable processing of SSH keys End State \u00b6 Use end-state parameters to define the target state after role execution. Parameters should be declared in host_vars or group_vars as they are intended to be permanent. auto_ansible_control_site : auto_ansible_control_node : auto_ansible_control_python : auto_ansible_control_users : control : name : group : home : auto_ansible_control_paths : root : var : auto_ansible_control_key : type : size : auto_ansible_control_managed : Parameter Required? Type Default Purpose / Value auto_ansible_control_site no string \"site\" Short name of the site that will be managed by A:Platform64 auto_ansible_control_node no string \"localhost\" Ansible Control Node`s hostname. The hostname must resolve to a valid IP address auto_ansible_control_python no string \"/usr/bin/python3.9\" Set the path to the Python 3.9 interpreter auto_ansible_control_users yes dictionary Define what users will use the automation platform auto_ansible_control_users.control yes dictionary Define the user that will own and run tasks on the Ansible Control Node auto_ansible_control_users.control.name yes string \"sitectl\" User's login name auto_ansible_control_users.control.group yes string \"sitectl\" User's primary group name auto_ansible_control_users.control.home yes string \"/home/sitectl\" User's home directory auto_ansible_control_paths yes dictionary Define where will A:Platform64 be installed to auto_ansible_control_paths.root yes string \"/opt/sitectl\" Base directory for collections, roles, configuration auto_ansible_control_paths.var yes string \"/var/opt/sitectl\" Base directory for logs, cache, temporary content auto_ansible_control_key no dictionary Define OpenSSH key parameters auto_ansible_control_key.type no string \"ed25519\" Key type. Valid values: as accepted by ssh-keygen auto_ansible_control_key.size no string Key size auto_ansible_control_managed no list List of Ansible Managed Hosts controlled by this Ansible Control node Deployment \u00b6 OS Compatibility \u00b6 The operating system compatibility list is defined in the variable: auto_ansible_control_platforms Dependencies \u00b6 Ansible Collections: serdigital64.backup bkp_archive serdigital64.system sys_package sys_repository serdigital64.security sec_openssh_client sec_key_ssh Prerequisites \u00b6 The Ansible engine must be already installed and configured for privileged access and remote execution. Installation Procedure \u00b6 Manually install Ansible Collections from the Ansible Galaxy repository: ansible-galaxy collection install --upgrade serdigital64.automation Automatic installation is also available by deploying A:Platform64 Contributing \u00b6 Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details. Author \u00b6 SerDigital64 License \u00b6 GPL-3.0-or-later","title":"auto_ansible_control"},{"location":"roles/auto_ansible_control/#ansible-role-serdigital64automationauto_ansible_control","text":"","title":"Ansible Role: serdigital64.automation.auto_ansible_control"},{"location":"roles/auto_ansible_control/#purpose","text":"Automate the management of Ansible Control Node. Supported features in the current version: Create directory structure. Setup site configuration files: ansible.cfg: regular operation ansible-debug.cfg: task debugging Create OpenSSH Public/Private key pair for Ansible Managed Nodes Register Ansible Managed Nodes`s OpenSSH server keys in known_hosts file. Create shell environment script for setting Ansible variables. The auto_ansible_control Ansible-Role is part of the A:Platform64 project and is available in the application Ansible-Collection.","title":"Purpose"},{"location":"roles/auto_ansible_control/#directory-structure","text":"The directory structure is based on the collection structure recommended by Ansible documentation and extended to hold all the assets that the Ansible Control node will require to manage the target environment. Content is separated into two main groups: root: infrastructure-as-code content that can be added to a GIT repository. Path is defined in the auto_ansible_control_paths.root variable. var: temporary files, not to be added to GIT. Path is defined in the auto_ansible_control_paths.var variable. Additional directories are create to further organize content. The full list is defined in auto_ansible_control_base variable. Path Content Ansible Variable root/etc/cfg Ansible configuration files ANSIBLE_CONFIG root/etc/keys OpenSSH key pairs ANSIBLE_PRIVATE_KEY_FILE root/etc/tokens API tokens ANSIBLE_GALAXY_TOKEN_PATH root/bin/ Shell scripts root/inventories/ Ansible inventory files, host_vars and group_vars ANSIBLE_INVENTORY root/playbooks/ Ansible Playbooks ANSIBLE_PLAYBOOK_DIR root/collections/ Collections installed from Ansible-Galaxy ANSIBLE_COLLECTIONS_PATHS root/roles/ Custom site-specific Ansible Roles ANSIBLE_ROLES_PATH root/files/ Custom site-specific data files root/templates/ Custom site-specific Ansible Templates root/vars/ Custom site-specific Ansible variables root/tests/ Ansible playbooks for testing Custom Ansible Roles and Playbooks root/docs/ Repository for storing site-specific documentation var/cache General purpose cache ANSIBLE_CACHE_PLUGIN_CONNECTION, ANSIBLE_GALAXY_CACHE_DIR var/logs General purpose log store ANSIBLE_LOG_PATH var/persistence General purpose persistence store ANSIBLE_PERSISTENT_CONTROL_PATH_DIR,ANSIBLE_SSH_CONTROL_PATH_DIR var/tmp General purpose ephemeral store ANSIBLE_RETRY_FILES_SAVE_PATH The directory structure incorporates the concept of sites: Sites are used to isolate group of hosts from each other. For example, create separate sites for production, development, testing environments. Each content directory will have additional subdirectories to hold each site. For example: etc/cfg/prod etc/cfg/dev etc/cfg/qa Sites can be activated by using the corresponding environment load script. For example, to set the environment for the prod site: source ansible_control-prod.sh","title":"Directory structure"},{"location":"roles/auto_ansible_control/#usage","text":"The following example is an Ansible Playbook that includes all the supported features: use this link if viewing the doc on github --- - name : \"Automation / Ansible / Control / Usage example\" hosts : \"localhost\" gather_facts : true vars : test_user : \"{{ lookup('env','USER') }}\" test_group : \"{{ test_user }}\" test_home : \"/home/{{ test_user }}\" test_control : \"{{ test_home }}/test_ansible64\" tasks : - name : \"Example: Create the directory structure for Ansible and create the site test\" vars : auto_ansible_control : prepare : true setup : true auto_ansible_control_users : control : name : \"{{ test_user }}\" group : \"{{ test_group }}\" home : \"{{ test_home }}\" auto_ansible_control_paths : root : \"{{ test_control }}\" var : \"{{ test_control }}\" auto_ansible_control_site : \"test\" ansible.builtin.include_role : name : \"serdigital64.automation.auto_ansible_control\" ... The playbook can be run by executing: # Set ANSIBLE_COLLECTIONS_PATHS to the default location. Change as needed. ANSIBLE_COLLECTIONS_PATHS = \" ${ HOME } /.ansible/collections\" ansible-playbook \" ${ ANSIBLE_COLLECTIONS_PATHS } /ansible_collections/serdigital64/automation/playbooks/auto_ansible_control.yml\"","title":"Usage"},{"location":"roles/auto_ansible_control/#role-parameters","text":"","title":"Role Parameters"},{"location":"roles/auto_ansible_control/#actions","text":"Use action-parameters to control what tasks are enabled for the role to execute. Parameters should be declared as task level vars as they are intented to be dynamic. auto_ansible_control : resolve_prereq : prepare : setup : provision : Parameter Required? Type Default Purpose / Value auto_ansible_control.resolve_prereq no boolean false Enable automatic resolution of prequisites auto_ansible_control.prepare no boolean false Enable preparation of the runtime environment auto_ansible_control.setup no boolean false Enable configuration of the runtime environment auto_ansible_control.provision no boolean false Enable processing of SSH keys","title":"Actions"},{"location":"roles/auto_ansible_control/#end-state","text":"Use end-state parameters to define the target state after role execution. Parameters should be declared in host_vars or group_vars as they are intended to be permanent. auto_ansible_control_site : auto_ansible_control_node : auto_ansible_control_python : auto_ansible_control_users : control : name : group : home : auto_ansible_control_paths : root : var : auto_ansible_control_key : type : size : auto_ansible_control_managed : Parameter Required? Type Default Purpose / Value auto_ansible_control_site no string \"site\" Short name of the site that will be managed by A:Platform64 auto_ansible_control_node no string \"localhost\" Ansible Control Node`s hostname. The hostname must resolve to a valid IP address auto_ansible_control_python no string \"/usr/bin/python3.9\" Set the path to the Python 3.9 interpreter auto_ansible_control_users yes dictionary Define what users will use the automation platform auto_ansible_control_users.control yes dictionary Define the user that will own and run tasks on the Ansible Control Node auto_ansible_control_users.control.name yes string \"sitectl\" User's login name auto_ansible_control_users.control.group yes string \"sitectl\" User's primary group name auto_ansible_control_users.control.home yes string \"/home/sitectl\" User's home directory auto_ansible_control_paths yes dictionary Define where will A:Platform64 be installed to auto_ansible_control_paths.root yes string \"/opt/sitectl\" Base directory for collections, roles, configuration auto_ansible_control_paths.var yes string \"/var/opt/sitectl\" Base directory for logs, cache, temporary content auto_ansible_control_key no dictionary Define OpenSSH key parameters auto_ansible_control_key.type no string \"ed25519\" Key type. Valid values: as accepted by ssh-keygen auto_ansible_control_key.size no string Key size auto_ansible_control_managed no list List of Ansible Managed Hosts controlled by this Ansible Control node","title":"End State"},{"location":"roles/auto_ansible_control/#deployment","text":"","title":"Deployment"},{"location":"roles/auto_ansible_control/#os-compatibility","text":"The operating system compatibility list is defined in the variable: auto_ansible_control_platforms","title":"OS Compatibility"},{"location":"roles/auto_ansible_control/#dependencies","text":"Ansible Collections: serdigital64.backup bkp_archive serdigital64.system sys_package sys_repository serdigital64.security sec_openssh_client sec_key_ssh","title":"Dependencies"},{"location":"roles/auto_ansible_control/#prerequisites","text":"The Ansible engine must be already installed and configured for privileged access and remote execution.","title":"Prerequisites"},{"location":"roles/auto_ansible_control/#installation-procedure","text":"Manually install Ansible Collections from the Ansible Galaxy repository: ansible-galaxy collection install --upgrade serdigital64.automation Automatic installation is also available by deploying A:Platform64","title":"Installation Procedure"},{"location":"roles/auto_ansible_control/#contributing","text":"Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details.","title":"Contributing"},{"location":"roles/auto_ansible_control/#author","text":"SerDigital64","title":"Author"},{"location":"roles/auto_ansible_control/#license","text":"GPL-3.0-or-later","title":"License"},{"location":"roles/auto_ansible_node/","text":"Ansible Role: serdigital64.automation.auto_ansible_node \u00b6 Purpose \u00b6 Automate the management of Ansible Managed Nodes. Supported features in the current version: Create managed node user. Grant root privilege to managed node user. Provision Ansible Control Node OpenSSH Key for password-less remote access. Deploy os tools used by common Ansible modules. Package list is defined in the variables auto_ansible_node_tools . su runuser which The auto_ansible_node Ansible-Role is part of the A:Platform64 project and is available in the automation Ansible-Collection. Usage \u00b6 The following example is an Ansible Playbook that includes all the supported features: use this link if viewing the doc on github --- - name : \"Automation / Ansible / Node / Usage example\" hosts : \"**changeme**\" # Target hostname where the Ansible Node will be setup gather_facts : true vars : ansible_python_interpreter : \"/usr/bin/python3\" ansible_ssh_common_args : \"-o PreferredAuthentications=password -o PubkeyAuthentication=no -o StrictHostKeyChecking=no\" ansible_user : \"**changeme**\" # Login name of the user for the bootstrap process ansible_password : \"**changeme**\" # Password for the bootstrap user ansible_become_method : \"sudo\" ansible_become_password : \"{{ ansible_password }}\" tasks : - name : \"Example: Prepare (bootstrap) the managed node for Ansible operation\" vars : auto_ansible_node : prepare : true deploy : true provision : true bootstrap : true auto_ansible_node_user : name : \"amnode\" group : \"amnode\" home : \"/home/amnode\" description : \"Ansible managed node\" control_key : \"**changeme**\" # Full path to the SSH public key that will be installed in the managed node become_method : \"sudo\" ansible.builtin.include_role : name : \"serdigital64.automation.auto_ansible_node\" ... The playbook can be run by executing: # Set ANSIBLE_COLLECTIONS_PATHS to the default location. Change as needed. ANSIBLE_COLLECTIONS_PATHS = \" ${ HOME } /.ansible/collections\" ansible-playbook \" ${ ANSIBLE_COLLECTIONS_PATHS } /ansible_collections/serdigital64/automation/playbooks/auto_ansible_node.yml\" Role Parameters \u00b6 Actions \u00b6 Use action-parameters to control what tasks are enabled for the role to execute. Parameters should be declared as task level vars as they are intented to be dynamic. auto_ansible_node : prepare : deploy : provision : bootstrap : Parameter Required? Type Default Purpose / Value prepare no boolean false Enable preparation tasks depploy no boolean false Enable deployment tasks provision no boolean false Enable provisioning tasks bootstrap no boolean false Enable bootstrap mode End State \u00b6 Use end-state parameters to define the target state after role execution. Parameters should be declared in host_vars or group_vars as they are intended to be permanent. auto_ansible_node_user : name : group : home : description : control_key : become_method : auto_ansible_node_bootstrap : user : password : become_method : become_password : Parameter Required? Type Default Purpose / Value auto_ansible_node_user yes dictionary Define managed node user details auto_ansible_node_user.name yes string \"amnode\" User name auto_ansible_node_user.group yes string \"amnode\" User's primary group auto_ansible_node_user.home yes string \"/home/amnode\" User's home directory auto_ansible_node_user.description yes string \"Ansible managed node\" User description auto_ansible_node_user.control_key yes string Full path to the SSH public Key auto_ansible_node_user.become_method yes string \"sudo\" Ansible become method auto_ansible_node_bootstrap no dictionary Define bootstrap details auto_ansible_node_bootstrap.user yes string \"sysadmin\" User name auto_ansible_node_bootstrap.password yes string User's password (plain or vault) auto_ansible_node_bootstrap.become_method yes string \"sudo\" Become method auto_ansible_node_bootstrap.become_password yes string Become password (plain or vault) Deployment \u00b6 OS Compatibility \u00b6 The operating system compatibility list is defined in the variable: auto_ansible_node_platforms Dependencies \u00b6 Ansible Collections: ansible.posix authorized_key Prerequisites \u00b6 The Ansible engine must be already installed and configured for privileged access and remote execution. In addition the following prerequisites must be met: Managed node: Bootstrap user with sudo privilege OS Packages: OpenSSH server Sudo Python3 Installation Procedure \u00b6 Manually install Ansible Collections from the Ansible Galaxy repository: ansible-galaxy collection install --upgrade serdigital64.automation Automatic installation is also available by deploying A:Platform64 Contributing \u00b6 Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details. Author \u00b6 SerDigital64 License \u00b6 GPL-3.0-or-later","title":"auto_ansible_node"},{"location":"roles/auto_ansible_node/#ansible-role-serdigital64automationauto_ansible_node","text":"","title":"Ansible Role: serdigital64.automation.auto_ansible_node"},{"location":"roles/auto_ansible_node/#purpose","text":"Automate the management of Ansible Managed Nodes. Supported features in the current version: Create managed node user. Grant root privilege to managed node user. Provision Ansible Control Node OpenSSH Key for password-less remote access. Deploy os tools used by common Ansible modules. Package list is defined in the variables auto_ansible_node_tools . su runuser which The auto_ansible_node Ansible-Role is part of the A:Platform64 project and is available in the automation Ansible-Collection.","title":"Purpose"},{"location":"roles/auto_ansible_node/#usage","text":"The following example is an Ansible Playbook that includes all the supported features: use this link if viewing the doc on github --- - name : \"Automation / Ansible / Node / Usage example\" hosts : \"**changeme**\" # Target hostname where the Ansible Node will be setup gather_facts : true vars : ansible_python_interpreter : \"/usr/bin/python3\" ansible_ssh_common_args : \"-o PreferredAuthentications=password -o PubkeyAuthentication=no -o StrictHostKeyChecking=no\" ansible_user : \"**changeme**\" # Login name of the user for the bootstrap process ansible_password : \"**changeme**\" # Password for the bootstrap user ansible_become_method : \"sudo\" ansible_become_password : \"{{ ansible_password }}\" tasks : - name : \"Example: Prepare (bootstrap) the managed node for Ansible operation\" vars : auto_ansible_node : prepare : true deploy : true provision : true bootstrap : true auto_ansible_node_user : name : \"amnode\" group : \"amnode\" home : \"/home/amnode\" description : \"Ansible managed node\" control_key : \"**changeme**\" # Full path to the SSH public key that will be installed in the managed node become_method : \"sudo\" ansible.builtin.include_role : name : \"serdigital64.automation.auto_ansible_node\" ... The playbook can be run by executing: # Set ANSIBLE_COLLECTIONS_PATHS to the default location. Change as needed. ANSIBLE_COLLECTIONS_PATHS = \" ${ HOME } /.ansible/collections\" ansible-playbook \" ${ ANSIBLE_COLLECTIONS_PATHS } /ansible_collections/serdigital64/automation/playbooks/auto_ansible_node.yml\"","title":"Usage"},{"location":"roles/auto_ansible_node/#role-parameters","text":"","title":"Role Parameters"},{"location":"roles/auto_ansible_node/#actions","text":"Use action-parameters to control what tasks are enabled for the role to execute. Parameters should be declared as task level vars as they are intented to be dynamic. auto_ansible_node : prepare : deploy : provision : bootstrap : Parameter Required? Type Default Purpose / Value prepare no boolean false Enable preparation tasks depploy no boolean false Enable deployment tasks provision no boolean false Enable provisioning tasks bootstrap no boolean false Enable bootstrap mode","title":"Actions"},{"location":"roles/auto_ansible_node/#end-state","text":"Use end-state parameters to define the target state after role execution. Parameters should be declared in host_vars or group_vars as they are intended to be permanent. auto_ansible_node_user : name : group : home : description : control_key : become_method : auto_ansible_node_bootstrap : user : password : become_method : become_password : Parameter Required? Type Default Purpose / Value auto_ansible_node_user yes dictionary Define managed node user details auto_ansible_node_user.name yes string \"amnode\" User name auto_ansible_node_user.group yes string \"amnode\" User's primary group auto_ansible_node_user.home yes string \"/home/amnode\" User's home directory auto_ansible_node_user.description yes string \"Ansible managed node\" User description auto_ansible_node_user.control_key yes string Full path to the SSH public Key auto_ansible_node_user.become_method yes string \"sudo\" Ansible become method auto_ansible_node_bootstrap no dictionary Define bootstrap details auto_ansible_node_bootstrap.user yes string \"sysadmin\" User name auto_ansible_node_bootstrap.password yes string User's password (plain or vault) auto_ansible_node_bootstrap.become_method yes string \"sudo\" Become method auto_ansible_node_bootstrap.become_password yes string Become password (plain or vault)","title":"End State"},{"location":"roles/auto_ansible_node/#deployment","text":"","title":"Deployment"},{"location":"roles/auto_ansible_node/#os-compatibility","text":"The operating system compatibility list is defined in the variable: auto_ansible_node_platforms","title":"OS Compatibility"},{"location":"roles/auto_ansible_node/#dependencies","text":"Ansible Collections: ansible.posix authorized_key","title":"Dependencies"},{"location":"roles/auto_ansible_node/#prerequisites","text":"The Ansible engine must be already installed and configured for privileged access and remote execution. In addition the following prerequisites must be met: Managed node: Bootstrap user with sudo privilege OS Packages: OpenSSH server Sudo Python3","title":"Prerequisites"},{"location":"roles/auto_ansible_node/#installation-procedure","text":"Manually install Ansible Collections from the Ansible Galaxy repository: ansible-galaxy collection install --upgrade serdigital64.automation Automatic installation is also available by deploying A:Platform64","title":"Installation Procedure"},{"location":"roles/auto_ansible_node/#contributing","text":"Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details.","title":"Contributing"},{"location":"roles/auto_ansible_node/#author","text":"SerDigital64","title":"Author"},{"location":"roles/auto_ansible_node/#license","text":"GPL-3.0-or-later","title":"License"},{"location":"roles/auto_aplatform64/","text":"Ansible Role: serdigital64.automation.auto_aplatform64 \u00b6 Purpose \u00b6 Implement the A:Platform64 automation platform. See the full description in the project homepage Deployment \u00b6 Compatibility \u00b6 Refer to the compatibility section in the A:Platform64 manual Requirements \u00b6 Refer to the prerequisites section in the A:Platform64 manual Ansible Dependencies \u00b6 The role requires the complete set of serdigital64 collections. Installation Procedure \u00b6 Refer to the deployment section in the A:Platform64 manual Contributing \u00b6 Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details. Author \u00b6 SerDigital64 License \u00b6 GPL-3.0-or-later","title":"auto_aplatform64"},{"location":"roles/auto_aplatform64/#ansible-role-serdigital64automationauto_aplatform64","text":"","title":"Ansible Role: serdigital64.automation.auto_aplatform64"},{"location":"roles/auto_aplatform64/#purpose","text":"Implement the A:Platform64 automation platform. See the full description in the project homepage","title":"Purpose"},{"location":"roles/auto_aplatform64/#deployment","text":"","title":"Deployment"},{"location":"roles/auto_aplatform64/#compatibility","text":"Refer to the compatibility section in the A:Platform64 manual","title":"Compatibility"},{"location":"roles/auto_aplatform64/#requirements","text":"Refer to the prerequisites section in the A:Platform64 manual","title":"Requirements"},{"location":"roles/auto_aplatform64/#ansible-dependencies","text":"The role requires the complete set of serdigital64 collections.","title":"Ansible Dependencies"},{"location":"roles/auto_aplatform64/#installation-procedure","text":"Refer to the deployment section in the A:Platform64 manual","title":"Installation Procedure"},{"location":"roles/auto_aplatform64/#contributing","text":"Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details.","title":"Contributing"},{"location":"roles/auto_aplatform64/#author","text":"SerDigital64","title":"Author"},{"location":"roles/auto_aplatform64/#license","text":"GPL-3.0-or-later","title":"License"},{"location":"roles/bkp_archive/","text":"Ansible Role: serdigital64.backup.bkp_archive \u00b6 Purpose \u00b6 Simplify the extraction of content from file archives. Supported features in the current version: Uncompress single file archive. (e.g.: installer.xz -> installer) Uncompress single directory archive. (e.g.: application_content.tar.xz -> application_content/) Archive formats: zip bzip2 xz compress tar compressed tar The bkp_archive Ansible-Role is part of the A:Platform64 project and is available in the backup Ansible-Collection. Usage \u00b6 The following example is an Ansible Playbook that includes all the supported features: use this link if viewing the doc on github --- - name : \"Backup / Archive / Usage example\" hosts : \"localhost\" gather_facts : true vars : test_file : \"terraform_1.1.2_linux_amd64.zip\" test_path_download : \"/tmp/test_path_download64\" test_path_open : \"/tmp/test_path_open64\" pre_tasks : - name : \"Create test paths\" ansible.builtin.file : state : \"directory\" mode : \"0700\" path : \"{{ item }}\" loop : - \"{{ test_path_download }}\" - \"{{ test_path_open }}\" - name : \"Download test file\" ansible.builtin.get_url : url : \"https://releases.hashicorp.com/terraform/1.1.2/{{ test_file }}\" dest : \"{{ test_path_download }}\" tasks : - name : \"Example: Extract the terraform CLI from the compressed file archive\" vars : bkp_archive : resolve_prereq : true deploy : true provision : true bkp_archive_files : - archive : path : \"{{ test_path_download }}\" file : \"{{ test_file }}\" keep : false content : path : \"{{ test_path_open }}\" name : \"terraform-cli\" ansible.builtin.include_role : name : \"serdigital64.backup.bkp_archive\" ... The playbook can be run by executing: # Set ANSIBLE_COLLECTIONS_PATHS to the default location. Change as needed. ANSIBLE_COLLECTIONS_PATHS = \" ${ HOME } /.ansible/collections\" ansible-playbook \" ${ ANSIBLE_COLLECTIONS_PATHS } /ansible_collections/serdigital64/backup/playbooks/bkp_archive.yml\" Role Parameters \u00b6 Actions \u00b6 Use action-parameters to control what tasks are enabled for the role to execute. Parameters should be declared as task level vars as they are intented to be dynamic. bkp_archive : resolve_prereq : deploy : provision : bkp_archive_files : - archive : path : file : keep : content : path : name : access : mode : file : dir : setype : owner : group : Parameter Required? Type Default Purpose / Value bkp_archive.resolve_prereq no boolean false Enable automatic resolution of prequisites bkp_archive.deploy no boolean false Enable installation of required operating system packages bkp_archive.provision no boolean false Enable processing of archive bkp_archive_files yes list List of archive files bkp_archive_files.0.archive yes dictionary File archive definition bkp_archive_files.0.archive.path yes string Full path to the archive file bkp_archive_files.0.archive.file yes string File archive name bkp_archive_files.0.archive.keep no boolean false Keep the archive after opening it?. If not the file is removed bkp_archive_files.0.content no dictionary Archive content definition bkp_archive_files.0.content.path yes string Full path where the content is located when not stored in the archive bkp_archive_files.0.content.name yes string Target name bkp_archive_files.0.content.access no dictionary Archive content permissions and ownership definition bkp_archive_files.0.content.access.mode.file no string File permissions (octal) when content is file bkp_archive_files.0.content.access.mode.dir no string Directory permissions (octal) when content is directory bkp_archive_files.0.content.access.mode.setype no string SELinux file type bkp_archive_files.0.content.access.owner no string File owner: user bkp_archive_files.0.content.access.group no string File owner: group End State \u00b6 Use end-state parameters to define the target state after role execution. Parameters should be declared in host_vars or group_vars as they are intended to be permanent. bkp_archive_packages_installed : Parameter Required? Type Default Purpose / Value bkp_archive_packages_installed no boolean true Set the package end state Deployment \u00b6 OS Compatibility \u00b6 The operating system compatibility list is defined in the variable: bkp_archive_platforms Dependencies \u00b6 Ansible Collections: serdigital64.system sys_repository Prerequisites \u00b6 The Ansible engine must be already installed and configured for privileged access and remote execution. In addition the following prerequisites can be automatically solved when running the playbook by setting the role action: resolve_prereq: true Package managers for the target application are installed and enabled. Installation Procedure \u00b6 Manually install Ansible Collections from the Ansible Galaxy repository: ansible-galaxy collection install --upgrade serdigital64.backup Automatic installation is also available by deploying A:Platform64 Contributing \u00b6 Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details. Author \u00b6 SerDigital64 License \u00b6 GPL-3.0-or-later","title":"bkp_archive"},{"location":"roles/bkp_archive/#ansible-role-serdigital64backupbkp_archive","text":"","title":"Ansible Role: serdigital64.backup.bkp_archive"},{"location":"roles/bkp_archive/#purpose","text":"Simplify the extraction of content from file archives. Supported features in the current version: Uncompress single file archive. (e.g.: installer.xz -> installer) Uncompress single directory archive. (e.g.: application_content.tar.xz -> application_content/) Archive formats: zip bzip2 xz compress tar compressed tar The bkp_archive Ansible-Role is part of the A:Platform64 project and is available in the backup Ansible-Collection.","title":"Purpose"},{"location":"roles/bkp_archive/#usage","text":"The following example is an Ansible Playbook that includes all the supported features: use this link if viewing the doc on github --- - name : \"Backup / Archive / Usage example\" hosts : \"localhost\" gather_facts : true vars : test_file : \"terraform_1.1.2_linux_amd64.zip\" test_path_download : \"/tmp/test_path_download64\" test_path_open : \"/tmp/test_path_open64\" pre_tasks : - name : \"Create test paths\" ansible.builtin.file : state : \"directory\" mode : \"0700\" path : \"{{ item }}\" loop : - \"{{ test_path_download }}\" - \"{{ test_path_open }}\" - name : \"Download test file\" ansible.builtin.get_url : url : \"https://releases.hashicorp.com/terraform/1.1.2/{{ test_file }}\" dest : \"{{ test_path_download }}\" tasks : - name : \"Example: Extract the terraform CLI from the compressed file archive\" vars : bkp_archive : resolve_prereq : true deploy : true provision : true bkp_archive_files : - archive : path : \"{{ test_path_download }}\" file : \"{{ test_file }}\" keep : false content : path : \"{{ test_path_open }}\" name : \"terraform-cli\" ansible.builtin.include_role : name : \"serdigital64.backup.bkp_archive\" ... The playbook can be run by executing: # Set ANSIBLE_COLLECTIONS_PATHS to the default location. Change as needed. ANSIBLE_COLLECTIONS_PATHS = \" ${ HOME } /.ansible/collections\" ansible-playbook \" ${ ANSIBLE_COLLECTIONS_PATHS } /ansible_collections/serdigital64/backup/playbooks/bkp_archive.yml\"","title":"Usage"},{"location":"roles/bkp_archive/#role-parameters","text":"","title":"Role Parameters"},{"location":"roles/bkp_archive/#actions","text":"Use action-parameters to control what tasks are enabled for the role to execute. Parameters should be declared as task level vars as they are intented to be dynamic. bkp_archive : resolve_prereq : deploy : provision : bkp_archive_files : - archive : path : file : keep : content : path : name : access : mode : file : dir : setype : owner : group : Parameter Required? Type Default Purpose / Value bkp_archive.resolve_prereq no boolean false Enable automatic resolution of prequisites bkp_archive.deploy no boolean false Enable installation of required operating system packages bkp_archive.provision no boolean false Enable processing of archive bkp_archive_files yes list List of archive files bkp_archive_files.0.archive yes dictionary File archive definition bkp_archive_files.0.archive.path yes string Full path to the archive file bkp_archive_files.0.archive.file yes string File archive name bkp_archive_files.0.archive.keep no boolean false Keep the archive after opening it?. If not the file is removed bkp_archive_files.0.content no dictionary Archive content definition bkp_archive_files.0.content.path yes string Full path where the content is located when not stored in the archive bkp_archive_files.0.content.name yes string Target name bkp_archive_files.0.content.access no dictionary Archive content permissions and ownership definition bkp_archive_files.0.content.access.mode.file no string File permissions (octal) when content is file bkp_archive_files.0.content.access.mode.dir no string Directory permissions (octal) when content is directory bkp_archive_files.0.content.access.mode.setype no string SELinux file type bkp_archive_files.0.content.access.owner no string File owner: user bkp_archive_files.0.content.access.group no string File owner: group","title":"Actions"},{"location":"roles/bkp_archive/#end-state","text":"Use end-state parameters to define the target state after role execution. Parameters should be declared in host_vars or group_vars as they are intended to be permanent. bkp_archive_packages_installed : Parameter Required? Type Default Purpose / Value bkp_archive_packages_installed no boolean true Set the package end state","title":"End State"},{"location":"roles/bkp_archive/#deployment","text":"","title":"Deployment"},{"location":"roles/bkp_archive/#os-compatibility","text":"The operating system compatibility list is defined in the variable: bkp_archive_platforms","title":"OS Compatibility"},{"location":"roles/bkp_archive/#dependencies","text":"Ansible Collections: serdigital64.system sys_repository","title":"Dependencies"},{"location":"roles/bkp_archive/#prerequisites","text":"The Ansible engine must be already installed and configured for privileged access and remote execution. In addition the following prerequisites can be automatically solved when running the playbook by setting the role action: resolve_prereq: true Package managers for the target application are installed and enabled.","title":"Prerequisites"},{"location":"roles/bkp_archive/#installation-procedure","text":"Manually install Ansible Collections from the Ansible Galaxy repository: ansible-galaxy collection install --upgrade serdigital64.backup Automatic installation is also available by deploying A:Platform64","title":"Installation Procedure"},{"location":"roles/bkp_archive/#contributing","text":"Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details.","title":"Contributing"},{"location":"roles/bkp_archive/#author","text":"SerDigital64","title":"Author"},{"location":"roles/bkp_archive/#license","text":"GPL-3.0-or-later","title":"License"},{"location":"roles/bkp_rclone_server/","text":"Ansible Role: serdigital64.backup.bkp_rclone_server \u00b6 Purpose \u00b6 Manage provisioning of RClone as a server. Supported features in the current version: Deploy application. Packages are defined in the variable bkp_rclone_server_profiles . The bkp_rclone_server Ansible-Role is part of the A:Platform64 project and is available in the backup Ansible-Collection. Usage \u00b6 The following example is an Ansible Playbook that includes all the supported features: use this link if viewing the doc on github --- - name : \"Backup / RClone / Server / Usage example\" hosts : \"localhost\" gather_facts : true tasks : - name : \"Example: Install RClone Server\" vars : bkp_rclone_server : resolve_prereq : true deploy : true ansible.builtin.include_role : name : \"serdigital64.backup.bkp_rclone_server\" ... The playbook can be run by executing: # Set ANSIBLE_COLLECTIONS_PATHS to the default location. Change as needed. ANSIBLE_COLLECTIONS_PATHS = \" ${ HOME } /.ansible/collections\" ansible-playbook \" ${ ANSIBLE_COLLECTIONS_PATHS } /ansible_collections/serdigital64/backup/playbooks/bkp_rclone_server.yml\" Role Parameters \u00b6 Actions \u00b6 Use action-parameters to control what tasks are enabled for the role to execute. Parameters should be declared as task level vars as they are intented to be dynamic. bkp_rclone_server : resolve_prereq : deploy : Parameter Required? Type Default Purpose / Value bkp_rclone_server.resolve_prereq no boolean false Enable automatic resolution of prequisites bkp_rclone_server.deploy no boolean false Enable installation of application packages End State \u00b6 Use end-state parameters to define the target state after role execution. Parameters should be declared in host_vars or group_vars as they are intended to be permanent. bkp_rclone_server_application : name : type : version : installed : Parameter Required? Type Default Purpose / Value bkp_rclone_server_application no dictionary Set application package end state bkp_rclone_server_application.name no string \"rclone\" Select application package name bkp_rclone_server_application.type no string \"binary\" Select application package type bkp_rclone_server_application.installed no boolean true Set application package end state bkp_rclone_server_application.version no string \"v0_12\" Select application package version Deployment \u00b6 OS Compatibility \u00b6 CentOS8 RedHat8 AlmaLinux8 OracleLinux8 Ubuntu20 Ubuntu21 Fedora33 Fedora35 Debian10 Debian11 Dependencies \u00b6 Ansible Collections: serdigital64.backup bkp_archive serdigital64.system sys_package sys_repository Prerequisites \u00b6 The Ansible engine must be already installed and configured for privileged access and remote execution. In addition the following prerequisites can be automatically solved when running the playbook by setting the role action: resolve_prereq: true Package manager for the target application is installed and enabled. Installation Procedure \u00b6 Manually install Ansible Collections from the Ansible Galaxy repository: ansible-galaxy collection install --upgrade serdigital64.backup Automatic installation is also available by deploying A:Platform64 Contributing \u00b6 Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details. Author \u00b6 SerDigital64 License \u00b6 GPL-3.0-or-later","title":"bkp_rclone_server"},{"location":"roles/bkp_rclone_server/#ansible-role-serdigital64backupbkp_rclone_server","text":"","title":"Ansible Role: serdigital64.backup.bkp_rclone_server"},{"location":"roles/bkp_rclone_server/#purpose","text":"Manage provisioning of RClone as a server. Supported features in the current version: Deploy application. Packages are defined in the variable bkp_rclone_server_profiles . The bkp_rclone_server Ansible-Role is part of the A:Platform64 project and is available in the backup Ansible-Collection.","title":"Purpose"},{"location":"roles/bkp_rclone_server/#usage","text":"The following example is an Ansible Playbook that includes all the supported features: use this link if viewing the doc on github --- - name : \"Backup / RClone / Server / Usage example\" hosts : \"localhost\" gather_facts : true tasks : - name : \"Example: Install RClone Server\" vars : bkp_rclone_server : resolve_prereq : true deploy : true ansible.builtin.include_role : name : \"serdigital64.backup.bkp_rclone_server\" ... The playbook can be run by executing: # Set ANSIBLE_COLLECTIONS_PATHS to the default location. Change as needed. ANSIBLE_COLLECTIONS_PATHS = \" ${ HOME } /.ansible/collections\" ansible-playbook \" ${ ANSIBLE_COLLECTIONS_PATHS } /ansible_collections/serdigital64/backup/playbooks/bkp_rclone_server.yml\"","title":"Usage"},{"location":"roles/bkp_rclone_server/#role-parameters","text":"","title":"Role Parameters"},{"location":"roles/bkp_rclone_server/#actions","text":"Use action-parameters to control what tasks are enabled for the role to execute. Parameters should be declared as task level vars as they are intented to be dynamic. bkp_rclone_server : resolve_prereq : deploy : Parameter Required? Type Default Purpose / Value bkp_rclone_server.resolve_prereq no boolean false Enable automatic resolution of prequisites bkp_rclone_server.deploy no boolean false Enable installation of application packages","title":"Actions"},{"location":"roles/bkp_rclone_server/#end-state","text":"Use end-state parameters to define the target state after role execution. Parameters should be declared in host_vars or group_vars as they are intended to be permanent. bkp_rclone_server_application : name : type : version : installed : Parameter Required? Type Default Purpose / Value bkp_rclone_server_application no dictionary Set application package end state bkp_rclone_server_application.name no string \"rclone\" Select application package name bkp_rclone_server_application.type no string \"binary\" Select application package type bkp_rclone_server_application.installed no boolean true Set application package end state bkp_rclone_server_application.version no string \"v0_12\" Select application package version","title":"End State"},{"location":"roles/bkp_rclone_server/#deployment","text":"","title":"Deployment"},{"location":"roles/bkp_rclone_server/#os-compatibility","text":"CentOS8 RedHat8 AlmaLinux8 OracleLinux8 Ubuntu20 Ubuntu21 Fedora33 Fedora35 Debian10 Debian11","title":"OS Compatibility"},{"location":"roles/bkp_rclone_server/#dependencies","text":"Ansible Collections: serdigital64.backup bkp_archive serdigital64.system sys_package sys_repository","title":"Dependencies"},{"location":"roles/bkp_rclone_server/#prerequisites","text":"The Ansible engine must be already installed and configured for privileged access and remote execution. In addition the following prerequisites can be automatically solved when running the playbook by setting the role action: resolve_prereq: true Package manager for the target application is installed and enabled.","title":"Prerequisites"},{"location":"roles/bkp_rclone_server/#installation-procedure","text":"Manually install Ansible Collections from the Ansible Galaxy repository: ansible-galaxy collection install --upgrade serdigital64.backup Automatic installation is also available by deploying A:Platform64","title":"Installation Procedure"},{"location":"roles/bkp_rclone_server/#contributing","text":"Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details.","title":"Contributing"},{"location":"roles/bkp_rclone_server/#author","text":"SerDigital64","title":"Author"},{"location":"roles/bkp_rclone_server/#license","text":"GPL-3.0-or-later","title":"License"},{"location":"roles/bkp_restic/","text":"Ansible Role: serdigital64.backup.bkp_restic \u00b6 Purpose \u00b6 Manage provisioning of the Restic tool. Supported features in the current version: Deploy application. Packages are defined in the variable bkp_restic_profiles . The bkp_restic Ansible-Role is part of the A:Platform64 project and is available in the backup Ansible-Collection. Usage \u00b6 The following example is an Ansible Playbook that includes all the supported features: use this link if viewing the doc on github --- - name : \"Backup / Restic / Usage example\" hosts : \"localhost\" gather_facts : true tasks : - name : \"Example: Install Restic\" vars : bkp_restic : resolve_prereq : true deploy : true ansible.builtin.include_role : name : \"serdigital64.backup.bkp_restic\" ... The playbook can be run by executing: # Set ANSIBLE_COLLECTIONS_PATHS to the default location. Change as needed. ANSIBLE_COLLECTIONS_PATHS = \" ${ HOME } /.ansible/collections\" ansible-playbook \" ${ ANSIBLE_COLLECTIONS_PATHS } /ansible_collections/serdigital64/backup/playbooks/bkp_restic.yml\" Role Parameters \u00b6 Actions \u00b6 Use action-parameters to control what tasks are enabled for the role to execute. Parameters should be declared as task level vars as they are intented to be dynamic. bkp_restic : resolve_prereq : deploy : Parameter Required? Type Default Purpose / Value bkp_restic.resolve_prereq no boolean false Enable automatic resolution of prequisites bkp_restic.deploy no boolean false Enable installation of application packages End State \u00b6 Use end-state parameters to define the target state after role execution. Parameters should be declared in host_vars or group_vars as they are intended to be permanent. bkp_restic_application : name : type : version : installed : Parameter Required? Type Default Purpose / Value bkp_restic_application no dictionary Set application package end state bkp_restic_application.name no string \"restic\" Select application package name bkp_restic_application.type no string \"binary\" Select application package type bkp_restic_application.installed no boolean true Set application package end state bkp_restic_application.version no string \"v0_12\" Select application package version Deployment \u00b6 OS Compatibility \u00b6 CentOS8 RedHat8 AlmaLinux8 OracleLinux8 Ubuntu20 Ubuntu21 Fedora33 Fedora35 Debian10 Debian11 Dependencies \u00b6 Ansible Collections: serdigital64.backup bkp_archive serdigital64.system sys_package sys_repository Prerequisites \u00b6 The Ansible engine must be already installed and configured for privileged access and remote execution. In addition the following prerequisites can be automatically solved when running the playbook by setting the role action: resolve_prereq: true Package manager for the target application is installed and enabled. Installation Procedure \u00b6 Manually install Ansible Collections from the Ansible Galaxy repository: ansible-galaxy collection install --upgrade serdigital64.backup Automatic installation is also available by deploying A:Platform64 Contributing \u00b6 Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details. Author \u00b6 SerDigital64 License \u00b6 GPL-3.0-or-later","title":"bkp_restic"},{"location":"roles/bkp_restic/#ansible-role-serdigital64backupbkp_restic","text":"","title":"Ansible Role: serdigital64.backup.bkp_restic"},{"location":"roles/bkp_restic/#purpose","text":"Manage provisioning of the Restic tool. Supported features in the current version: Deploy application. Packages are defined in the variable bkp_restic_profiles . The bkp_restic Ansible-Role is part of the A:Platform64 project and is available in the backup Ansible-Collection.","title":"Purpose"},{"location":"roles/bkp_restic/#usage","text":"The following example is an Ansible Playbook that includes all the supported features: use this link if viewing the doc on github --- - name : \"Backup / Restic / Usage example\" hosts : \"localhost\" gather_facts : true tasks : - name : \"Example: Install Restic\" vars : bkp_restic : resolve_prereq : true deploy : true ansible.builtin.include_role : name : \"serdigital64.backup.bkp_restic\" ... The playbook can be run by executing: # Set ANSIBLE_COLLECTIONS_PATHS to the default location. Change as needed. ANSIBLE_COLLECTIONS_PATHS = \" ${ HOME } /.ansible/collections\" ansible-playbook \" ${ ANSIBLE_COLLECTIONS_PATHS } /ansible_collections/serdigital64/backup/playbooks/bkp_restic.yml\"","title":"Usage"},{"location":"roles/bkp_restic/#role-parameters","text":"","title":"Role Parameters"},{"location":"roles/bkp_restic/#actions","text":"Use action-parameters to control what tasks are enabled for the role to execute. Parameters should be declared as task level vars as they are intented to be dynamic. bkp_restic : resolve_prereq : deploy : Parameter Required? Type Default Purpose / Value bkp_restic.resolve_prereq no boolean false Enable automatic resolution of prequisites bkp_restic.deploy no boolean false Enable installation of application packages","title":"Actions"},{"location":"roles/bkp_restic/#end-state","text":"Use end-state parameters to define the target state after role execution. Parameters should be declared in host_vars or group_vars as they are intended to be permanent. bkp_restic_application : name : type : version : installed : Parameter Required? Type Default Purpose / Value bkp_restic_application no dictionary Set application package end state bkp_restic_application.name no string \"restic\" Select application package name bkp_restic_application.type no string \"binary\" Select application package type bkp_restic_application.installed no boolean true Set application package end state bkp_restic_application.version no string \"v0_12\" Select application package version","title":"End State"},{"location":"roles/bkp_restic/#deployment","text":"","title":"Deployment"},{"location":"roles/bkp_restic/#os-compatibility","text":"CentOS8 RedHat8 AlmaLinux8 OracleLinux8 Ubuntu20 Ubuntu21 Fedora33 Fedora35 Debian10 Debian11","title":"OS Compatibility"},{"location":"roles/bkp_restic/#dependencies","text":"Ansible Collections: serdigital64.backup bkp_archive serdigital64.system sys_package sys_repository","title":"Dependencies"},{"location":"roles/bkp_restic/#prerequisites","text":"The Ansible engine must be already installed and configured for privileged access and remote execution. In addition the following prerequisites can be automatically solved when running the playbook by setting the role action: resolve_prereq: true Package manager for the target application is installed and enabled.","title":"Prerequisites"},{"location":"roles/bkp_restic/#installation-procedure","text":"Manually install Ansible Collections from the Ansible Galaxy repository: ansible-galaxy collection install --upgrade serdigital64.backup Automatic installation is also available by deploying A:Platform64","title":"Installation Procedure"},{"location":"roles/bkp_restic/#contributing","text":"Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details.","title":"Contributing"},{"location":"roles/bkp_restic/#author","text":"SerDigital64","title":"Author"},{"location":"roles/bkp_restic/#license","text":"GPL-3.0-or-later","title":"License"},{"location":"roles/cloud_aws_cli/","text":"Ansible Role: serdigital64.cloud.cloud_aws_cli \u00b6 Purpose \u00b6 Manage provisioning of AWS CLI Supported features in the current version: Resolve prerequisites: Install OS tools Deploy application. Packages are defined in the variable cloud_aws_cli_profiles . Create directory structure for configuration files The cloud_aws_cli Ansible-Role is part of the A:Platform64 project and is available in the cloud Ansible-Collection. Usage \u00b6 The following example is an Ansible Playbook that includes all the supported features: use this link if viewing the doc on github --- - name : \"Cloud / AWS / CLI / Usage example\" hosts : \"localhost\" gather_facts : true tasks : - name : \"Example: Install AWS CLI from the AWS site\" vars : cloud_aws_cli : resolve_prereq : true prepare : true deploy : true ansible.builtin.include_role : name : \"serdigital64.cloud.cloud_aws_cli\" ... The playbook can be run by executing: # Set ANSIBLE_COLLECTIONS_PATHS to the default location. Change as needed. ANSIBLE_COLLECTIONS_PATHS = \" ${ HOME } /.ansible/collections\" ansible-playbook \" ${ ANSIBLE_COLLECTIONS_PATHS } /ansible_collections/serdigital64/cloud/playbooks/cloud_aws_cli.yml\" Role Parameters \u00b6 Actions \u00b6 Use action-parameters to control what tasks are enabled for the role to execute. Parameters should be declared as task level vars as they are intented to be dynamic. cloud_aws_cli : resolve_prereq : prepare : deploy : Parameter Required? Type Default Purpose / Value cloud_aws_cli.resolve_prereq no boolean false Enable automatic resolution of prequisites cloud_aws_cli.prepare no boolean false Enable environment preparation cloud_aws_cli.deploy no boolean false Enable installation of application packages End State \u00b6 Use end-state parameters to define the target state after role execution. Parameters should be declared in host_vars or group_vars as they are intended to be permanent. cloud_aws_cli_application : name : type : version : installed : cloud_aws_cli_paths : etc : cloud_aws_cli_users : cloudadm : name : group : home : Parameter Required? Type Default Purpose / Value cloud_aws_cli_application yes(deploy) dictionary Set application package end state cloud_aws_cli_application.name yes(deploy) string \"awscli\" Select application package name cloud_aws_cli_application.type yes(deploy) string \"binary\" Select application package type cloud_aws_cli_application.version yes(deploy) string \"latest\" Select application package version cloud_aws_cli_application.installed yes(deploy) boolean true Set application package end state cloud_aws_cli_paths no dictionary Set paths cloud_aws_cli_paths.etc no string Set configuration repository cloud_aws_cli_users no dictionary Define users cloud_aws_cli_users.cloudadm no dictionary Define configuration owner cloud_aws_cli_users.cloudadm.name no string Set login name cloud_aws_cli_users.cloudadm.group no string Set group name cloud_aws_cli_users.cloudadm.home no string Set home directory Deployment \u00b6 OS Compatibility \u00b6 CentOS8 OracleLinux8 Ubuntu20 Ubuntu21 Fedora33 Fedora35 Debian10 Debian11 Dependencies \u00b6 Ansible Collections: serdigital64.backup bkp_archive serdigital64.system sys_package sys_repository Prerequisites \u00b6 The Ansible engine must be already installed and configured for privileged access and remote execution. In addition the following prerequisites can be automatically solved when running the playbook by setting the role action: resolve_prereq: true Package manager for the target application is installed and enabled. OS tools: groff less Installation Procedure \u00b6 Manually install Ansible Collections from the Ansible Galaxy repository: ansible-galaxy collection install --upgrade serdigital64.cloud Automatic installation is also available by deploying A:Platform64 Contributing \u00b6 Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details. Author \u00b6 SerDigital64 License \u00b6 GPL-3.0-or-later","title":"cloud_aws_cli"},{"location":"roles/cloud_aws_cli/#ansible-role-serdigital64cloudcloud_aws_cli","text":"","title":"Ansible Role: serdigital64.cloud.cloud_aws_cli"},{"location":"roles/cloud_aws_cli/#purpose","text":"Manage provisioning of AWS CLI Supported features in the current version: Resolve prerequisites: Install OS tools Deploy application. Packages are defined in the variable cloud_aws_cli_profiles . Create directory structure for configuration files The cloud_aws_cli Ansible-Role is part of the A:Platform64 project and is available in the cloud Ansible-Collection.","title":"Purpose"},{"location":"roles/cloud_aws_cli/#usage","text":"The following example is an Ansible Playbook that includes all the supported features: use this link if viewing the doc on github --- - name : \"Cloud / AWS / CLI / Usage example\" hosts : \"localhost\" gather_facts : true tasks : - name : \"Example: Install AWS CLI from the AWS site\" vars : cloud_aws_cli : resolve_prereq : true prepare : true deploy : true ansible.builtin.include_role : name : \"serdigital64.cloud.cloud_aws_cli\" ... The playbook can be run by executing: # Set ANSIBLE_COLLECTIONS_PATHS to the default location. Change as needed. ANSIBLE_COLLECTIONS_PATHS = \" ${ HOME } /.ansible/collections\" ansible-playbook \" ${ ANSIBLE_COLLECTIONS_PATHS } /ansible_collections/serdigital64/cloud/playbooks/cloud_aws_cli.yml\"","title":"Usage"},{"location":"roles/cloud_aws_cli/#role-parameters","text":"","title":"Role Parameters"},{"location":"roles/cloud_aws_cli/#actions","text":"Use action-parameters to control what tasks are enabled for the role to execute. Parameters should be declared as task level vars as they are intented to be dynamic. cloud_aws_cli : resolve_prereq : prepare : deploy : Parameter Required? Type Default Purpose / Value cloud_aws_cli.resolve_prereq no boolean false Enable automatic resolution of prequisites cloud_aws_cli.prepare no boolean false Enable environment preparation cloud_aws_cli.deploy no boolean false Enable installation of application packages","title":"Actions"},{"location":"roles/cloud_aws_cli/#end-state","text":"Use end-state parameters to define the target state after role execution. Parameters should be declared in host_vars or group_vars as they are intended to be permanent. cloud_aws_cli_application : name : type : version : installed : cloud_aws_cli_paths : etc : cloud_aws_cli_users : cloudadm : name : group : home : Parameter Required? Type Default Purpose / Value cloud_aws_cli_application yes(deploy) dictionary Set application package end state cloud_aws_cli_application.name yes(deploy) string \"awscli\" Select application package name cloud_aws_cli_application.type yes(deploy) string \"binary\" Select application package type cloud_aws_cli_application.version yes(deploy) string \"latest\" Select application package version cloud_aws_cli_application.installed yes(deploy) boolean true Set application package end state cloud_aws_cli_paths no dictionary Set paths cloud_aws_cli_paths.etc no string Set configuration repository cloud_aws_cli_users no dictionary Define users cloud_aws_cli_users.cloudadm no dictionary Define configuration owner cloud_aws_cli_users.cloudadm.name no string Set login name cloud_aws_cli_users.cloudadm.group no string Set group name cloud_aws_cli_users.cloudadm.home no string Set home directory","title":"End State"},{"location":"roles/cloud_aws_cli/#deployment","text":"","title":"Deployment"},{"location":"roles/cloud_aws_cli/#os-compatibility","text":"CentOS8 OracleLinux8 Ubuntu20 Ubuntu21 Fedora33 Fedora35 Debian10 Debian11","title":"OS Compatibility"},{"location":"roles/cloud_aws_cli/#dependencies","text":"Ansible Collections: serdigital64.backup bkp_archive serdigital64.system sys_package sys_repository","title":"Dependencies"},{"location":"roles/cloud_aws_cli/#prerequisites","text":"The Ansible engine must be already installed and configured for privileged access and remote execution. In addition the following prerequisites can be automatically solved when running the playbook by setting the role action: resolve_prereq: true Package manager for the target application is installed and enabled. OS tools: groff less","title":"Prerequisites"},{"location":"roles/cloud_aws_cli/#installation-procedure","text":"Manually install Ansible Collections from the Ansible Galaxy repository: ansible-galaxy collection install --upgrade serdigital64.cloud Automatic installation is also available by deploying A:Platform64","title":"Installation Procedure"},{"location":"roles/cloud_aws_cli/#contributing","text":"Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details.","title":"Contributing"},{"location":"roles/cloud_aws_cli/#author","text":"SerDigital64","title":"Author"},{"location":"roles/cloud_aws_cli/#license","text":"GPL-3.0-or-later","title":"License"},{"location":"roles/cloud_aws_realm/","text":"Ansible Role: serdigital64.cloud.cloud_aws_realm \u00b6 Purpose \u00b6 Manage AWS Accounts, IAM and Organizations. The idea is to simplify the setup of small AWS accounts by implementing a predefine structure where regular users can be assigned. Supported features in the current version: Implement predefined structure for: IAM Users IAM Groups IAM Policies Create regular IAM users. Create automation IAM user. Assign regular IAM users to predefined IAM groups. The structure has the following elements: Predefined IAM Users (variable cloud_aws_realm_structure_managers ) iam_manager_auto : dedicated IAM Management user for automation scripts. cloud_manager_auto : dedicated CLoud Management user for cloud infrastructure automation scripts. Predefined IAM policies (variable cloud_aws_realm_structure_policies ) billing_full_access : Full access to AWS Billing billing_view_access : View only access to AWS Billing Predefined IAM groups (variable cloud_aws_realm_structure_groups ) billing_managers_auto billing_managers billing_auditors iam_managers_auto iam_managers iam_auditors cloud_managers cloud_auditors The role uses the root AWS Account for the initial setup. After the IAM administrator user is created the root credential can be removed. The cloud_aws_realm Ansible-Role is part of the A:Platform64 project and is available in the cloud Ansible-Collection. Usage \u00b6 The following example is an Ansible Playbook that includes all the supported features: use this link if viewing the doc on github --- - name : \"Cloud / AWS / Realm / Usage example\" hosts : \"localhost\" gather_facts : true tasks : - name : \"Example: implement realm in the AWS account ACME\" vars : cloud_aws_realm : provision : true cloud_aws_realm_users : - name : \"blgmgr\" - name : \"blgadtr\" - name : \"iammgr\" - name : \"iamadtr\" - name : \"cloudmgr\" - name : \"cloudadtr\" cloud_aws_realm_groups : - name : \"billing_managers\" users : - \"blgmgr\" - name : \"billing_auditors\" users : - \"blgadtr\" - name : \"iam_managers\" users : - \"iammgr\" - name : \"iam_auditors\" users : - \"iamadtr\" - name : \"cloud_managers\" users : - \"cloudmgr\" - name : \"cloud_auditors\" users : - \"cloudadtr\" cloud_aws_realm_account : id : \"**change_me**\" name : \"**change_me**\" cloud_aws_realm_api : root : key : \"**change_me**\" secret : \"**change_me**\" ansible.builtin.include_role : name : \"serdigital64.cloud.cloud_aws_realm\" ... The playbook can be run by executing: # Set ANSIBLE_COLLECTIONS_PATHS to the default location. Change as needed. ANSIBLE_COLLECTIONS_PATHS = \" ${ HOME } /.ansible/collections\" ansible-playbook \" ${ ANSIBLE_COLLECTIONS_PATHS } /ansible_collections/serdigital64/cloud/playbooks/cloud_aws_realm.yml\" Role Parameters \u00b6 Actions \u00b6 Use action-parameters to control what tasks are enabled for the role to execute. Parameters should be declared as task level vars as they are intented to be dynamic. cloud_aws_realm : provision : Parameter Required? Type Default Purpose / Value cloud_aws_realm.provision no boolean false Enable realm provisioning End State \u00b6 Use end-state parameters to define the target state after role execution. Parameters should be declared in host_vars or group_vars as they are intended to be permanent. cloud_aws_realm_users : - name : cloud_aws_realm_groups : - name : users : cloud_aws_realm_account : id : name : cloud_aws_realm_api : root : key : secret : iam_manager_auto : key : secret : cloud_manager_auto : key : secret : Parameter Required? Type Default Purpose / Value cloud_aws_realm_users No list Define regular IAM users cloud_aws_realm_users.name No string User name cloud_aws_realm_groups No list Assign IAM users to predefined groups cloud_aws_realm_groups.name No string Predefined group name cloud_aws_realm_groups.users No list List of users to be added to the group cloud_aws_realm_groups.users.0 No string Regular IAM user name cloud_aws_realm_account Yes(Provision) dictionary Define AWS account details cloud_aws_realm_account.id Yes(Provision) string **changeme** Account ID cloud_aws_realm_account.name Yes(Provision) string **changeme** Account login name cloud_aws_realm_api Yes(Provision) dictionary Define AWS remote access credentials cloud_aws_realm_api.root No dictionary Initial setup credential cloud_aws_realm_api.root.key No string **changeme** API Key cloud_aws_realm_api.root.secret No string **changeme** API Secret cloud_aws_realm_api.iam_manager_auto Yes(Provision) dictionary Permament credentials for IAM management cloud_aws_realm_api.iam_manager_auto.key Yes(Provision) string **changeme** API Key cloud_aws_realm_api.iam_manager_auto.secret Yes(Provision) string **changeme** API Secret cloud_aws_realm_api.cloud_manager_auto Yes(Provision) dictionary Permament credentials for Cloud management cloud_aws_realm_api.cloud_manager_autoo.key Yes(Provision) string **changeme** API Key cloud_aws_realm_api.cloud_manager_autoo.secret Yes(Provision) string **changeme** API Secret Deployment \u00b6 OS Compatibility \u00b6 CentOS8 OracleLinux8 Ubuntu20 Ubuntu21 Fedora33 Fedora35 Debian10 Debian11 Dependencies \u00b6 Ansible Collections: community.aws Prerequisites \u00b6 Python modules (required by community.aws) boto boto3 botocore s3transfer jmespath Installation Procedure \u00b6 The role can be provisioned by installing the Ansible-Collection from the Ansible Galaxy repository: https://galaxy.ansible.com/serdigital64/cloud ansible-galaxy collection install --upgrade serdigital64.cloud Automatic installation is also available by deploying A:Platform64 Contributing \u00b6 Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details. Author \u00b6 SerDigital64 License \u00b6 GPL-3.0-or-later","title":"cloud_aws_realm"},{"location":"roles/cloud_aws_realm/#ansible-role-serdigital64cloudcloud_aws_realm","text":"","title":"Ansible Role: serdigital64.cloud.cloud_aws_realm"},{"location":"roles/cloud_aws_realm/#purpose","text":"Manage AWS Accounts, IAM and Organizations. The idea is to simplify the setup of small AWS accounts by implementing a predefine structure where regular users can be assigned. Supported features in the current version: Implement predefined structure for: IAM Users IAM Groups IAM Policies Create regular IAM users. Create automation IAM user. Assign regular IAM users to predefined IAM groups. The structure has the following elements: Predefined IAM Users (variable cloud_aws_realm_structure_managers ) iam_manager_auto : dedicated IAM Management user for automation scripts. cloud_manager_auto : dedicated CLoud Management user for cloud infrastructure automation scripts. Predefined IAM policies (variable cloud_aws_realm_structure_policies ) billing_full_access : Full access to AWS Billing billing_view_access : View only access to AWS Billing Predefined IAM groups (variable cloud_aws_realm_structure_groups ) billing_managers_auto billing_managers billing_auditors iam_managers_auto iam_managers iam_auditors cloud_managers cloud_auditors The role uses the root AWS Account for the initial setup. After the IAM administrator user is created the root credential can be removed. The cloud_aws_realm Ansible-Role is part of the A:Platform64 project and is available in the cloud Ansible-Collection.","title":"Purpose"},{"location":"roles/cloud_aws_realm/#usage","text":"The following example is an Ansible Playbook that includes all the supported features: use this link if viewing the doc on github --- - name : \"Cloud / AWS / Realm / Usage example\" hosts : \"localhost\" gather_facts : true tasks : - name : \"Example: implement realm in the AWS account ACME\" vars : cloud_aws_realm : provision : true cloud_aws_realm_users : - name : \"blgmgr\" - name : \"blgadtr\" - name : \"iammgr\" - name : \"iamadtr\" - name : \"cloudmgr\" - name : \"cloudadtr\" cloud_aws_realm_groups : - name : \"billing_managers\" users : - \"blgmgr\" - name : \"billing_auditors\" users : - \"blgadtr\" - name : \"iam_managers\" users : - \"iammgr\" - name : \"iam_auditors\" users : - \"iamadtr\" - name : \"cloud_managers\" users : - \"cloudmgr\" - name : \"cloud_auditors\" users : - \"cloudadtr\" cloud_aws_realm_account : id : \"**change_me**\" name : \"**change_me**\" cloud_aws_realm_api : root : key : \"**change_me**\" secret : \"**change_me**\" ansible.builtin.include_role : name : \"serdigital64.cloud.cloud_aws_realm\" ... The playbook can be run by executing: # Set ANSIBLE_COLLECTIONS_PATHS to the default location. Change as needed. ANSIBLE_COLLECTIONS_PATHS = \" ${ HOME } /.ansible/collections\" ansible-playbook \" ${ ANSIBLE_COLLECTIONS_PATHS } /ansible_collections/serdigital64/cloud/playbooks/cloud_aws_realm.yml\"","title":"Usage"},{"location":"roles/cloud_aws_realm/#role-parameters","text":"","title":"Role Parameters"},{"location":"roles/cloud_aws_realm/#actions","text":"Use action-parameters to control what tasks are enabled for the role to execute. Parameters should be declared as task level vars as they are intented to be dynamic. cloud_aws_realm : provision : Parameter Required? Type Default Purpose / Value cloud_aws_realm.provision no boolean false Enable realm provisioning","title":"Actions"},{"location":"roles/cloud_aws_realm/#end-state","text":"Use end-state parameters to define the target state after role execution. Parameters should be declared in host_vars or group_vars as they are intended to be permanent. cloud_aws_realm_users : - name : cloud_aws_realm_groups : - name : users : cloud_aws_realm_account : id : name : cloud_aws_realm_api : root : key : secret : iam_manager_auto : key : secret : cloud_manager_auto : key : secret : Parameter Required? Type Default Purpose / Value cloud_aws_realm_users No list Define regular IAM users cloud_aws_realm_users.name No string User name cloud_aws_realm_groups No list Assign IAM users to predefined groups cloud_aws_realm_groups.name No string Predefined group name cloud_aws_realm_groups.users No list List of users to be added to the group cloud_aws_realm_groups.users.0 No string Regular IAM user name cloud_aws_realm_account Yes(Provision) dictionary Define AWS account details cloud_aws_realm_account.id Yes(Provision) string **changeme** Account ID cloud_aws_realm_account.name Yes(Provision) string **changeme** Account login name cloud_aws_realm_api Yes(Provision) dictionary Define AWS remote access credentials cloud_aws_realm_api.root No dictionary Initial setup credential cloud_aws_realm_api.root.key No string **changeme** API Key cloud_aws_realm_api.root.secret No string **changeme** API Secret cloud_aws_realm_api.iam_manager_auto Yes(Provision) dictionary Permament credentials for IAM management cloud_aws_realm_api.iam_manager_auto.key Yes(Provision) string **changeme** API Key cloud_aws_realm_api.iam_manager_auto.secret Yes(Provision) string **changeme** API Secret cloud_aws_realm_api.cloud_manager_auto Yes(Provision) dictionary Permament credentials for Cloud management cloud_aws_realm_api.cloud_manager_autoo.key Yes(Provision) string **changeme** API Key cloud_aws_realm_api.cloud_manager_autoo.secret Yes(Provision) string **changeme** API Secret","title":"End State"},{"location":"roles/cloud_aws_realm/#deployment","text":"","title":"Deployment"},{"location":"roles/cloud_aws_realm/#os-compatibility","text":"CentOS8 OracleLinux8 Ubuntu20 Ubuntu21 Fedora33 Fedora35 Debian10 Debian11","title":"OS Compatibility"},{"location":"roles/cloud_aws_realm/#dependencies","text":"Ansible Collections: community.aws","title":"Dependencies"},{"location":"roles/cloud_aws_realm/#prerequisites","text":"Python modules (required by community.aws) boto boto3 botocore s3transfer jmespath","title":"Prerequisites"},{"location":"roles/cloud_aws_realm/#installation-procedure","text":"The role can be provisioned by installing the Ansible-Collection from the Ansible Galaxy repository: https://galaxy.ansible.com/serdigital64/cloud ansible-galaxy collection install --upgrade serdigital64.cloud Automatic installation is also available by deploying A:Platform64","title":"Installation Procedure"},{"location":"roles/cloud_aws_realm/#contributing","text":"Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details.","title":"Contributing"},{"location":"roles/cloud_aws_realm/#author","text":"SerDigital64","title":"Author"},{"location":"roles/cloud_aws_realm/#license","text":"GPL-3.0-or-later","title":"License"},{"location":"roles/cloud_azure_cli/","text":"Ansible Role: serdigital64.cloud_azure_cli \u00b6 Purpose \u00b6 Manage provisioning of Azure CLI Supported features in the current version: Deploy application. Packages are defined in the variable cloud_azure_cli_profiles . The cloud_azure_cli Ansible-Role is part of the A:Platform64 project and is available in the cloud Ansible-Collection. Usage \u00b6 The following example is an Ansible Playbook that includes all the supported features: use this link if viewing the doc on github --- - name : \"Cloud / Azure / CLI / Usage example\" hosts : \"localhost\" gather_facts : true tasks : - name : \"Example: Install Azure CLI using distro native repository\" vars : cloud_azure_cli : resolve_prereq : true deploy : true ansible.builtin.include_role : name : \"serdigital64.cloud.cloud_azure_cli\" ... The playbook can be run by executing: # Set ANSIBLE_COLLECTIONS_PATHS to the default location. Change as needed. ANSIBLE_COLLECTIONS_PATHS = \" ${ HOME } /.ansible/collections\" ansible-playbook \" ${ ANSIBLE_COLLECTIONS_PATHS } /ansible_collections/serdigital64/cloud/playbooks/cloud_azure_cli.yml\" Role Parameters \u00b6 Actions \u00b6 Use action-parameters to control what tasks are enabled for the role to execute. Parameters should be declared as task level vars as they are intented to be dynamic. cloud_azure_cli : resolve_prereq : deploy : Parameter Required? Type Default Purpose / Value cloud_azure_cli.resolve_prereq no boolean false Enable automatic resolution of prequisites cloud_azure_cli.deploy no boolean false Enable installation of application packages End State \u00b6 Use end-state parameters to define the target state after role execution. Parameters should be declared in host_vars or group_vars as they are intended to be permanent. cloud_azure_cli_application : name : type : version : installed : Parameter Required? Type Default Purpose / Value cloud_azure_cli_application no dictionary Set application package end state cloud_azure_cli_application.name no string \"azurecli\" Select application package name cloud_azure_cli_application.type no string \"distro\" Select application package type cloud_azure_cli_application.version no string \"latest\" Select application package version cloud_azure_cli_application.installed no boolean true Set application package end state Deployment \u00b6 OS Compatibility \u00b6 CentOS8 OracleLinux8 Ubuntu20 Ubuntu21 Fedora33 Fedora35 Debian10 Debian11 Dependencies \u00b6 Ansible Collections: serdigital64.backup serdigital64.system Prerequisites \u00b6 The Ansible engine must be already installed and configured for privileged access and remote execution. In addition the following prerequisites can be automatically solved when running the playbook by setting the role action: resolve_prereq: true Package manager for the target application is installed and enabled. Installation Procedure \u00b6 Manually install Ansible Collections from the Ansible Galaxy repository: ansible-galaxy collection install --upgrade serdigital64.cloud Automatic installation is also available by deploying A:Platform64 Contributing \u00b6 Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details. Author \u00b6 SerDigital64 License \u00b6 GPL-3.0-or-later","title":"cloud_azure_cli"},{"location":"roles/cloud_azure_cli/#ansible-role-serdigital64cloud_azure_cli","text":"","title":"Ansible Role: serdigital64.cloud_azure_cli"},{"location":"roles/cloud_azure_cli/#purpose","text":"Manage provisioning of Azure CLI Supported features in the current version: Deploy application. Packages are defined in the variable cloud_azure_cli_profiles . The cloud_azure_cli Ansible-Role is part of the A:Platform64 project and is available in the cloud Ansible-Collection.","title":"Purpose"},{"location":"roles/cloud_azure_cli/#usage","text":"The following example is an Ansible Playbook that includes all the supported features: use this link if viewing the doc on github --- - name : \"Cloud / Azure / CLI / Usage example\" hosts : \"localhost\" gather_facts : true tasks : - name : \"Example: Install Azure CLI using distro native repository\" vars : cloud_azure_cli : resolve_prereq : true deploy : true ansible.builtin.include_role : name : \"serdigital64.cloud.cloud_azure_cli\" ... The playbook can be run by executing: # Set ANSIBLE_COLLECTIONS_PATHS to the default location. Change as needed. ANSIBLE_COLLECTIONS_PATHS = \" ${ HOME } /.ansible/collections\" ansible-playbook \" ${ ANSIBLE_COLLECTIONS_PATHS } /ansible_collections/serdigital64/cloud/playbooks/cloud_azure_cli.yml\"","title":"Usage"},{"location":"roles/cloud_azure_cli/#role-parameters","text":"","title":"Role Parameters"},{"location":"roles/cloud_azure_cli/#actions","text":"Use action-parameters to control what tasks are enabled for the role to execute. Parameters should be declared as task level vars as they are intented to be dynamic. cloud_azure_cli : resolve_prereq : deploy : Parameter Required? Type Default Purpose / Value cloud_azure_cli.resolve_prereq no boolean false Enable automatic resolution of prequisites cloud_azure_cli.deploy no boolean false Enable installation of application packages","title":"Actions"},{"location":"roles/cloud_azure_cli/#end-state","text":"Use end-state parameters to define the target state after role execution. Parameters should be declared in host_vars or group_vars as they are intended to be permanent. cloud_azure_cli_application : name : type : version : installed : Parameter Required? Type Default Purpose / Value cloud_azure_cli_application no dictionary Set application package end state cloud_azure_cli_application.name no string \"azurecli\" Select application package name cloud_azure_cli_application.type no string \"distro\" Select application package type cloud_azure_cli_application.version no string \"latest\" Select application package version cloud_azure_cli_application.installed no boolean true Set application package end state","title":"End State"},{"location":"roles/cloud_azure_cli/#deployment","text":"","title":"Deployment"},{"location":"roles/cloud_azure_cli/#os-compatibility","text":"CentOS8 OracleLinux8 Ubuntu20 Ubuntu21 Fedora33 Fedora35 Debian10 Debian11","title":"OS Compatibility"},{"location":"roles/cloud_azure_cli/#dependencies","text":"Ansible Collections: serdigital64.backup serdigital64.system","title":"Dependencies"},{"location":"roles/cloud_azure_cli/#prerequisites","text":"The Ansible engine must be already installed and configured for privileged access and remote execution. In addition the following prerequisites can be automatically solved when running the playbook by setting the role action: resolve_prereq: true Package manager for the target application is installed and enabled.","title":"Prerequisites"},{"location":"roles/cloud_azure_cli/#installation-procedure","text":"Manually install Ansible Collections from the Ansible Galaxy repository: ansible-galaxy collection install --upgrade serdigital64.cloud Automatic installation is also available by deploying A:Platform64","title":"Installation Procedure"},{"location":"roles/cloud_azure_cli/#contributing","text":"Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details.","title":"Contributing"},{"location":"roles/cloud_azure_cli/#author","text":"SerDigital64","title":"Author"},{"location":"roles/cloud_azure_cli/#license","text":"GPL-3.0-or-later","title":"License"},{"location":"roles/cloud_foundry_cli/","text":"Ansible Role: serdigital64.cloud_foundry_cli \u00b6 Purpose \u00b6 Manage provisioning of Cloud Foundry CLI Supported features in the current version: Deploy application. Packages are defined in the variable cloud_foundry_cli_profiles . The cloud_foundry_cli Ansible-Role is part of the A:Platform64 project and is available in the cloud Ansible-Collection. Usage \u00b6 The following example is an Ansible Playbook that includes all the supported features: use this link if viewing the doc on github --- - name : \"Cloud / Foundry / CLI / Usage example\" hosts : \"localhost\" gather_facts : true tasks : - name : \"Example: Install Foundry CLI using distro native repository\" vars : cloud_foundry_cli : resolve_prereq : true deploy : true ansible.builtin.include_role : name : \"serdigital64.cloud.cloud_foundry_cli\" ... The playbook can be run by executing: # Set ANSIBLE_COLLECTIONS_PATHS to the default location. Change as needed. ANSIBLE_COLLECTIONS_PATHS = \" ${ HOME } /.ansible/collections\" ansible-playbook \" ${ ANSIBLE_COLLECTIONS_PATHS } /ansible_collections/serdigital64/cloud/playbooks/cloud_foundry_cli.yml\" Role Parameters \u00b6 Actions \u00b6 Use action-parameters to control what tasks are enabled for the role to execute. Parameters should be declared as task level vars as they are intented to be dynamic. cloud_foundry_cli : resolve_prereq : deploy : Parameter Required? Type Default Purpose / Value cloud_foundry_cli.resolve_prereq no boolean false Enable automatic resolution of prequisites cloud_foundry_cli.deploy no boolean false Enable installation of application packages End State \u00b6 Use end-state parameters to define the target state after role execution. Parameters should be declared in host_vars or group_vars as they are intended to be permanent. cloud_foundry_cli_application : name : type : version : installed : Parameter Required? Type Default Purpose / Value cloud_foundry_cli_application no dictionary Set application package end state cloud_foundry_cli_application.name no string \"cloudfoundry\" Select application package name cloud_foundry_cli_application.type no string \"distro\" Select application package type cloud_foundry_cli_application.version no string \"v7\" Select application package version cloud_foundry_cli_application.installed no boolean true Set application package end state Deployment \u00b6 OS Compatibility \u00b6 CentOS8 OracleLinux8 Ubuntu20 Ubuntu21 Fedora33 Fedora35 Debian10 Debian11 Dependencies \u00b6 Ansible Collections: serdigital64.backup serdigital64.system Prerequisites \u00b6 The Ansible engine must be already installed and configured for privileged access and remote execution. In addition the following prerequisites can be automatically solved when running the playbook by setting the role action: resolve_prereq: true Package manager for the target application is installed and enabled. Installation Procedure \u00b6 Manually install Ansible Collections from the Ansible Galaxy repository: ansible-galaxy collection install --upgrade serdigital64.cloud Automatic installation is also available by deploying A:Platform64 Contributing \u00b6 Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details. Author \u00b6 SerDigital64 License \u00b6 GPL-3.0-or-later","title":"cloud_foundry_cli"},{"location":"roles/cloud_foundry_cli/#ansible-role-serdigital64cloud_foundry_cli","text":"","title":"Ansible Role: serdigital64.cloud_foundry_cli"},{"location":"roles/cloud_foundry_cli/#purpose","text":"Manage provisioning of Cloud Foundry CLI Supported features in the current version: Deploy application. Packages are defined in the variable cloud_foundry_cli_profiles . The cloud_foundry_cli Ansible-Role is part of the A:Platform64 project and is available in the cloud Ansible-Collection.","title":"Purpose"},{"location":"roles/cloud_foundry_cli/#usage","text":"The following example is an Ansible Playbook that includes all the supported features: use this link if viewing the doc on github --- - name : \"Cloud / Foundry / CLI / Usage example\" hosts : \"localhost\" gather_facts : true tasks : - name : \"Example: Install Foundry CLI using distro native repository\" vars : cloud_foundry_cli : resolve_prereq : true deploy : true ansible.builtin.include_role : name : \"serdigital64.cloud.cloud_foundry_cli\" ... The playbook can be run by executing: # Set ANSIBLE_COLLECTIONS_PATHS to the default location. Change as needed. ANSIBLE_COLLECTIONS_PATHS = \" ${ HOME } /.ansible/collections\" ansible-playbook \" ${ ANSIBLE_COLLECTIONS_PATHS } /ansible_collections/serdigital64/cloud/playbooks/cloud_foundry_cli.yml\"","title":"Usage"},{"location":"roles/cloud_foundry_cli/#role-parameters","text":"","title":"Role Parameters"},{"location":"roles/cloud_foundry_cli/#actions","text":"Use action-parameters to control what tasks are enabled for the role to execute. Parameters should be declared as task level vars as they are intented to be dynamic. cloud_foundry_cli : resolve_prereq : deploy : Parameter Required? Type Default Purpose / Value cloud_foundry_cli.resolve_prereq no boolean false Enable automatic resolution of prequisites cloud_foundry_cli.deploy no boolean false Enable installation of application packages","title":"Actions"},{"location":"roles/cloud_foundry_cli/#end-state","text":"Use end-state parameters to define the target state after role execution. Parameters should be declared in host_vars or group_vars as they are intended to be permanent. cloud_foundry_cli_application : name : type : version : installed : Parameter Required? Type Default Purpose / Value cloud_foundry_cli_application no dictionary Set application package end state cloud_foundry_cli_application.name no string \"cloudfoundry\" Select application package name cloud_foundry_cli_application.type no string \"distro\" Select application package type cloud_foundry_cli_application.version no string \"v7\" Select application package version cloud_foundry_cli_application.installed no boolean true Set application package end state","title":"End State"},{"location":"roles/cloud_foundry_cli/#deployment","text":"","title":"Deployment"},{"location":"roles/cloud_foundry_cli/#os-compatibility","text":"CentOS8 OracleLinux8 Ubuntu20 Ubuntu21 Fedora33 Fedora35 Debian10 Debian11","title":"OS Compatibility"},{"location":"roles/cloud_foundry_cli/#dependencies","text":"Ansible Collections: serdigital64.backup serdigital64.system","title":"Dependencies"},{"location":"roles/cloud_foundry_cli/#prerequisites","text":"The Ansible engine must be already installed and configured for privileged access and remote execution. In addition the following prerequisites can be automatically solved when running the playbook by setting the role action: resolve_prereq: true Package manager for the target application is installed and enabled.","title":"Prerequisites"},{"location":"roles/cloud_foundry_cli/#installation-procedure","text":"Manually install Ansible Collections from the Ansible Galaxy repository: ansible-galaxy collection install --upgrade serdigital64.cloud Automatic installation is also available by deploying A:Platform64","title":"Installation Procedure"},{"location":"roles/cloud_foundry_cli/#contributing","text":"Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details.","title":"Contributing"},{"location":"roles/cloud_foundry_cli/#author","text":"SerDigital64","title":"Author"},{"location":"roles/cloud_foundry_cli/#license","text":"GPL-3.0-or-later","title":"License"},{"location":"roles/cloud_google_cli/","text":"Ansible Role: serdigital64.cloud.cloud_google_cli \u00b6 Purpose \u00b6 Manage provisioning of Google Cloud CLI. Supported features in the current version: Deploy application. Packages are defined in the variable cloud_google_cli_profiles . The cloud_google_cli Ansible-Role is part of the A:Platform64 project and is available in the cloud Ansible-Collection. Usage \u00b6 The following example is an Ansible Playbook that includes all the supported features: use this link if viewing the doc on github --- - name : \"Cloud / Google / CLI / Usage example\" hosts : \"localhost\" gather_facts : true tasks : - name : \"Example: Install Google CLI\" vars : cloud_google_cli : resolve_prereq : true deploy : true ansible.builtin.include_role : name : \"serdigital64.cloud.cloud_google_cli\" ... The playbook can be run by executing: # Set ANSIBLE_COLLECTIONS_PATHS to the default location. Change as needed. ANSIBLE_COLLECTIONS_PATHS = \" ${ HOME } /.ansible/collections\" ansible-playbook \" ${ ANSIBLE_COLLECTIONS_PATHS } /ansible_collections/serdigital64/cloud/playbooks/cloud_google_cli.yml\" Role Parameters \u00b6 Actions \u00b6 Use action-parameters to control what tasks are enabled for the role to execute. Parameters should be declared as task level vars as they are intented to be dynamic. cloud_google_cli : resolve_prereq : deploy : Parameter Required? Type Default Purpose / Value cloud_google_cli.resolve_prereq no boolean false Enable automatic resolution of prequisites cloud_google_cli.deploy no boolean false Enable installation of application packages End State \u00b6 Use end-state parameters to define the target state after role execution. Parameters should be declared in host_vars or group_vars as they are intended to be permanent. cloud_google_cli_application : name : type : version : installed : Parameter Required? Type Default Purpose / Value cloud_google_cli_application no dictionary Set application package end state cloud_google_cli_application.name no string \"gcloud\" Select application package name cloud_google_cli_application.type no string \"distro\" \\| \"brew\" Select application package type cloud_google_cli_application.version no string \"latest\" Select application package version cloud_google_cli_application.installed no boolean true Set application package end state Deployment \u00b6 OS Compatibility \u00b6 The operating system compatibility list is defined in the variable: cloud_google_cli_platforms Dependencies \u00b6 Ansible Collections: serdigital64.backup serdigital64.system Prerequisites \u00b6 The Ansible engine must be already installed and configured for privileged access and remote execution. In addition the following prerequisites can be automatically solved when running the playbook by setting the role action: resolve_prereq: true Package manager for the target application is installed and enabled. Installation Procedure \u00b6 Manually install Ansible Collections from the Ansible Galaxy repository: ansible-galaxy collection install --upgrade serdigital64.cloud Automatic installation is also available by deploying A:Platform64 Contributing \u00b6 Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details. Author \u00b6 SerDigital64 License \u00b6 GPL-3.0-or-later","title":"cloud_google_cli"},{"location":"roles/cloud_google_cli/#ansible-role-serdigital64cloudcloud_google_cli","text":"","title":"Ansible Role: serdigital64.cloud.cloud_google_cli"},{"location":"roles/cloud_google_cli/#purpose","text":"Manage provisioning of Google Cloud CLI. Supported features in the current version: Deploy application. Packages are defined in the variable cloud_google_cli_profiles . The cloud_google_cli Ansible-Role is part of the A:Platform64 project and is available in the cloud Ansible-Collection.","title":"Purpose"},{"location":"roles/cloud_google_cli/#usage","text":"The following example is an Ansible Playbook that includes all the supported features: use this link if viewing the doc on github --- - name : \"Cloud / Google / CLI / Usage example\" hosts : \"localhost\" gather_facts : true tasks : - name : \"Example: Install Google CLI\" vars : cloud_google_cli : resolve_prereq : true deploy : true ansible.builtin.include_role : name : \"serdigital64.cloud.cloud_google_cli\" ... The playbook can be run by executing: # Set ANSIBLE_COLLECTIONS_PATHS to the default location. Change as needed. ANSIBLE_COLLECTIONS_PATHS = \" ${ HOME } /.ansible/collections\" ansible-playbook \" ${ ANSIBLE_COLLECTIONS_PATHS } /ansible_collections/serdigital64/cloud/playbooks/cloud_google_cli.yml\"","title":"Usage"},{"location":"roles/cloud_google_cli/#role-parameters","text":"","title":"Role Parameters"},{"location":"roles/cloud_google_cli/#actions","text":"Use action-parameters to control what tasks are enabled for the role to execute. Parameters should be declared as task level vars as they are intented to be dynamic. cloud_google_cli : resolve_prereq : deploy : Parameter Required? Type Default Purpose / Value cloud_google_cli.resolve_prereq no boolean false Enable automatic resolution of prequisites cloud_google_cli.deploy no boolean false Enable installation of application packages","title":"Actions"},{"location":"roles/cloud_google_cli/#end-state","text":"Use end-state parameters to define the target state after role execution. Parameters should be declared in host_vars or group_vars as they are intended to be permanent. cloud_google_cli_application : name : type : version : installed : Parameter Required? Type Default Purpose / Value cloud_google_cli_application no dictionary Set application package end state cloud_google_cli_application.name no string \"gcloud\" Select application package name cloud_google_cli_application.type no string \"distro\" \\| \"brew\" Select application package type cloud_google_cli_application.version no string \"latest\" Select application package version cloud_google_cli_application.installed no boolean true Set application package end state","title":"End State"},{"location":"roles/cloud_google_cli/#deployment","text":"","title":"Deployment"},{"location":"roles/cloud_google_cli/#os-compatibility","text":"The operating system compatibility list is defined in the variable: cloud_google_cli_platforms","title":"OS Compatibility"},{"location":"roles/cloud_google_cli/#dependencies","text":"Ansible Collections: serdigital64.backup serdigital64.system","title":"Dependencies"},{"location":"roles/cloud_google_cli/#prerequisites","text":"The Ansible engine must be already installed and configured for privileged access and remote execution. In addition the following prerequisites can be automatically solved when running the playbook by setting the role action: resolve_prereq: true Package manager for the target application is installed and enabled.","title":"Prerequisites"},{"location":"roles/cloud_google_cli/#installation-procedure","text":"Manually install Ansible Collections from the Ansible Galaxy repository: ansible-galaxy collection install --upgrade serdigital64.cloud Automatic installation is also available by deploying A:Platform64","title":"Installation Procedure"},{"location":"roles/cloud_google_cli/#contributing","text":"Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details.","title":"Contributing"},{"location":"roles/cloud_google_cli/#author","text":"SerDigital64","title":"Author"},{"location":"roles/cloud_google_cli/#license","text":"GPL-3.0-or-later","title":"License"},{"location":"roles/cloud_ibm_cli/","text":"Ansible Role: serdigital64.cloud.cloud_ibm_cli \u00b6 Purpose \u00b6 Manage provisioning of IBM Cloud CLI Supported features in the current version: Deploy application. Packages are defined in the variable cloud_ibm_cli_profiles . The cloud_ibm_cli Ansible-Role is part of the A:Platform64 project and is available in the cloud Ansible-Collection. Usage \u00b6 The following example is an Ansible Playbook that includes all the supported features: use this link if viewing the doc on github --- - name : \"Cloud / IBM / CLI / Usage example\" hosts : \"localhost\" gather_facts : true tasks : - name : \"Example: Install IBM CLI\" vars : cloud_ibm_cli : resolve_prereq : true deploy : true ansible.builtin.include_role : name : \"serdigital64.cloud.cloud_ibm_cli\" ... The playbook can be run by executing: # Set ANSIBLE_COLLECTIONS_PATHS to the default location. Change as needed. ANSIBLE_COLLECTIONS_PATHS = \" ${ HOME } /.ansible/collections\" ansible-playbook \" ${ ANSIBLE_COLLECTIONS_PATHS } /ansible_collections/serdigital64/cloud/playbooks/cloud_ibm_cli.yml\" Role Parameters \u00b6 Actions \u00b6 Use action-parameters to control what tasks are enabled for the role to execute. Parameters should be declared as task level vars as they are intented to be dynamic. cloud_ibm_cli : resolve_prereq : deploy : Parameter Required? Type Default Purpose / Value cloud_ibm_cli.resolve_prereq no boolean false Enable automatic resolution of prequisites cloud_ibm_cli.deploy no boolean false Enable installation of application packages End State \u00b6 Use end-state parameters to define the target state after role execution. Parameters should be declared in host_vars or group_vars as they are intended to be permanent. cloud_ibm_cli_application : name : type : version : installed : Parameter Required? Type Default Purpose / Value cloud_ibm_cli_application no dictionary Set application package end state cloud_ibm_cli_application.name no string \"ibmcli\" Select application package name cloud_ibm_cli_application.type no string \"binary\" Select application package type cloud_ibm_cli_application.version no string \"latest\" Select application package version cloud_ibm_cli_application.installed no boolean true Set application package end state Deployment \u00b6 OS Compatibility \u00b6 CentOS8 OracleLinux8 Ubuntu20 Ubuntu21 Fedora33 Fedora35 Debian10 Debian11 Dependencies \u00b6 Ansible Collections: serdigital64.backup serdigital64.system Prerequisites \u00b6 The Ansible engine must be already installed and configured for privileged access and remote execution. In addition the following prerequisites can be automatically solved when running the playbook by setting the role action: resolve_prereq: true Package manager for the target application is installed and enabled. Installation Procedure \u00b6 Manually install Ansible Collections from the Ansible Galaxy repository: ansible-galaxy collection install --upgrade serdigital64.cloud Automatic installation is also available by deploying A:Platform64 Contributing \u00b6 Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details. Author \u00b6 SerDigital64 License \u00b6 GPL-3.0-or-later","title":"cloud_ibm_cli"},{"location":"roles/cloud_ibm_cli/#ansible-role-serdigital64cloudcloud_ibm_cli","text":"","title":"Ansible Role: serdigital64.cloud.cloud_ibm_cli"},{"location":"roles/cloud_ibm_cli/#purpose","text":"Manage provisioning of IBM Cloud CLI Supported features in the current version: Deploy application. Packages are defined in the variable cloud_ibm_cli_profiles . The cloud_ibm_cli Ansible-Role is part of the A:Platform64 project and is available in the cloud Ansible-Collection.","title":"Purpose"},{"location":"roles/cloud_ibm_cli/#usage","text":"The following example is an Ansible Playbook that includes all the supported features: use this link if viewing the doc on github --- - name : \"Cloud / IBM / CLI / Usage example\" hosts : \"localhost\" gather_facts : true tasks : - name : \"Example: Install IBM CLI\" vars : cloud_ibm_cli : resolve_prereq : true deploy : true ansible.builtin.include_role : name : \"serdigital64.cloud.cloud_ibm_cli\" ... The playbook can be run by executing: # Set ANSIBLE_COLLECTIONS_PATHS to the default location. Change as needed. ANSIBLE_COLLECTIONS_PATHS = \" ${ HOME } /.ansible/collections\" ansible-playbook \" ${ ANSIBLE_COLLECTIONS_PATHS } /ansible_collections/serdigital64/cloud/playbooks/cloud_ibm_cli.yml\"","title":"Usage"},{"location":"roles/cloud_ibm_cli/#role-parameters","text":"","title":"Role Parameters"},{"location":"roles/cloud_ibm_cli/#actions","text":"Use action-parameters to control what tasks are enabled for the role to execute. Parameters should be declared as task level vars as they are intented to be dynamic. cloud_ibm_cli : resolve_prereq : deploy : Parameter Required? Type Default Purpose / Value cloud_ibm_cli.resolve_prereq no boolean false Enable automatic resolution of prequisites cloud_ibm_cli.deploy no boolean false Enable installation of application packages","title":"Actions"},{"location":"roles/cloud_ibm_cli/#end-state","text":"Use end-state parameters to define the target state after role execution. Parameters should be declared in host_vars or group_vars as they are intended to be permanent. cloud_ibm_cli_application : name : type : version : installed : Parameter Required? Type Default Purpose / Value cloud_ibm_cli_application no dictionary Set application package end state cloud_ibm_cli_application.name no string \"ibmcli\" Select application package name cloud_ibm_cli_application.type no string \"binary\" Select application package type cloud_ibm_cli_application.version no string \"latest\" Select application package version cloud_ibm_cli_application.installed no boolean true Set application package end state","title":"End State"},{"location":"roles/cloud_ibm_cli/#deployment","text":"","title":"Deployment"},{"location":"roles/cloud_ibm_cli/#os-compatibility","text":"CentOS8 OracleLinux8 Ubuntu20 Ubuntu21 Fedora33 Fedora35 Debian10 Debian11","title":"OS Compatibility"},{"location":"roles/cloud_ibm_cli/#dependencies","text":"Ansible Collections: serdigital64.backup serdigital64.system","title":"Dependencies"},{"location":"roles/cloud_ibm_cli/#prerequisites","text":"The Ansible engine must be already installed and configured for privileged access and remote execution. In addition the following prerequisites can be automatically solved when running the playbook by setting the role action: resolve_prereq: true Package manager for the target application is installed and enabled.","title":"Prerequisites"},{"location":"roles/cloud_ibm_cli/#installation-procedure","text":"Manually install Ansible Collections from the Ansible Galaxy repository: ansible-galaxy collection install --upgrade serdigital64.cloud Automatic installation is also available by deploying A:Platform64","title":"Installation Procedure"},{"location":"roles/cloud_ibm_cli/#contributing","text":"Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details.","title":"Contributing"},{"location":"roles/cloud_ibm_cli/#author","text":"SerDigital64","title":"Author"},{"location":"roles/cloud_ibm_cli/#license","text":"GPL-3.0-or-later","title":"License"},{"location":"roles/cnt_docker/","text":"Ansible Role: serdigital64.container.cnt_docker \u00b6 Purpose \u00b6 Manage provisioning of Docker. Supported features in the current version: Deploy application. Packages are defined in the variable cnt_docker_profiles . The cnt_docker Ansible-Role is part of the A:Platform64 project and is available in the container Ansible-Collection. Usage \u00b6 The following example is an Ansible Playbook that includes all the supported features: use this link if viewing the doc on github --- - name : \"Container / Docker / Usage example\" hosts : \"localhost\" gather_facts : true tasks : - name : \"Example: Install tool\" vars : cnt_docker : resolve_prereq : true deploy : true ansible.builtin.include_role : name : \"serdigital64.container.cnt_docker\" ... The playbook can be run by executing: # Set ANSIBLE_COLLECTIONS_PATHS to the default location. Change as needed. ANSIBLE_COLLECTIONS_PATHS = \" ${ HOME } /.ansible/collections\" ansible-playbook \" ${ ANSIBLE_COLLECTIONS_PATHS } /ansible_collections/serdigital64/container/playbooks/cnt_docker.yml\" Role Parameters \u00b6 Actions \u00b6 Use action-parameters to control what tasks are enabled for the role to execute. Parameters should be declared as task level vars as they are intented to be dynamic. cnt_docker : resolve_prereq : deploy : Parameter Required? Type Default Purpose / Value cnt_docker.resolve_prereq no boolean false Enable automatic resolution of prequisites cnt_docker.deploy no boolean false Enable installation of application packages End State \u00b6 Use end-state parameters to define the target state after role execution. Parameters should be declared in host_vars or group_vars as they are intended to be permanent. cnt_docker_application : name : type : version : installed : Parameter Required? Type Default Purpose / Value cnt_docker_application yes(deploy) dictionary Set application package end state cnt_docker_application.name yes string \"docker\" Select application package name cnt_docker_application.type yes string \"distro\" Select application package type cnt_docker_application.version yes string \"latest\" Select application package version cnt_docker_application.installed yes boolean true Set application package end state Deployment \u00b6 OS Compatibility \u00b6 CentOS8 RedHat8 AlmaLinux8 OracleLinux8 Ubuntu20 Ubuntu21 Fedora33 Fedora35 Debian10 Debian11 Dependencies \u00b6 Ansible Collections: serdigital64.backup bkp_archive serdigital64.system sys_package sys_repository Prerequisites \u00b6 The Ansible engine must be already installed and configured for privileged access and remote execution. In addition the following prerequisites can be automatically solved when running the playbook by setting the role action: resolve_prereq: true Package manager for the target application is installed and enabled. Installation Procedure \u00b6 Manually install Ansible Collections from the Ansible Galaxy repository: ansible-galaxy collection install serdigital64.container Automatic installation is also available by deploying A:Platform64 Contributing \u00b6 Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details. Author \u00b6 SerDigital64 License \u00b6 GPL-3.0-or-later","title":"cnt_docker"},{"location":"roles/cnt_docker/#ansible-role-serdigital64containercnt_docker","text":"","title":"Ansible Role: serdigital64.container.cnt_docker"},{"location":"roles/cnt_docker/#purpose","text":"Manage provisioning of Docker. Supported features in the current version: Deploy application. Packages are defined in the variable cnt_docker_profiles . The cnt_docker Ansible-Role is part of the A:Platform64 project and is available in the container Ansible-Collection.","title":"Purpose"},{"location":"roles/cnt_docker/#usage","text":"The following example is an Ansible Playbook that includes all the supported features: use this link if viewing the doc on github --- - name : \"Container / Docker / Usage example\" hosts : \"localhost\" gather_facts : true tasks : - name : \"Example: Install tool\" vars : cnt_docker : resolve_prereq : true deploy : true ansible.builtin.include_role : name : \"serdigital64.container.cnt_docker\" ... The playbook can be run by executing: # Set ANSIBLE_COLLECTIONS_PATHS to the default location. Change as needed. ANSIBLE_COLLECTIONS_PATHS = \" ${ HOME } /.ansible/collections\" ansible-playbook \" ${ ANSIBLE_COLLECTIONS_PATHS } /ansible_collections/serdigital64/container/playbooks/cnt_docker.yml\"","title":"Usage"},{"location":"roles/cnt_docker/#role-parameters","text":"","title":"Role Parameters"},{"location":"roles/cnt_docker/#actions","text":"Use action-parameters to control what tasks are enabled for the role to execute. Parameters should be declared as task level vars as they are intented to be dynamic. cnt_docker : resolve_prereq : deploy : Parameter Required? Type Default Purpose / Value cnt_docker.resolve_prereq no boolean false Enable automatic resolution of prequisites cnt_docker.deploy no boolean false Enable installation of application packages","title":"Actions"},{"location":"roles/cnt_docker/#end-state","text":"Use end-state parameters to define the target state after role execution. Parameters should be declared in host_vars or group_vars as they are intended to be permanent. cnt_docker_application : name : type : version : installed : Parameter Required? Type Default Purpose / Value cnt_docker_application yes(deploy) dictionary Set application package end state cnt_docker_application.name yes string \"docker\" Select application package name cnt_docker_application.type yes string \"distro\" Select application package type cnt_docker_application.version yes string \"latest\" Select application package version cnt_docker_application.installed yes boolean true Set application package end state","title":"End State"},{"location":"roles/cnt_docker/#deployment","text":"","title":"Deployment"},{"location":"roles/cnt_docker/#os-compatibility","text":"CentOS8 RedHat8 AlmaLinux8 OracleLinux8 Ubuntu20 Ubuntu21 Fedora33 Fedora35 Debian10 Debian11","title":"OS Compatibility"},{"location":"roles/cnt_docker/#dependencies","text":"Ansible Collections: serdigital64.backup bkp_archive serdigital64.system sys_package sys_repository","title":"Dependencies"},{"location":"roles/cnt_docker/#prerequisites","text":"The Ansible engine must be already installed and configured for privileged access and remote execution. In addition the following prerequisites can be automatically solved when running the playbook by setting the role action: resolve_prereq: true Package manager for the target application is installed and enabled.","title":"Prerequisites"},{"location":"roles/cnt_docker/#installation-procedure","text":"Manually install Ansible Collections from the Ansible Galaxy repository: ansible-galaxy collection install serdigital64.container Automatic installation is also available by deploying A:Platform64","title":"Installation Procedure"},{"location":"roles/cnt_docker/#contributing","text":"Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details.","title":"Contributing"},{"location":"roles/cnt_docker/#author","text":"SerDigital64","title":"Author"},{"location":"roles/cnt_docker/#license","text":"GPL-3.0-or-later","title":"License"},{"location":"roles/cnt_kubectl/","text":"Ansible Role: serdigital64.container.cnt_kubectl \u00b6 Purpose \u00b6 Manage provisioning of KubeCtl. Supported features in the current version: Deploy application. Packages are defined in the variable cnt_kubectl_profiles . The cnt_kubectl Ansible-Role is part of the A:Platform64 project and is available in the container Ansible-Collection. Usage \u00b6 The following example is an Ansible Playbook that includes all the supported features: use this link if viewing the doc on github --- - name : \"Container / KubeCtl / Usage example\" hosts : \"localhost\" gather_facts : true tasks : - name : \"Example: Install tool\" vars : cnt_kubectl : resolve_prereq : true deploy : true ansible.builtin.include_role : name : \"serdigital64.container.cnt_kubectl\" ... The playbook can be run by executing: # Set ANSIBLE_COLLECTIONS_PATHS to the default location. Change as needed. ANSIBLE_COLLECTIONS_PATHS = \" ${ HOME } /.ansible/collections\" ansible-playbook \" ${ ANSIBLE_COLLECTIONS_PATHS } /ansible_collections/serdigital64/container/playbooks/cnt_kubectl.yml\" Role Parameters \u00b6 Actions \u00b6 Use action-parameters to control what tasks are enabled for the role to execute. Parameters should be declared as task level vars as they are intented to be dynamic. cnt_kubectl : resolve_prereq : deploy : Parameter Required? Type Default Purpose / Value cnt_kubectl.resolve_prereq no boolean false Enable automatic resolution of prequisites cnt_kubectl.deploy no boolean false Enable installation of application packages End State \u00b6 Use end-state parameters to define the target state after role execution. Parameters should be declared in host_vars or group_vars as they are intended to be permanent. cnt_kubectl_application : name : type : version : installed : Parameter Required? Type Default Purpose / Value cnt_kubectl_application yes(deploy) dictionary Set application package end state cnt_kubectl_application.name yes string \"kubectl\" Select application package name cnt_kubectl_application.type yes string \"distro\",\"brew\" Select application package type cnt_kubectl_application.version yes string \"latest\" Select application package version cnt_kubectl_application.installed yes boolean true Set application package end state Deployment \u00b6 OS Compatibility \u00b6 The operating system compatibility list is defined in the variable: cnt_kubectl_platforms Dependencies \u00b6 Ansible Collections: serdigital64.backup bkp_archive serdigital64.system sys_package sys_repository Prerequisites \u00b6 The Ansible engine must be already installed and configured for privileged access and remote execution. In addition the following prerequisites can be automatically solved when running the playbook by setting the role action: resolve_prereq: true Package manager for the target application is installed and enabled. Installation Procedure \u00b6 Manually install Ansible Collections from the Ansible Galaxy repository: ansible-galaxy collection install serdigital64.container Automatic installation is also available by deploying A:Platform64 Contributing \u00b6 Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details. Author \u00b6 SerDigital64 License \u00b6 GPL-3.0-or-later","title":"cnt_kubectl"},{"location":"roles/cnt_kubectl/#ansible-role-serdigital64containercnt_kubectl","text":"","title":"Ansible Role: serdigital64.container.cnt_kubectl"},{"location":"roles/cnt_kubectl/#purpose","text":"Manage provisioning of KubeCtl. Supported features in the current version: Deploy application. Packages are defined in the variable cnt_kubectl_profiles . The cnt_kubectl Ansible-Role is part of the A:Platform64 project and is available in the container Ansible-Collection.","title":"Purpose"},{"location":"roles/cnt_kubectl/#usage","text":"The following example is an Ansible Playbook that includes all the supported features: use this link if viewing the doc on github --- - name : \"Container / KubeCtl / Usage example\" hosts : \"localhost\" gather_facts : true tasks : - name : \"Example: Install tool\" vars : cnt_kubectl : resolve_prereq : true deploy : true ansible.builtin.include_role : name : \"serdigital64.container.cnt_kubectl\" ... The playbook can be run by executing: # Set ANSIBLE_COLLECTIONS_PATHS to the default location. Change as needed. ANSIBLE_COLLECTIONS_PATHS = \" ${ HOME } /.ansible/collections\" ansible-playbook \" ${ ANSIBLE_COLLECTIONS_PATHS } /ansible_collections/serdigital64/container/playbooks/cnt_kubectl.yml\"","title":"Usage"},{"location":"roles/cnt_kubectl/#role-parameters","text":"","title":"Role Parameters"},{"location":"roles/cnt_kubectl/#actions","text":"Use action-parameters to control what tasks are enabled for the role to execute. Parameters should be declared as task level vars as they are intented to be dynamic. cnt_kubectl : resolve_prereq : deploy : Parameter Required? Type Default Purpose / Value cnt_kubectl.resolve_prereq no boolean false Enable automatic resolution of prequisites cnt_kubectl.deploy no boolean false Enable installation of application packages","title":"Actions"},{"location":"roles/cnt_kubectl/#end-state","text":"Use end-state parameters to define the target state after role execution. Parameters should be declared in host_vars or group_vars as they are intended to be permanent. cnt_kubectl_application : name : type : version : installed : Parameter Required? Type Default Purpose / Value cnt_kubectl_application yes(deploy) dictionary Set application package end state cnt_kubectl_application.name yes string \"kubectl\" Select application package name cnt_kubectl_application.type yes string \"distro\",\"brew\" Select application package type cnt_kubectl_application.version yes string \"latest\" Select application package version cnt_kubectl_application.installed yes boolean true Set application package end state","title":"End State"},{"location":"roles/cnt_kubectl/#deployment","text":"","title":"Deployment"},{"location":"roles/cnt_kubectl/#os-compatibility","text":"The operating system compatibility list is defined in the variable: cnt_kubectl_platforms","title":"OS Compatibility"},{"location":"roles/cnt_kubectl/#dependencies","text":"Ansible Collections: serdigital64.backup bkp_archive serdigital64.system sys_package sys_repository","title":"Dependencies"},{"location":"roles/cnt_kubectl/#prerequisites","text":"The Ansible engine must be already installed and configured for privileged access and remote execution. In addition the following prerequisites can be automatically solved when running the playbook by setting the role action: resolve_prereq: true Package manager for the target application is installed and enabled.","title":"Prerequisites"},{"location":"roles/cnt_kubectl/#installation-procedure","text":"Manually install Ansible Collections from the Ansible Galaxy repository: ansible-galaxy collection install serdigital64.container Automatic installation is also available by deploying A:Platform64","title":"Installation Procedure"},{"location":"roles/cnt_kubectl/#contributing","text":"Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details.","title":"Contributing"},{"location":"roles/cnt_kubectl/#author","text":"SerDigital64","title":"Author"},{"location":"roles/cnt_kubectl/#license","text":"GPL-3.0-or-later","title":"License"},{"location":"roles/cnt_podman/","text":"Ansible Role: serdigital64.container.cnt_podman \u00b6 Purpose \u00b6 Manage provisioning of Podman. Supported features in the current version: Deploy application. Packages are defined in the variable cnt_podman_profiles . The cnt_podman Ansible-Role is part of the A:Platform64 project and is available in the container Ansible-Collection. Usage \u00b6 The following example is an Ansible Playbook that includes all the supported features: use this link if viewing the doc on github --- - name : \"Container / Podman / Usage example\" hosts : \"localhost\" gather_facts : true tasks : - name : \"Example: Install Podman\" vars : cnt_podman : resolve_prereq : true deploy : true ansible.builtin.include_role : name : \"serdigital64.container.cnt_podman\" ... The playbook can be run by executing: # Set ANSIBLE_COLLECTIONS_PATHS to the default location. Change as needed. ANSIBLE_COLLECTIONS_PATHS = \" ${ HOME } /.ansible/collections\" ansible-playbook \" ${ ANSIBLE_COLLECTIONS_PATHS } /ansible_collections/serdigital64/container/playbooks/cnt_podman.yml\" Role Parameters \u00b6 Actions \u00b6 Use action-parameters to control what tasks are enabled for the role to execute. Parameters should be declared as task level vars as they are intented to be dynamic. cnt_podman : resolve_prereq : deploy : Parameter Required? Type Default Purpose / Value cnt_podman.resolve_prereq no boolean false Enable automatic resolution of prequisites cnt_podman.deploy no boolean false Enable installation of application packages End State \u00b6 Use end-state parameters to define the target state after role execution. Parameters should be declared in host_vars or group_vars as they are intended to be permanent. cnt_podman_application : name : type : version : installed : Parameter Required? Type Default Purpose / Value cnt_podman_application no dictionary Set application package end state cnt_podman_application.name no string \"podman\" Select application package name cnt_podman_application.type no string \"distro\" Select application package type cnt_podman_application.version no string \"latest\" Select application package version cnt_podman_application.installed no boolean true Set application package end state Deployment \u00b6 OS Compatibility \u00b6 CentOS8 RedHat8 AlmaLinux8 OracleLinux8 Ubuntu20 Ubuntu21 Fedora33 Fedora35 Debian10 Debian11 Dependencies \u00b6 Ansible Collections: serdigital64.backup bkp_archive serdigital64.system sys_package sys_repository Prerequisites \u00b6 The Ansible engine must be already installed and configured for privileged access and remote execution. In addition the following prerequisites can be automatically solved when running the playbook by setting the role action: resolve_prereq: true Package manager for the target application is installed and enabled. Installation Procedure \u00b6 Manually install Ansible Collections from the Ansible Galaxy repository: ansible-galaxy collection install --upgrade serdigital64.container Automatic installation is also available by deploying A:Platform64 Contributing \u00b6 Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details. Author \u00b6 SerDigital64 License \u00b6 GPL-3.0-or-later","title":"cnt_podman"},{"location":"roles/cnt_podman/#ansible-role-serdigital64containercnt_podman","text":"","title":"Ansible Role: serdigital64.container.cnt_podman"},{"location":"roles/cnt_podman/#purpose","text":"Manage provisioning of Podman. Supported features in the current version: Deploy application. Packages are defined in the variable cnt_podman_profiles . The cnt_podman Ansible-Role is part of the A:Platform64 project and is available in the container Ansible-Collection.","title":"Purpose"},{"location":"roles/cnt_podman/#usage","text":"The following example is an Ansible Playbook that includes all the supported features: use this link if viewing the doc on github --- - name : \"Container / Podman / Usage example\" hosts : \"localhost\" gather_facts : true tasks : - name : \"Example: Install Podman\" vars : cnt_podman : resolve_prereq : true deploy : true ansible.builtin.include_role : name : \"serdigital64.container.cnt_podman\" ... The playbook can be run by executing: # Set ANSIBLE_COLLECTIONS_PATHS to the default location. Change as needed. ANSIBLE_COLLECTIONS_PATHS = \" ${ HOME } /.ansible/collections\" ansible-playbook \" ${ ANSIBLE_COLLECTIONS_PATHS } /ansible_collections/serdigital64/container/playbooks/cnt_podman.yml\"","title":"Usage"},{"location":"roles/cnt_podman/#role-parameters","text":"","title":"Role Parameters"},{"location":"roles/cnt_podman/#actions","text":"Use action-parameters to control what tasks are enabled for the role to execute. Parameters should be declared as task level vars as they are intented to be dynamic. cnt_podman : resolve_prereq : deploy : Parameter Required? Type Default Purpose / Value cnt_podman.resolve_prereq no boolean false Enable automatic resolution of prequisites cnt_podman.deploy no boolean false Enable installation of application packages","title":"Actions"},{"location":"roles/cnt_podman/#end-state","text":"Use end-state parameters to define the target state after role execution. Parameters should be declared in host_vars or group_vars as they are intended to be permanent. cnt_podman_application : name : type : version : installed : Parameter Required? Type Default Purpose / Value cnt_podman_application no dictionary Set application package end state cnt_podman_application.name no string \"podman\" Select application package name cnt_podman_application.type no string \"distro\" Select application package type cnt_podman_application.version no string \"latest\" Select application package version cnt_podman_application.installed no boolean true Set application package end state","title":"End State"},{"location":"roles/cnt_podman/#deployment","text":"","title":"Deployment"},{"location":"roles/cnt_podman/#os-compatibility","text":"CentOS8 RedHat8 AlmaLinux8 OracleLinux8 Ubuntu20 Ubuntu21 Fedora33 Fedora35 Debian10 Debian11","title":"OS Compatibility"},{"location":"roles/cnt_podman/#dependencies","text":"Ansible Collections: serdigital64.backup bkp_archive serdigital64.system sys_package sys_repository","title":"Dependencies"},{"location":"roles/cnt_podman/#prerequisites","text":"The Ansible engine must be already installed and configured for privileged access and remote execution. In addition the following prerequisites can be automatically solved when running the playbook by setting the role action: resolve_prereq: true Package manager for the target application is installed and enabled.","title":"Prerequisites"},{"location":"roles/cnt_podman/#installation-procedure","text":"Manually install Ansible Collections from the Ansible Galaxy repository: ansible-galaxy collection install --upgrade serdigital64.container Automatic installation is also available by deploying A:Platform64","title":"Installation Procedure"},{"location":"roles/cnt_podman/#contributing","text":"Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details.","title":"Contributing"},{"location":"roles/cnt_podman/#author","text":"SerDigital64","title":"Author"},{"location":"roles/cnt_podman/#license","text":"GPL-3.0-or-later","title":"License"},{"location":"roles/db_mariadb_client/","text":"Ansible Role: serdigital64.database.db_mariadb_client \u00b6 Purpose \u00b6 Manage provisioning of MariaDB client. Supported features in the current version: Deploy application. Packages are defined in the variable db_mariadb_client_profiles . The db_mariadb_client Ansible-Role is part of the A:Platform64 project and is available in the database Ansible-Collection. Usage \u00b6 The following example is an Ansible Playbook that includes all the supported features: use this link if viewing the doc on github --- - name : \"Database / MariaDB / Client / Usage example\" hosts : \"localhost\" gather_facts : true tasks : - name : \"Example: install\" vars : db_mariadb_client : resolve_prereq : true deploy : true ansible.builtin.include_role : name : \"serdigital64.database.db_mariadb_client\" ... The playbook can be run by executing: # Set ANSIBLE_COLLECTIONS_PATHS to the default location. Change as needed. ANSIBLE_COLLECTIONS_PATHS = \" ${ HOME } /.ansible/collections\" ansible-playbook \" ${ ANSIBLE_COLLECTIONS_PATHS } /ansible_collections/serdigital64/database/playbooks/db_mariadb_client.yml\" Role Parameters \u00b6 Actions \u00b6 Use action-parameters to control what tasks are enabled for the role to execute. Parameters should be declared as task level vars as they are intented to be dynamic. db_mariadb_client : resolve_prereq : deploy : Parameter Required? Type Default Purpose / Value db_mariadb_client.resolve_prereq no boolean false Enable automatic resolution of prequisites db_mariadb_client.deploy no boolean false Enable installation of application packages End State \u00b6 Use end-state parameters to define the target state after role execution. Parameters should be declared in host_vars or group_vars as they are intended to be permanent. db_mariadb_client_application : name : type : version : installed : Parameter Required? Type Default Purpose / Value db_mariadb_client_application yes(deploy) dictionary Set application package end state db_mariadb_client_application.name yes string \"mariadb_server\" Select application package name db_mariadb_client_application.type yes string \"distro\" Select application package type db_mariadb_client_application.version yes string \"latest\" Select application package version db_mariadb_client_application.installed yes boolean true Set application package end state Deployment \u00b6 OS Compatibility \u00b6 CentOS8 OracleLinux8 Ubuntu20 Ubuntu21 Fedora33 Fedora35 Debian10 Debian11 Dependencies \u00b6 Ansible Collections: serdigital64.backup bkp_archive serdigital64.system sys_package sys_repository Prerequisites \u00b6 The Ansible engine must be already installed and configured for privileged access and remote execution. In addition the following prerequisites can be automatically solved when running the playbook by setting the role action: resolve_prereq: true Package manager for the target application is installed and enabled. Installation Procedure \u00b6 Manually install Ansible Collections from the Ansible Galaxy repository: ansible-galaxy collection install serdigital64.database Automatic installation is also available by deploying A:Platform64 Contributing \u00b6 Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details. Author \u00b6 SerDigital64 License \u00b6 GPL-3.0-or-later","title":"db_mariadb_client"},{"location":"roles/db_mariadb_client/#ansible-role-serdigital64databasedb_mariadb_client","text":"","title":"Ansible Role: serdigital64.database.db_mariadb_client"},{"location":"roles/db_mariadb_client/#purpose","text":"Manage provisioning of MariaDB client. Supported features in the current version: Deploy application. Packages are defined in the variable db_mariadb_client_profiles . The db_mariadb_client Ansible-Role is part of the A:Platform64 project and is available in the database Ansible-Collection.","title":"Purpose"},{"location":"roles/db_mariadb_client/#usage","text":"The following example is an Ansible Playbook that includes all the supported features: use this link if viewing the doc on github --- - name : \"Database / MariaDB / Client / Usage example\" hosts : \"localhost\" gather_facts : true tasks : - name : \"Example: install\" vars : db_mariadb_client : resolve_prereq : true deploy : true ansible.builtin.include_role : name : \"serdigital64.database.db_mariadb_client\" ... The playbook can be run by executing: # Set ANSIBLE_COLLECTIONS_PATHS to the default location. Change as needed. ANSIBLE_COLLECTIONS_PATHS = \" ${ HOME } /.ansible/collections\" ansible-playbook \" ${ ANSIBLE_COLLECTIONS_PATHS } /ansible_collections/serdigital64/database/playbooks/db_mariadb_client.yml\"","title":"Usage"},{"location":"roles/db_mariadb_client/#role-parameters","text":"","title":"Role Parameters"},{"location":"roles/db_mariadb_client/#actions","text":"Use action-parameters to control what tasks are enabled for the role to execute. Parameters should be declared as task level vars as they are intented to be dynamic. db_mariadb_client : resolve_prereq : deploy : Parameter Required? Type Default Purpose / Value db_mariadb_client.resolve_prereq no boolean false Enable automatic resolution of prequisites db_mariadb_client.deploy no boolean false Enable installation of application packages","title":"Actions"},{"location":"roles/db_mariadb_client/#end-state","text":"Use end-state parameters to define the target state after role execution. Parameters should be declared in host_vars or group_vars as they are intended to be permanent. db_mariadb_client_application : name : type : version : installed : Parameter Required? Type Default Purpose / Value db_mariadb_client_application yes(deploy) dictionary Set application package end state db_mariadb_client_application.name yes string \"mariadb_server\" Select application package name db_mariadb_client_application.type yes string \"distro\" Select application package type db_mariadb_client_application.version yes string \"latest\" Select application package version db_mariadb_client_application.installed yes boolean true Set application package end state","title":"End State"},{"location":"roles/db_mariadb_client/#deployment","text":"","title":"Deployment"},{"location":"roles/db_mariadb_client/#os-compatibility","text":"CentOS8 OracleLinux8 Ubuntu20 Ubuntu21 Fedora33 Fedora35 Debian10 Debian11","title":"OS Compatibility"},{"location":"roles/db_mariadb_client/#dependencies","text":"Ansible Collections: serdigital64.backup bkp_archive serdigital64.system sys_package sys_repository","title":"Dependencies"},{"location":"roles/db_mariadb_client/#prerequisites","text":"The Ansible engine must be already installed and configured for privileged access and remote execution. In addition the following prerequisites can be automatically solved when running the playbook by setting the role action: resolve_prereq: true Package manager for the target application is installed and enabled.","title":"Prerequisites"},{"location":"roles/db_mariadb_client/#installation-procedure","text":"Manually install Ansible Collections from the Ansible Galaxy repository: ansible-galaxy collection install serdigital64.database Automatic installation is also available by deploying A:Platform64","title":"Installation Procedure"},{"location":"roles/db_mariadb_client/#contributing","text":"Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details.","title":"Contributing"},{"location":"roles/db_mariadb_client/#author","text":"SerDigital64","title":"Author"},{"location":"roles/db_mariadb_client/#license","text":"GPL-3.0-or-later","title":"License"},{"location":"roles/db_mariadb_server/","text":"Ansible Role: serdigital64.database.db_mariadb_server \u00b6 Purpose \u00b6 Manage provisioning of MariaDB server. Supported features in the current version: Deploy application. Packages are defined in the variable db_mariadb_server_profiles . The db_mariadb_server Ansible-Role is part of the A:Platform64 project and is available in the database Ansible-Collection. Usage \u00b6 The following example is an Ansible Playbook that includes all the supported features: use this link if viewing the doc on github --- - name : \"Database / MariaDB / Server / Usage example\" hosts : \"localhost\" gather_facts : true tasks : - name : \"Example: install\" vars : db_mariadb_server : resolve_prereq : true deploy : true ansible.builtin.include_role : name : \"serdigital64.database.db_mariadb_server\" ... The playbook can be run by executing: # Set ANSIBLE_COLLECTIONS_PATHS to the default location. Change as needed. ANSIBLE_COLLECTIONS_PATHS = \" ${ HOME } /.ansible/collections\" ansible-playbook \" ${ ANSIBLE_COLLECTIONS_PATHS } /ansible_collections/serdigital64/database/playbooks/db_mariadb_server.yml\" Role Parameters \u00b6 Actions \u00b6 Use action-parameters to control what tasks are enabled for the role to execute. Parameters should be declared as task level vars as they are intented to be dynamic. db_mariadb_server : resolve_prereq : deploy : Parameter Required? Type Default Purpose / Value db_mariadb_server.resolve_prereq no boolean false Enable automatic resolution of prequisites db_mariadb_server.deploy no boolean false Enable installation of application packages End State \u00b6 Use end-state parameters to define the target state after role execution. Parameters should be declared in host_vars or group_vars as they are intended to be permanent. db_mariadb_server_application : name : type : version : installed : Parameter Required? Type Default Purpose / Value db_mariadb_server_application yes(deploy) dictionary Set application package end state db_mariadb_server_application.name yes string \"mariadb_server\" Select application package name db_mariadb_server_application.type yes string \"distro\" Select application package type db_mariadb_server_application.version yes string \"latest\" Select application package version db_mariadb_server_application.installed yes boolean true Set application package end state Deployment \u00b6 OS Compatibility \u00b6 CentOS8 OracleLinux8 Ubuntu20 Ubuntu21 Fedora33 Fedora35 Debian10 Debian11 Dependencies \u00b6 Ansible Collections: serdigital64.backup bkp_archive serdigital64.system sys_package sys_repository Prerequisites \u00b6 The Ansible engine must be already installed and configured for privileged access and remote execution. In addition the following prerequisites can be automatically solved when running the playbook by setting the role action: resolve_prereq: true Package manager for the target application is installed and enabled. Installation Procedure \u00b6 Manually install Ansible Collections from the Ansible Galaxy repository: ansible-galaxy collection install serdigital64.database Automatic installation is also available by deploying A:Platform64 Contributing \u00b6 Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details. Author \u00b6 SerDigital64 License \u00b6 GPL-3.0-or-later","title":"db_mariadb_server"},{"location":"roles/db_mariadb_server/#ansible-role-serdigital64databasedb_mariadb_server","text":"","title":"Ansible Role: serdigital64.database.db_mariadb_server"},{"location":"roles/db_mariadb_server/#purpose","text":"Manage provisioning of MariaDB server. Supported features in the current version: Deploy application. Packages are defined in the variable db_mariadb_server_profiles . The db_mariadb_server Ansible-Role is part of the A:Platform64 project and is available in the database Ansible-Collection.","title":"Purpose"},{"location":"roles/db_mariadb_server/#usage","text":"The following example is an Ansible Playbook that includes all the supported features: use this link if viewing the doc on github --- - name : \"Database / MariaDB / Server / Usage example\" hosts : \"localhost\" gather_facts : true tasks : - name : \"Example: install\" vars : db_mariadb_server : resolve_prereq : true deploy : true ansible.builtin.include_role : name : \"serdigital64.database.db_mariadb_server\" ... The playbook can be run by executing: # Set ANSIBLE_COLLECTIONS_PATHS to the default location. Change as needed. ANSIBLE_COLLECTIONS_PATHS = \" ${ HOME } /.ansible/collections\" ansible-playbook \" ${ ANSIBLE_COLLECTIONS_PATHS } /ansible_collections/serdigital64/database/playbooks/db_mariadb_server.yml\"","title":"Usage"},{"location":"roles/db_mariadb_server/#role-parameters","text":"","title":"Role Parameters"},{"location":"roles/db_mariadb_server/#actions","text":"Use action-parameters to control what tasks are enabled for the role to execute. Parameters should be declared as task level vars as they are intented to be dynamic. db_mariadb_server : resolve_prereq : deploy : Parameter Required? Type Default Purpose / Value db_mariadb_server.resolve_prereq no boolean false Enable automatic resolution of prequisites db_mariadb_server.deploy no boolean false Enable installation of application packages","title":"Actions"},{"location":"roles/db_mariadb_server/#end-state","text":"Use end-state parameters to define the target state after role execution. Parameters should be declared in host_vars or group_vars as they are intended to be permanent. db_mariadb_server_application : name : type : version : installed : Parameter Required? Type Default Purpose / Value db_mariadb_server_application yes(deploy) dictionary Set application package end state db_mariadb_server_application.name yes string \"mariadb_server\" Select application package name db_mariadb_server_application.type yes string \"distro\" Select application package type db_mariadb_server_application.version yes string \"latest\" Select application package version db_mariadb_server_application.installed yes boolean true Set application package end state","title":"End State"},{"location":"roles/db_mariadb_server/#deployment","text":"","title":"Deployment"},{"location":"roles/db_mariadb_server/#os-compatibility","text":"CentOS8 OracleLinux8 Ubuntu20 Ubuntu21 Fedora33 Fedora35 Debian10 Debian11","title":"OS Compatibility"},{"location":"roles/db_mariadb_server/#dependencies","text":"Ansible Collections: serdigital64.backup bkp_archive serdigital64.system sys_package sys_repository","title":"Dependencies"},{"location":"roles/db_mariadb_server/#prerequisites","text":"The Ansible engine must be already installed and configured for privileged access and remote execution. In addition the following prerequisites can be automatically solved when running the playbook by setting the role action: resolve_prereq: true Package manager for the target application is installed and enabled.","title":"Prerequisites"},{"location":"roles/db_mariadb_server/#installation-procedure","text":"Manually install Ansible Collections from the Ansible Galaxy repository: ansible-galaxy collection install serdigital64.database Automatic installation is also available by deploying A:Platform64","title":"Installation Procedure"},{"location":"roles/db_mariadb_server/#contributing","text":"Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details.","title":"Contributing"},{"location":"roles/db_mariadb_server/#author","text":"SerDigital64","title":"Author"},{"location":"roles/db_mariadb_server/#license","text":"GPL-3.0-or-later","title":"License"},{"location":"roles/db_mysql_client/","text":"Ansible Role: serdigital64.database.db_mysql_client \u00b6 Purpose \u00b6 Manage provisioning of MySQL client. Supported features in the current version: Deploy application. Packages are defined in the variable db_mysql_client_profiles . The db_mysql_client Ansible-Role is part of the A:Platform64 project and is available in the database Ansible-Collection. Usage \u00b6 The following example is an Ansible Playbook that includes all the supported features: use this link if viewing the doc on github --- - name : \"Database / MySQL / Client / Usage example\" hosts : \"localhost\" gather_facts : true tasks : - name : \"Example: install\" vars : db_mysql_client : resolve_prereq : true deploy : true ansible.builtin.include_role : name : \"serdigital64.database.db_mysql_client\" ... The playbook can be run by executing: # Set ANSIBLE_COLLECTIONS_PATHS to the default location. Change as needed. ANSIBLE_COLLECTIONS_PATHS = \" ${ HOME } /.ansible/collections\" ansible-playbook \" ${ ANSIBLE_COLLECTIONS_PATHS } /ansible_collections/serdigital64/database/playbooks/db_mysql_client.yml\" Role Parameters \u00b6 Actions \u00b6 Use action-parameters to control what tasks are enabled for the role to execute. Parameters should be declared as task level vars as they are intented to be dynamic. db_mysql_client : resolve_prereq : deploy : Parameter Required? Type Default Purpose / Value db_mysql_client.resolve_prereq no boolean false Enable automatic resolution of prequisites db_mysql_client.deploy no boolean false Enable installation of application packages End State \u00b6 Use end-state parameters to define the target state after role execution. Parameters should be declared in host_vars or group_vars as they are intended to be permanent. db_mysql_client_application : name : type : version : installed : Parameter Required? Type Default Purpose / Value db_mysql_client_application yes(deploy) dictionary Set application package end state db_mysql_client_application.name yes string \"mysql_server\" Select application package name db_mysql_client_application.type yes string \"distro\" Select application package type db_mysql_client_application.version yes string \"latest\" Select application package version db_mysql_client_application.installed yes boolean true Set application package end state Deployment \u00b6 OS Compatibility \u00b6 CentOS8 OracleLinux8 Ubuntu20 Ubuntu21 Fedora33 Fedora35 Debian10 Debian11 Dependencies \u00b6 Ansible Collections: serdigital64.backup bkp_archive serdigital64.system sys_package sys_repository Prerequisites \u00b6 The Ansible engine must be already installed and configured for privileged access and remote execution. In addition the following prerequisites can be automatically solved when running the playbook by setting the role action: resolve_prereq: true Package manager for the target application is installed and enabled. Installation Procedure \u00b6 Manually install Ansible Collections from the Ansible Galaxy repository: ansible-galaxy collection install serdigital64.database Automatic installation is also available by deploying A:Platform64 Contributing \u00b6 Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details. Author \u00b6 SerDigital64 License \u00b6 GPL-3.0-or-later","title":"db_mysql_client"},{"location":"roles/db_mysql_client/#ansible-role-serdigital64databasedb_mysql_client","text":"","title":"Ansible Role: serdigital64.database.db_mysql_client"},{"location":"roles/db_mysql_client/#purpose","text":"Manage provisioning of MySQL client. Supported features in the current version: Deploy application. Packages are defined in the variable db_mysql_client_profiles . The db_mysql_client Ansible-Role is part of the A:Platform64 project and is available in the database Ansible-Collection.","title":"Purpose"},{"location":"roles/db_mysql_client/#usage","text":"The following example is an Ansible Playbook that includes all the supported features: use this link if viewing the doc on github --- - name : \"Database / MySQL / Client / Usage example\" hosts : \"localhost\" gather_facts : true tasks : - name : \"Example: install\" vars : db_mysql_client : resolve_prereq : true deploy : true ansible.builtin.include_role : name : \"serdigital64.database.db_mysql_client\" ... The playbook can be run by executing: # Set ANSIBLE_COLLECTIONS_PATHS to the default location. Change as needed. ANSIBLE_COLLECTIONS_PATHS = \" ${ HOME } /.ansible/collections\" ansible-playbook \" ${ ANSIBLE_COLLECTIONS_PATHS } /ansible_collections/serdigital64/database/playbooks/db_mysql_client.yml\"","title":"Usage"},{"location":"roles/db_mysql_client/#role-parameters","text":"","title":"Role Parameters"},{"location":"roles/db_mysql_client/#actions","text":"Use action-parameters to control what tasks are enabled for the role to execute. Parameters should be declared as task level vars as they are intented to be dynamic. db_mysql_client : resolve_prereq : deploy : Parameter Required? Type Default Purpose / Value db_mysql_client.resolve_prereq no boolean false Enable automatic resolution of prequisites db_mysql_client.deploy no boolean false Enable installation of application packages","title":"Actions"},{"location":"roles/db_mysql_client/#end-state","text":"Use end-state parameters to define the target state after role execution. Parameters should be declared in host_vars or group_vars as they are intended to be permanent. db_mysql_client_application : name : type : version : installed : Parameter Required? Type Default Purpose / Value db_mysql_client_application yes(deploy) dictionary Set application package end state db_mysql_client_application.name yes string \"mysql_server\" Select application package name db_mysql_client_application.type yes string \"distro\" Select application package type db_mysql_client_application.version yes string \"latest\" Select application package version db_mysql_client_application.installed yes boolean true Set application package end state","title":"End State"},{"location":"roles/db_mysql_client/#deployment","text":"","title":"Deployment"},{"location":"roles/db_mysql_client/#os-compatibility","text":"CentOS8 OracleLinux8 Ubuntu20 Ubuntu21 Fedora33 Fedora35 Debian10 Debian11","title":"OS Compatibility"},{"location":"roles/db_mysql_client/#dependencies","text":"Ansible Collections: serdigital64.backup bkp_archive serdigital64.system sys_package sys_repository","title":"Dependencies"},{"location":"roles/db_mysql_client/#prerequisites","text":"The Ansible engine must be already installed and configured for privileged access and remote execution. In addition the following prerequisites can be automatically solved when running the playbook by setting the role action: resolve_prereq: true Package manager for the target application is installed and enabled.","title":"Prerequisites"},{"location":"roles/db_mysql_client/#installation-procedure","text":"Manually install Ansible Collections from the Ansible Galaxy repository: ansible-galaxy collection install serdigital64.database Automatic installation is also available by deploying A:Platform64","title":"Installation Procedure"},{"location":"roles/db_mysql_client/#contributing","text":"Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details.","title":"Contributing"},{"location":"roles/db_mysql_client/#author","text":"SerDigital64","title":"Author"},{"location":"roles/db_mysql_client/#license","text":"GPL-3.0-or-later","title":"License"},{"location":"roles/db_mysql_server/","text":"Ansible Role: serdigital64.database.db_mysql_server \u00b6 Purpose \u00b6 Manage provisioning of MySQL server. Supported features in the current version: Deploy application. Packages are defined in the variable db_mysql_server_profiles . The db_mysql_server Ansible-Role is part of the A:Platform64 project and is available in the database Ansible-Collection. Usage \u00b6 The following example is an Ansible Playbook that includes all the supported features: use this link if viewing the doc on github --- - name : \"Database / MySQL / Server / Usage example\" hosts : \"localhost\" gather_facts : true tasks : - name : \"Example: install\" vars : db_mysql_server : resolve_prereq : true deploy : true ansible.builtin.include_role : name : \"serdigital64.database.db_mysql_server\" ... The playbook can be run by executing: # Set ANSIBLE_COLLECTIONS_PATHS to the default location. Change as needed. ANSIBLE_COLLECTIONS_PATHS = \" ${ HOME } /.ansible/collections\" ansible-playbook \" ${ ANSIBLE_COLLECTIONS_PATHS } /ansible_collections/serdigital64/database/playbooks/db_mysql_server.yml\" Role Parameters \u00b6 Actions \u00b6 Use action-parameters to control what tasks are enabled for the role to execute. Parameters should be declared as task level vars as they are intented to be dynamic. db_mysql_server : resolve_prereq : deploy : Parameter Required? Type Default Purpose / Value db_mysql_server.resolve_prereq no boolean false Enable automatic resolution of prequisites db_mysql_server.deploy no boolean false Enable installation of application packages End State \u00b6 Use end-state parameters to define the target state after role execution. Parameters should be declared in host_vars or group_vars as they are intended to be permanent. db_mysql_server_application : name : type : version : installed : Parameter Required? Type Default Purpose / Value db_mysql_server_application yes(deploy) dictionary Set application package end state db_mysql_server_application.name yes string \"mysql_server\" Select application package name db_mysql_server_application.type yes string \"distro\" Select application package type db_mysql_server_application.version yes string \"latest\" Select application package version db_mysql_server_application.installed yes boolean true Set application package end state Deployment \u00b6 OS Compatibility \u00b6 CentOS8 OracleLinux8 Ubuntu20 Ubuntu21 Fedora33 Fedora35 Debian10 Debian11 Dependencies \u00b6 Ansible Collections: serdigital64.backup bkp_archive serdigital64.system sys_package sys_repository Prerequisites \u00b6 The Ansible engine must be already installed and configured for privileged access and remote execution. In addition the following prerequisites can be automatically solved when running the playbook by setting the role action: resolve_prereq: true Package manager for the target application is installed and enabled. Installation Procedure \u00b6 Manually install Ansible Collections from the Ansible Galaxy repository: ansible-galaxy collection install serdigital64.database Automatic installation is also available by deploying A:Platform64 Contributing \u00b6 Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details. Author \u00b6 SerDigital64 License \u00b6 GPL-3.0-or-later","title":"db_mysql_server"},{"location":"roles/db_mysql_server/#ansible-role-serdigital64databasedb_mysql_server","text":"","title":"Ansible Role: serdigital64.database.db_mysql_server"},{"location":"roles/db_mysql_server/#purpose","text":"Manage provisioning of MySQL server. Supported features in the current version: Deploy application. Packages are defined in the variable db_mysql_server_profiles . The db_mysql_server Ansible-Role is part of the A:Platform64 project and is available in the database Ansible-Collection.","title":"Purpose"},{"location":"roles/db_mysql_server/#usage","text":"The following example is an Ansible Playbook that includes all the supported features: use this link if viewing the doc on github --- - name : \"Database / MySQL / Server / Usage example\" hosts : \"localhost\" gather_facts : true tasks : - name : \"Example: install\" vars : db_mysql_server : resolve_prereq : true deploy : true ansible.builtin.include_role : name : \"serdigital64.database.db_mysql_server\" ... The playbook can be run by executing: # Set ANSIBLE_COLLECTIONS_PATHS to the default location. Change as needed. ANSIBLE_COLLECTIONS_PATHS = \" ${ HOME } /.ansible/collections\" ansible-playbook \" ${ ANSIBLE_COLLECTIONS_PATHS } /ansible_collections/serdigital64/database/playbooks/db_mysql_server.yml\"","title":"Usage"},{"location":"roles/db_mysql_server/#role-parameters","text":"","title":"Role Parameters"},{"location":"roles/db_mysql_server/#actions","text":"Use action-parameters to control what tasks are enabled for the role to execute. Parameters should be declared as task level vars as they are intented to be dynamic. db_mysql_server : resolve_prereq : deploy : Parameter Required? Type Default Purpose / Value db_mysql_server.resolve_prereq no boolean false Enable automatic resolution of prequisites db_mysql_server.deploy no boolean false Enable installation of application packages","title":"Actions"},{"location":"roles/db_mysql_server/#end-state","text":"Use end-state parameters to define the target state after role execution. Parameters should be declared in host_vars or group_vars as they are intended to be permanent. db_mysql_server_application : name : type : version : installed : Parameter Required? Type Default Purpose / Value db_mysql_server_application yes(deploy) dictionary Set application package end state db_mysql_server_application.name yes string \"mysql_server\" Select application package name db_mysql_server_application.type yes string \"distro\" Select application package type db_mysql_server_application.version yes string \"latest\" Select application package version db_mysql_server_application.installed yes boolean true Set application package end state","title":"End State"},{"location":"roles/db_mysql_server/#deployment","text":"","title":"Deployment"},{"location":"roles/db_mysql_server/#os-compatibility","text":"CentOS8 OracleLinux8 Ubuntu20 Ubuntu21 Fedora33 Fedora35 Debian10 Debian11","title":"OS Compatibility"},{"location":"roles/db_mysql_server/#dependencies","text":"Ansible Collections: serdigital64.backup bkp_archive serdigital64.system sys_package sys_repository","title":"Dependencies"},{"location":"roles/db_mysql_server/#prerequisites","text":"The Ansible engine must be already installed and configured for privileged access and remote execution. In addition the following prerequisites can be automatically solved when running the playbook by setting the role action: resolve_prereq: true Package manager for the target application is installed and enabled.","title":"Prerequisites"},{"location":"roles/db_mysql_server/#installation-procedure","text":"Manually install Ansible Collections from the Ansible Galaxy repository: ansible-galaxy collection install serdigital64.database Automatic installation is also available by deploying A:Platform64","title":"Installation Procedure"},{"location":"roles/db_mysql_server/#contributing","text":"Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details.","title":"Contributing"},{"location":"roles/db_mysql_server/#author","text":"SerDigital64","title":"Author"},{"location":"roles/db_mysql_server/#license","text":"GPL-3.0-or-later","title":"License"},{"location":"roles/db_postgresql_client/","text":"Ansible Role: serdigital64.database.db_postgresql_client \u00b6 Purpose \u00b6 Manage provisioning of PostgreSQL client. Supported features in the current version: Deploy application. Packages are defined in the variable db_postgresql_client_profiles . The db_postgresql_client Ansible-Role is part of the A:Platform64 project and is available in the database Ansible-Collection. Usage \u00b6 The following example is an Ansible Playbook that includes all the supported features: use this link if viewing the doc on github --- - name : \"Database / PostgreSQL / Client / Usage example\" hosts : \"localhost\" gather_facts : true tasks : - name : \"Example: install\" vars : db_postgresql_client : resolve_prereq : true deploy : true ansible.builtin.include_role : name : \"serdigital64.database.db_postgresql_client\" ... The playbook can be run by executing: # Set ANSIBLE_COLLECTIONS_PATHS to the default location. Change as needed. ANSIBLE_COLLECTIONS_PATHS = \" ${ HOME } /.ansible/collections\" ansible-playbook \" ${ ANSIBLE_COLLECTIONS_PATHS } /ansible_collections/serdigital64/database/playbooks/db_postgresql_client.yml\" Role Parameters \u00b6 Actions \u00b6 Use action-parameters to control what tasks are enabled for the role to execute. Parameters should be declared as task level vars as they are intented to be dynamic. db_postgresql_client : resolve_prereq : deploy : Parameter Required? Type Default Purpose / Value db_postgresql_client.resolve_prereq no boolean false Enable automatic resolution of prequisites db_postgresql_client.deploy no boolean false Enable installation of application packages End State \u00b6 Use end-state parameters to define the target state after role execution. Parameters should be declared in host_vars or group_vars as they are intended to be permanent. db_postgresql_client_application : name : type : version : installed : Parameter Required? Type Default Purpose / Value db_postgresql_client_application yes(deploy) dictionary Set application package end state db_postgresql_client_application.name yes string \"postgresql_client\" Select application package name db_postgresql_client_application.type yes string \"distro\" Select application package type db_postgresql_client_application.version yes string \"latest\" Select application package version db_postgresql_client_application.installed yes boolean true Set application package end state Deployment \u00b6 OS Compatibility \u00b6 CentOS8 OracleLinux8 Ubuntu20 Ubuntu21 Fedora33 Fedora35 Debian10 Debian11 Dependencies \u00b6 Ansible Collections: serdigital64.backup bkp_archive serdigital64.system sys_package sys_repository Prerequisites \u00b6 The Ansible engine must be already installed and configured for privileged access and remote execution. In addition the following prerequisites can be automatically solved when running the playbook by setting the role action: resolve_prereq: true Package manager for the target application is installed and enabled. Installation Procedure \u00b6 Manually install Ansible Collections from the Ansible Galaxy repository: ansible-galaxy collection install serdigital64.database Automatic installation is also available by deploying A:Platform64 Contributing \u00b6 Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details. Author \u00b6 SerDigital64 License \u00b6 GPL-3.0-or-later","title":"db_postgresql_client"},{"location":"roles/db_postgresql_client/#ansible-role-serdigital64databasedb_postgresql_client","text":"","title":"Ansible Role: serdigital64.database.db_postgresql_client"},{"location":"roles/db_postgresql_client/#purpose","text":"Manage provisioning of PostgreSQL client. Supported features in the current version: Deploy application. Packages are defined in the variable db_postgresql_client_profiles . The db_postgresql_client Ansible-Role is part of the A:Platform64 project and is available in the database Ansible-Collection.","title":"Purpose"},{"location":"roles/db_postgresql_client/#usage","text":"The following example is an Ansible Playbook that includes all the supported features: use this link if viewing the doc on github --- - name : \"Database / PostgreSQL / Client / Usage example\" hosts : \"localhost\" gather_facts : true tasks : - name : \"Example: install\" vars : db_postgresql_client : resolve_prereq : true deploy : true ansible.builtin.include_role : name : \"serdigital64.database.db_postgresql_client\" ... The playbook can be run by executing: # Set ANSIBLE_COLLECTIONS_PATHS to the default location. Change as needed. ANSIBLE_COLLECTIONS_PATHS = \" ${ HOME } /.ansible/collections\" ansible-playbook \" ${ ANSIBLE_COLLECTIONS_PATHS } /ansible_collections/serdigital64/database/playbooks/db_postgresql_client.yml\"","title":"Usage"},{"location":"roles/db_postgresql_client/#role-parameters","text":"","title":"Role Parameters"},{"location":"roles/db_postgresql_client/#actions","text":"Use action-parameters to control what tasks are enabled for the role to execute. Parameters should be declared as task level vars as they are intented to be dynamic. db_postgresql_client : resolve_prereq : deploy : Parameter Required? Type Default Purpose / Value db_postgresql_client.resolve_prereq no boolean false Enable automatic resolution of prequisites db_postgresql_client.deploy no boolean false Enable installation of application packages","title":"Actions"},{"location":"roles/db_postgresql_client/#end-state","text":"Use end-state parameters to define the target state after role execution. Parameters should be declared in host_vars or group_vars as they are intended to be permanent. db_postgresql_client_application : name : type : version : installed : Parameter Required? Type Default Purpose / Value db_postgresql_client_application yes(deploy) dictionary Set application package end state db_postgresql_client_application.name yes string \"postgresql_client\" Select application package name db_postgresql_client_application.type yes string \"distro\" Select application package type db_postgresql_client_application.version yes string \"latest\" Select application package version db_postgresql_client_application.installed yes boolean true Set application package end state","title":"End State"},{"location":"roles/db_postgresql_client/#deployment","text":"","title":"Deployment"},{"location":"roles/db_postgresql_client/#os-compatibility","text":"CentOS8 OracleLinux8 Ubuntu20 Ubuntu21 Fedora33 Fedora35 Debian10 Debian11","title":"OS Compatibility"},{"location":"roles/db_postgresql_client/#dependencies","text":"Ansible Collections: serdigital64.backup bkp_archive serdigital64.system sys_package sys_repository","title":"Dependencies"},{"location":"roles/db_postgresql_client/#prerequisites","text":"The Ansible engine must be already installed and configured for privileged access and remote execution. In addition the following prerequisites can be automatically solved when running the playbook by setting the role action: resolve_prereq: true Package manager for the target application is installed and enabled.","title":"Prerequisites"},{"location":"roles/db_postgresql_client/#installation-procedure","text":"Manually install Ansible Collections from the Ansible Galaxy repository: ansible-galaxy collection install serdigital64.database Automatic installation is also available by deploying A:Platform64","title":"Installation Procedure"},{"location":"roles/db_postgresql_client/#contributing","text":"Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details.","title":"Contributing"},{"location":"roles/db_postgresql_client/#author","text":"SerDigital64","title":"Author"},{"location":"roles/db_postgresql_client/#license","text":"GPL-3.0-or-later","title":"License"},{"location":"roles/db_postgresql_server/","text":"Ansible Role: serdigital64.database.db_postgresql_server \u00b6 Purpose \u00b6 Manage provisioning of PostgreSQL server. Supported features in the current version: Deploy application. Packages are defined in the variable db_postgresql_server_profiles . The db_postgresql_server Ansible-Role is part of the A:Platform64 project and is available in the database Ansible-Collection. Usage \u00b6 The following example is an Ansible Playbook that includes all the supported features: use this link if viewing the doc on github --- - name : \"Database / PostgreSQL / Server / Usage example\" hosts : \"localhost\" gather_facts : true tasks : - name : \"Example: install\" vars : db_postgresql_server : resolve_prereq : true deploy : true ansible.builtin.include_role : name : \"serdigital64.database.db_postgresql_server\" ... The playbook can be run by executing: # Set ANSIBLE_COLLECTIONS_PATHS to the default location. Change as needed. ANSIBLE_COLLECTIONS_PATHS = \" ${ HOME } /.ansible/collections\" ansible-playbook \" ${ ANSIBLE_COLLECTIONS_PATHS } /ansible_collections/serdigital64/database/playbooks/db_postgresql_server.yml\" Role Parameters \u00b6 Actions \u00b6 Use action-parameters to control what tasks are enabled for the role to execute. Parameters should be declared as task level vars as they are intented to be dynamic. db_postgresql_server : resolve_prereq : deploy : Parameter Required? Type Default Purpose / Value db_postgresql_server.resolve_prereq no boolean false Enable automatic resolution of prequisites db_postgresql_server.deploy no boolean false Enable installation of application packages End State \u00b6 Use end-state parameters to define the target state after role execution. Parameters should be declared in host_vars or group_vars as they are intended to be permanent. db_postgresql_server_application : name : type : version : installed : Parameter Required? Type Default Purpose / Value db_postgresql_server_application yes(deploy) dictionary Set application package end state db_postgresql_server_application.name yes string \"postgresql_server\" Select application package name db_postgresql_server_application.type yes string \"distro\" Select application package type db_postgresql_server_application.version yes string \"latest\" Select application package version db_postgresql_server_application.installed yes boolean true Set application package end state Deployment \u00b6 OS Compatibility \u00b6 CentOS8 OracleLinux8 Ubuntu20 Ubuntu21 Fedora33 Fedora35 Debian10 Debian11 Dependencies \u00b6 Ansible Collections: serdigital64.backup bkp_archive serdigital64.system sys_package sys_repository Prerequisites \u00b6 The Ansible engine must be already installed and configured for privileged access and remote execution. In addition the following prerequisites can be automatically solved when running the playbook by setting the role action: resolve_prereq: true Package manager for the target application is installed and enabled. Installation Procedure \u00b6 Manually install Ansible Collections from the Ansible Galaxy repository: ansible-galaxy collection install serdigital64.database Automatic installation is also available by deploying A:Platform64 Contributing \u00b6 Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details. Author \u00b6 SerDigital64 License \u00b6 GPL-3.0-or-later","title":"db_postgresql_server"},{"location":"roles/db_postgresql_server/#ansible-role-serdigital64databasedb_postgresql_server","text":"","title":"Ansible Role: serdigital64.database.db_postgresql_server"},{"location":"roles/db_postgresql_server/#purpose","text":"Manage provisioning of PostgreSQL server. Supported features in the current version: Deploy application. Packages are defined in the variable db_postgresql_server_profiles . The db_postgresql_server Ansible-Role is part of the A:Platform64 project and is available in the database Ansible-Collection.","title":"Purpose"},{"location":"roles/db_postgresql_server/#usage","text":"The following example is an Ansible Playbook that includes all the supported features: use this link if viewing the doc on github --- - name : \"Database / PostgreSQL / Server / Usage example\" hosts : \"localhost\" gather_facts : true tasks : - name : \"Example: install\" vars : db_postgresql_server : resolve_prereq : true deploy : true ansible.builtin.include_role : name : \"serdigital64.database.db_postgresql_server\" ... The playbook can be run by executing: # Set ANSIBLE_COLLECTIONS_PATHS to the default location. Change as needed. ANSIBLE_COLLECTIONS_PATHS = \" ${ HOME } /.ansible/collections\" ansible-playbook \" ${ ANSIBLE_COLLECTIONS_PATHS } /ansible_collections/serdigital64/database/playbooks/db_postgresql_server.yml\"","title":"Usage"},{"location":"roles/db_postgresql_server/#role-parameters","text":"","title":"Role Parameters"},{"location":"roles/db_postgresql_server/#actions","text":"Use action-parameters to control what tasks are enabled for the role to execute. Parameters should be declared as task level vars as they are intented to be dynamic. db_postgresql_server : resolve_prereq : deploy : Parameter Required? Type Default Purpose / Value db_postgresql_server.resolve_prereq no boolean false Enable automatic resolution of prequisites db_postgresql_server.deploy no boolean false Enable installation of application packages","title":"Actions"},{"location":"roles/db_postgresql_server/#end-state","text":"Use end-state parameters to define the target state after role execution. Parameters should be declared in host_vars or group_vars as they are intended to be permanent. db_postgresql_server_application : name : type : version : installed : Parameter Required? Type Default Purpose / Value db_postgresql_server_application yes(deploy) dictionary Set application package end state db_postgresql_server_application.name yes string \"postgresql_server\" Select application package name db_postgresql_server_application.type yes string \"distro\" Select application package type db_postgresql_server_application.version yes string \"latest\" Select application package version db_postgresql_server_application.installed yes boolean true Set application package end state","title":"End State"},{"location":"roles/db_postgresql_server/#deployment","text":"","title":"Deployment"},{"location":"roles/db_postgresql_server/#os-compatibility","text":"CentOS8 OracleLinux8 Ubuntu20 Ubuntu21 Fedora33 Fedora35 Debian10 Debian11","title":"OS Compatibility"},{"location":"roles/db_postgresql_server/#dependencies","text":"Ansible Collections: serdigital64.backup bkp_archive serdigital64.system sys_package sys_repository","title":"Dependencies"},{"location":"roles/db_postgresql_server/#prerequisites","text":"The Ansible engine must be already installed and configured for privileged access and remote execution. In addition the following prerequisites can be automatically solved when running the playbook by setting the role action: resolve_prereq: true Package manager for the target application is installed and enabled.","title":"Prerequisites"},{"location":"roles/db_postgresql_server/#installation-procedure","text":"Manually install Ansible Collections from the Ansible Galaxy repository: ansible-galaxy collection install serdigital64.database Automatic installation is also available by deploying A:Platform64","title":"Installation Procedure"},{"location":"roles/db_postgresql_server/#contributing","text":"Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details.","title":"Contributing"},{"location":"roles/db_postgresql_server/#author","text":"SerDigital64","title":"Author"},{"location":"roles/db_postgresql_server/#license","text":"GPL-3.0-or-later","title":"License"},{"location":"roles/dev_gcc/","text":"Ansible Role: serdigital64.development.dev_gcc \u00b6 Purpose \u00b6 Manage provisioning of GCC. Supported features in the current version: Deploy application. Packages are defined in the variable dev_gcc_profiles . The dev_gcc Ansible-Role is part of the A:Platform64 project and is available in the development Ansible-Collection. Usage \u00b6 The following example is an Ansible Playbook that includes all the supported features: use this link if viewing the doc on github --- - name : \"Development / GCC / Usage example\" hosts : \"localhost\" gather_facts : true tasks : - name : \"Example: Install GCC package\" vars : dev_gcc : resolve_prereq : true deploy : true ansible.builtin.include_role : name : \"serdigital64.development.dev_gcc\" ... The playbook can be run by executing: # Set ANSIBLE_COLLECTIONS_PATHS to the default install location. Change as needed. ANSIBLE_COLLECTIONS_PATHS = \" ${ HOME } /.ansible/collections\" ansible-playbook \" ${ ANSIBLE_COLLECTIONS_PATHS } /ansible_collections/serdigital64/development/playbooks/dev_gcc.yml\" Role Parameters \u00b6 Actions \u00b6 Use action-parameters to control what tasks are enabled for the role to execute. Parameters should be declared as task level vars as they are intented to be dynamic. dev_gcc : resolve_prereq : deploy : Parameter Required? Type Default Purpose / Value dev_gcc.resolve_prereq no boolean false Enable automatic resolution of prequisites dev_gcc.deploy no boolean false Enable installation of application package End State \u00b6 Use end-state parameters to define the target state after role execution. Parameters should be declared in host_vars or group_vars as they are intended to be permanent. dev_gcc_application : name : type : version : installed : Parameter Required? Type Default Purpose / Value dev_gcc_application no dictionary Set application package end state dev_gcc_application.name no string \"gcc\" Select application package name dev_gcc_application.type no string \"distro\" Select application package type dev_gcc_application.version no string \"latest\" Select application package version dev_gcc_application.installed no boolean true Set application package end state Deployment \u00b6 OS Compatibility \u00b6 CentOS8 RedHat8 AlmaLinux8 OracleLinux8 Ubuntu20 Ubuntu21 Fedora33 Fedora35 Debian10 Debian11 Dependencies \u00b6 Ansible Collections: serdigital64.backup serdigital64.system Prerequisites \u00b6 The Ansible engine must be already installed and configured for privileged access and remote execution. In addition the following prerequisites can be automatically solved when running the playbook by setting the role action: resolve_prereq: true Package manager for the target application is installed and enabled. Installation Procedure \u00b6 Manually install Ansible Collections from the Ansible Galaxy repository: ansible-galaxy collection install --upgrade serdigital64.development Automatic installation is also available by deploying A:Platform64 Contributing \u00b6 Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details. Author \u00b6 SerDigital64 License \u00b6 GPL-3.0-or-later","title":"dev_gcc"},{"location":"roles/dev_gcc/#ansible-role-serdigital64developmentdev_gcc","text":"","title":"Ansible Role: serdigital64.development.dev_gcc"},{"location":"roles/dev_gcc/#purpose","text":"Manage provisioning of GCC. Supported features in the current version: Deploy application. Packages are defined in the variable dev_gcc_profiles . The dev_gcc Ansible-Role is part of the A:Platform64 project and is available in the development Ansible-Collection.","title":"Purpose"},{"location":"roles/dev_gcc/#usage","text":"The following example is an Ansible Playbook that includes all the supported features: use this link if viewing the doc on github --- - name : \"Development / GCC / Usage example\" hosts : \"localhost\" gather_facts : true tasks : - name : \"Example: Install GCC package\" vars : dev_gcc : resolve_prereq : true deploy : true ansible.builtin.include_role : name : \"serdigital64.development.dev_gcc\" ... The playbook can be run by executing: # Set ANSIBLE_COLLECTIONS_PATHS to the default install location. Change as needed. ANSIBLE_COLLECTIONS_PATHS = \" ${ HOME } /.ansible/collections\" ansible-playbook \" ${ ANSIBLE_COLLECTIONS_PATHS } /ansible_collections/serdigital64/development/playbooks/dev_gcc.yml\"","title":"Usage"},{"location":"roles/dev_gcc/#role-parameters","text":"","title":"Role Parameters"},{"location":"roles/dev_gcc/#actions","text":"Use action-parameters to control what tasks are enabled for the role to execute. Parameters should be declared as task level vars as they are intented to be dynamic. dev_gcc : resolve_prereq : deploy : Parameter Required? Type Default Purpose / Value dev_gcc.resolve_prereq no boolean false Enable automatic resolution of prequisites dev_gcc.deploy no boolean false Enable installation of application package","title":"Actions"},{"location":"roles/dev_gcc/#end-state","text":"Use end-state parameters to define the target state after role execution. Parameters should be declared in host_vars or group_vars as they are intended to be permanent. dev_gcc_application : name : type : version : installed : Parameter Required? Type Default Purpose / Value dev_gcc_application no dictionary Set application package end state dev_gcc_application.name no string \"gcc\" Select application package name dev_gcc_application.type no string \"distro\" Select application package type dev_gcc_application.version no string \"latest\" Select application package version dev_gcc_application.installed no boolean true Set application package end state","title":"End State"},{"location":"roles/dev_gcc/#deployment","text":"","title":"Deployment"},{"location":"roles/dev_gcc/#os-compatibility","text":"CentOS8 RedHat8 AlmaLinux8 OracleLinux8 Ubuntu20 Ubuntu21 Fedora33 Fedora35 Debian10 Debian11","title":"OS Compatibility"},{"location":"roles/dev_gcc/#dependencies","text":"Ansible Collections: serdigital64.backup serdigital64.system","title":"Dependencies"},{"location":"roles/dev_gcc/#prerequisites","text":"The Ansible engine must be already installed and configured for privileged access and remote execution. In addition the following prerequisites can be automatically solved when running the playbook by setting the role action: resolve_prereq: true Package manager for the target application is installed and enabled.","title":"Prerequisites"},{"location":"roles/dev_gcc/#installation-procedure","text":"Manually install Ansible Collections from the Ansible Galaxy repository: ansible-galaxy collection install --upgrade serdigital64.development Automatic installation is also available by deploying A:Platform64","title":"Installation Procedure"},{"location":"roles/dev_gcc/#contributing","text":"Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details.","title":"Contributing"},{"location":"roles/dev_gcc/#author","text":"SerDigital64","title":"Author"},{"location":"roles/dev_gcc/#license","text":"GPL-3.0-or-later","title":"License"},{"location":"roles/dev_java/","text":"Ansible Role: serdigital64.development.dev_java \u00b6 Purpose \u00b6 Manage provisioning of Java Supported features in the current version: Deploy language. Packages are defined in the variable dev_java_profiles . Supported JAVA versions: OpenJDK v8 OpenJDK v11 OpenJDK v17 The dev_java Ansible-Role is part of the A:Platform64 project and is available in the development Ansible-Collection. Usage \u00b6 The following example is an Ansible Playbook that includes all the supported features: use this link if viewing the doc on github --- - name : \"Development / Java / Usage example\" hosts : \"localhost\" gather_facts : true tasks : - name : \"Example: Install OpenJDK v17\" vars : dev_java : resolve_prereq : true deploy : true dev_java_application : openjdk_jdk_v1_17 : name : \"openjdk_jdk_v1_17\" type : \"distro\" version : \"latest\" installed : true ansible.builtin.include_role : name : \"serdigital64.development.dev_java\" ... The playbook can be run by executing: # Set ANSIBLE_COLLECTIONS_PATHS to the default install location. Change as needed. ANSIBLE_COLLECTIONS_PATHS = \" ${ HOME } /.ansible/collections\" ansible-playbook \" ${ ANSIBLE_COLLECTIONS_PATHS } /ansible_collections/serdigital64/development/playbooks/dev_java.yml\" Role Parameters \u00b6 Actions \u00b6 Use action-parameters to control what tasks are enabled for the role to execute. Parameters should be declared as task level vars as they are intented to be dynamic. dev_java : resolve_prereq : deploy : Parameter Required? Type Default Purpose / Value dev_java.resolve_prereq no boolean false Enable automatic resolution of prequisites dev_java.deploy no boolean false Enable installation of application packages End State \u00b6 Use end-state parameters to define the target state after role execution. Parameters should be declared in host_vars or group_vars as they are intended to be permanent. dev_java_application : openjdk_jdk_v1_8 : name : type : version : installed : openjdk_jdk_v1_11 : name : type : version : installed : openjdk_jdk_v1_17 : name : type : version : installed : Parameter Required? Type Default Purpose / Value dev_java_application no dictionary Set application package end state dev_java_application.openjdk_jdk_v1_8 no dictionary Set application package end state dev_java_application.openjdk_jdk_v1_8.name no string \"openjdk_jdk_v1_8\" Select application package name dev_java_application.openjdk_jdk_v1_8.type no string \"distro\" Select application package type dev_java_application.openjdk_jdk_v1_8.version no string \"latest\" Select application package version dev_java_application.openjdk_jdk_v1_8.installed no boolean false Set application package end state dev_java_application.openjdk_jdk_v1_11 no dictionary Set application package end state dev_java_application.openjdk_jdk_v1_11.name no string \"openjdk_jdk_v1_11\" Select application package name dev_java_application.openjdk_jdk_v1_11.type no string \"distro\" Select application package type dev_java_application.openjdk_jdk_v1_11.version no string \"latest\" Select application package version dev_java_application.openjdk_jdk_v1_11.installed no boolean false Set application package end state dev_java_application.openjdk_jdk_v1_17 no dictionary Set application package end state dev_java_application.openjdk_jdk_v1_17.name no string \"openjdk_jdk_v1_17\" Select application package name dev_java_application.openjdk_jdk_v1_17.type no string \"distro\" Select application package type dev_java_application.openjdk_jdk_v1_17.version no string \"latest\" Select application package version dev_java_application.openjdk_jdk_v1_17.installed no boolean true Set application package end state Deployment \u00b6 OS Compatibility \u00b6 CentOS8 RedHat8 AlmaLinux8 OracleLinux8 Ubuntu20 Ubuntu21 Fedora33 Fedora35 Debian10 Debian11 Dependencies \u00b6 Ansible Collections: serdigital64.backup serdigital64.system Prerequisites \u00b6 The Ansible engine must be already installed and configured for privileged access and remote execution. In addition the following prerequisites can be automatically solved when running the playbook by setting the role action: resolve_prereq: true Package manager for the target application is installed and enabled. Installation Procedure \u00b6 Manually install Ansible Collections from the Ansible Galaxy repository: ansible-galaxy collection install --upgrade serdigital64.development Automatic installation is also available by deploying A:Platform64 Contributing \u00b6 Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details. Author \u00b6 SerDigital64 License \u00b6 GPL-3.0-or-later","title":"dev_java"},{"location":"roles/dev_java/#ansible-role-serdigital64developmentdev_java","text":"","title":"Ansible Role: serdigital64.development.dev_java"},{"location":"roles/dev_java/#purpose","text":"Manage provisioning of Java Supported features in the current version: Deploy language. Packages are defined in the variable dev_java_profiles . Supported JAVA versions: OpenJDK v8 OpenJDK v11 OpenJDK v17 The dev_java Ansible-Role is part of the A:Platform64 project and is available in the development Ansible-Collection.","title":"Purpose"},{"location":"roles/dev_java/#usage","text":"The following example is an Ansible Playbook that includes all the supported features: use this link if viewing the doc on github --- - name : \"Development / Java / Usage example\" hosts : \"localhost\" gather_facts : true tasks : - name : \"Example: Install OpenJDK v17\" vars : dev_java : resolve_prereq : true deploy : true dev_java_application : openjdk_jdk_v1_17 : name : \"openjdk_jdk_v1_17\" type : \"distro\" version : \"latest\" installed : true ansible.builtin.include_role : name : \"serdigital64.development.dev_java\" ... The playbook can be run by executing: # Set ANSIBLE_COLLECTIONS_PATHS to the default install location. Change as needed. ANSIBLE_COLLECTIONS_PATHS = \" ${ HOME } /.ansible/collections\" ansible-playbook \" ${ ANSIBLE_COLLECTIONS_PATHS } /ansible_collections/serdigital64/development/playbooks/dev_java.yml\"","title":"Usage"},{"location":"roles/dev_java/#role-parameters","text":"","title":"Role Parameters"},{"location":"roles/dev_java/#actions","text":"Use action-parameters to control what tasks are enabled for the role to execute. Parameters should be declared as task level vars as they are intented to be dynamic. dev_java : resolve_prereq : deploy : Parameter Required? Type Default Purpose / Value dev_java.resolve_prereq no boolean false Enable automatic resolution of prequisites dev_java.deploy no boolean false Enable installation of application packages","title":"Actions"},{"location":"roles/dev_java/#end-state","text":"Use end-state parameters to define the target state after role execution. Parameters should be declared in host_vars or group_vars as they are intended to be permanent. dev_java_application : openjdk_jdk_v1_8 : name : type : version : installed : openjdk_jdk_v1_11 : name : type : version : installed : openjdk_jdk_v1_17 : name : type : version : installed : Parameter Required? Type Default Purpose / Value dev_java_application no dictionary Set application package end state dev_java_application.openjdk_jdk_v1_8 no dictionary Set application package end state dev_java_application.openjdk_jdk_v1_8.name no string \"openjdk_jdk_v1_8\" Select application package name dev_java_application.openjdk_jdk_v1_8.type no string \"distro\" Select application package type dev_java_application.openjdk_jdk_v1_8.version no string \"latest\" Select application package version dev_java_application.openjdk_jdk_v1_8.installed no boolean false Set application package end state dev_java_application.openjdk_jdk_v1_11 no dictionary Set application package end state dev_java_application.openjdk_jdk_v1_11.name no string \"openjdk_jdk_v1_11\" Select application package name dev_java_application.openjdk_jdk_v1_11.type no string \"distro\" Select application package type dev_java_application.openjdk_jdk_v1_11.version no string \"latest\" Select application package version dev_java_application.openjdk_jdk_v1_11.installed no boolean false Set application package end state dev_java_application.openjdk_jdk_v1_17 no dictionary Set application package end state dev_java_application.openjdk_jdk_v1_17.name no string \"openjdk_jdk_v1_17\" Select application package name dev_java_application.openjdk_jdk_v1_17.type no string \"distro\" Select application package type dev_java_application.openjdk_jdk_v1_17.version no string \"latest\" Select application package version dev_java_application.openjdk_jdk_v1_17.installed no boolean true Set application package end state","title":"End State"},{"location":"roles/dev_java/#deployment","text":"","title":"Deployment"},{"location":"roles/dev_java/#os-compatibility","text":"CentOS8 RedHat8 AlmaLinux8 OracleLinux8 Ubuntu20 Ubuntu21 Fedora33 Fedora35 Debian10 Debian11","title":"OS Compatibility"},{"location":"roles/dev_java/#dependencies","text":"Ansible Collections: serdigital64.backup serdigital64.system","title":"Dependencies"},{"location":"roles/dev_java/#prerequisites","text":"The Ansible engine must be already installed and configured for privileged access and remote execution. In addition the following prerequisites can be automatically solved when running the playbook by setting the role action: resolve_prereq: true Package manager for the target application is installed and enabled.","title":"Prerequisites"},{"location":"roles/dev_java/#installation-procedure","text":"Manually install Ansible Collections from the Ansible Galaxy repository: ansible-galaxy collection install --upgrade serdigital64.development Automatic installation is also available by deploying A:Platform64","title":"Installation Procedure"},{"location":"roles/dev_java/#contributing","text":"Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details.","title":"Contributing"},{"location":"roles/dev_java/#author","text":"SerDigital64","title":"Author"},{"location":"roles/dev_java/#license","text":"GPL-3.0-or-later","title":"License"},{"location":"roles/dev_nodejs/","text":"Ansible Role: serdigital64.development.dev_gcc \u00b6 Purpose \u00b6 Manage provisioning of GCC. Supported features in the current version: Deploy language. Packages are defined in the variable dev_gcc_profiles . The dev_gcc Ansible-Role is part of the A:Platform64 project and is available in the development Ansible-Collection. Usage \u00b6 The following example is an Ansible Playbook that includes all the supported features: use this link if viewing the doc on github --- - name : \"Development / GCC / Usage example\" hosts : \"localhost\" gather_facts : true tasks : - name : \"Example: Install GCC package\" vars : dev_gcc : resolve_prereq : true deploy : true ansible.builtin.include_role : name : \"serdigital64.development.dev_gcc\" ... The playbook can be run by executing: # Set ANSIBLE_COLLECTIONS_PATHS to the default install location. Change as needed. ANSIBLE_COLLECTIONS_PATHS = \" ${ HOME } /.ansible/collections\" ansible-playbook \" ${ ANSIBLE_COLLECTIONS_PATHS } /ansible_collections/serdigital64/development/playbooks/dev_gcc.yml\" Role Parameters \u00b6 Actions \u00b6 Use action-parameters to control what tasks are enabled for the role to execute. Parameters should be declared as task level vars as they are intented to be dynamic. dev_gcc : resolve_prereq : deploy : Parameter Required? Type Default Purpose / Value dev_gcc.resolve_prereq no boolean false Enable automatic resolution of prequisites dev_gcc.deploy no boolean false Enable installation of application package End State \u00b6 Use end-state parameters to define the target state after role execution. Parameters should be declared in host_vars or group_vars as they are intended to be permanent. dev_gcc_application : name : type : version : installed : Parameter Required? Type Default Purpose / Value dev_gcc_application no dictionary Set application package end state dev_gcc_application.name no string \"gcc\" Select application package name dev_gcc_application.type no string \"distro\" Select application package type dev_gcc_application.version no string \"latest\" Select application package version dev_gcc_application.installed no boolean true Set application package end state Deployment \u00b6 OS Compatibility \u00b6 CentOS8 RedHat8 AlmaLinux8 OracleLinux8 Ubuntu20 Ubuntu21 Fedora33 Fedora35 Debian10 Debian11 Dependencies \u00b6 Ansible Collections: serdigital64.backup serdigital64.system Prerequisites \u00b6 The Ansible engine must be already installed and configured for privileged access and remote execution. In addition the following prerequisites can be automatically solved when running the playbook by setting the role action: resolve_prereq: true Package manager for the target application is installed and enabled. Installation Procedure \u00b6 Manually install Ansible Collections from the Ansible Galaxy repository: ansible-galaxy collection install --upgrade serdigital64.development Automatic installation is also available by deploying A:Platform64 Contributing \u00b6 Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details. Author \u00b6 SerDigital64 License \u00b6 GPL-3.0-or-later","title":"dev_nodejs"},{"location":"roles/dev_nodejs/#ansible-role-serdigital64developmentdev_gcc","text":"","title":"Ansible Role: serdigital64.development.dev_gcc"},{"location":"roles/dev_nodejs/#purpose","text":"Manage provisioning of GCC. Supported features in the current version: Deploy language. Packages are defined in the variable dev_gcc_profiles . The dev_gcc Ansible-Role is part of the A:Platform64 project and is available in the development Ansible-Collection.","title":"Purpose"},{"location":"roles/dev_nodejs/#usage","text":"The following example is an Ansible Playbook that includes all the supported features: use this link if viewing the doc on github --- - name : \"Development / GCC / Usage example\" hosts : \"localhost\" gather_facts : true tasks : - name : \"Example: Install GCC package\" vars : dev_gcc : resolve_prereq : true deploy : true ansible.builtin.include_role : name : \"serdigital64.development.dev_gcc\" ... The playbook can be run by executing: # Set ANSIBLE_COLLECTIONS_PATHS to the default install location. Change as needed. ANSIBLE_COLLECTIONS_PATHS = \" ${ HOME } /.ansible/collections\" ansible-playbook \" ${ ANSIBLE_COLLECTIONS_PATHS } /ansible_collections/serdigital64/development/playbooks/dev_gcc.yml\"","title":"Usage"},{"location":"roles/dev_nodejs/#role-parameters","text":"","title":"Role Parameters"},{"location":"roles/dev_nodejs/#actions","text":"Use action-parameters to control what tasks are enabled for the role to execute. Parameters should be declared as task level vars as they are intented to be dynamic. dev_gcc : resolve_prereq : deploy : Parameter Required? Type Default Purpose / Value dev_gcc.resolve_prereq no boolean false Enable automatic resolution of prequisites dev_gcc.deploy no boolean false Enable installation of application package","title":"Actions"},{"location":"roles/dev_nodejs/#end-state","text":"Use end-state parameters to define the target state after role execution. Parameters should be declared in host_vars or group_vars as they are intended to be permanent. dev_gcc_application : name : type : version : installed : Parameter Required? Type Default Purpose / Value dev_gcc_application no dictionary Set application package end state dev_gcc_application.name no string \"gcc\" Select application package name dev_gcc_application.type no string \"distro\" Select application package type dev_gcc_application.version no string \"latest\" Select application package version dev_gcc_application.installed no boolean true Set application package end state","title":"End State"},{"location":"roles/dev_nodejs/#deployment","text":"","title":"Deployment"},{"location":"roles/dev_nodejs/#os-compatibility","text":"CentOS8 RedHat8 AlmaLinux8 OracleLinux8 Ubuntu20 Ubuntu21 Fedora33 Fedora35 Debian10 Debian11","title":"OS Compatibility"},{"location":"roles/dev_nodejs/#dependencies","text":"Ansible Collections: serdigital64.backup serdigital64.system","title":"Dependencies"},{"location":"roles/dev_nodejs/#prerequisites","text":"The Ansible engine must be already installed and configured for privileged access and remote execution. In addition the following prerequisites can be automatically solved when running the playbook by setting the role action: resolve_prereq: true Package manager for the target application is installed and enabled.","title":"Prerequisites"},{"location":"roles/dev_nodejs/#installation-procedure","text":"Manually install Ansible Collections from the Ansible Galaxy repository: ansible-galaxy collection install --upgrade serdigital64.development Automatic installation is also available by deploying A:Platform64","title":"Installation Procedure"},{"location":"roles/dev_nodejs/#contributing","text":"Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details.","title":"Contributing"},{"location":"roles/dev_nodejs/#author","text":"SerDigital64","title":"Author"},{"location":"roles/dev_nodejs/#license","text":"GPL-3.0-or-later","title":"License"},{"location":"roles/dev_opencl/","text":"Ansible Role: serdigital64.development.dev_opencl \u00b6 Purpose \u00b6 Manage provision OpenCL development environment. Supported features in the current version: Deploy environment. Packages are defined in the variable dev_opencl_profiles . The dev_opencl Ansible-Role is part of the A:Platform64 project and is available in the development Ansible-Collection. Usage \u00b6 The following example is an Ansible Playbook that includes all the supported features: use this link if viewing the doc on github --- - name : \"Development / OpenCL / Usage example\" hosts : \"localhost\" gather_facts : true tasks : - name : \"Example: Install OpenCL package\" vars : dev_opencl : resolve_prereq : true deploy : true ansible.builtin.include_role : name : \"serdigital64.development.dev_opencl\" ... The playbook can be run by executing: # Set ANSIBLE_COLLECTIONS_PATHS to the default install location. Change as needed. ANSIBLE_COLLECTIONS_PATHS = \" ${ HOME } /.ansible/collections\" ansible-playbook \" ${ ANSIBLE_COLLECTIONS_PATHS } /ansible_collections/serdigital64/development/playbooks/dev_opencl.yml\" Role Parameters \u00b6 Actions \u00b6 Use action-parameters to control what tasks are enabled for the role to execute. Parameters should be declared as task level vars as they are intented to be dynamic. dev_opencl : resolve_prereq : deploy : Parameter Required? Type Default Purpose / Value dev_opencl.resolve_prereq no boolean false Enable automatic resolution of prequisites dev_opencl.deploy no boolean false Enable installation of application packages End State \u00b6 Use end-state parameters to define the target state after role execution. Parameters should be declared in host_vars or group_vars as they are intended to be permanent. dev_opencl_application : name : type : version : installed : Parameter Required? Type Default Purpose / Value dev_opencl_application no dictionary Set application package end state dev_opencl_application.name no string \"opencl\" Select application package name dev_opencl_application.type no string \"distro\" Select application package type dev_opencl_application.version no string \"latest\" Select application package version dev_opencl_application.installed no boolean true Set application package end state Deployment \u00b6 OS Compatibility \u00b6 CentOS8 Dependencies \u00b6 Ansible Collections: serdigital64.backup serdigital64.system Prerequisites \u00b6 The Ansible engine must be already installed and configured for privileged access and remote execution. In addition the following prerequisites can be automatically solved when running the playbook by setting the role action: resolve_prereq: true Package manager for the target application is installed and enabled. Installation Procedure \u00b6 Manually install Ansible Collections from the Ansible Galaxy repository: ansible-galaxy collection install --upgrade serdigital64.development Automatic installation is also available by deploying A:Platform64 Contributing \u00b6 Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details. Author \u00b6 SerDigital64 License \u00b6 GPL-3.0-or-later","title":"dev_opencl"},{"location":"roles/dev_opencl/#ansible-role-serdigital64developmentdev_opencl","text":"","title":"Ansible Role: serdigital64.development.dev_opencl"},{"location":"roles/dev_opencl/#purpose","text":"Manage provision OpenCL development environment. Supported features in the current version: Deploy environment. Packages are defined in the variable dev_opencl_profiles . The dev_opencl Ansible-Role is part of the A:Platform64 project and is available in the development Ansible-Collection.","title":"Purpose"},{"location":"roles/dev_opencl/#usage","text":"The following example is an Ansible Playbook that includes all the supported features: use this link if viewing the doc on github --- - name : \"Development / OpenCL / Usage example\" hosts : \"localhost\" gather_facts : true tasks : - name : \"Example: Install OpenCL package\" vars : dev_opencl : resolve_prereq : true deploy : true ansible.builtin.include_role : name : \"serdigital64.development.dev_opencl\" ... The playbook can be run by executing: # Set ANSIBLE_COLLECTIONS_PATHS to the default install location. Change as needed. ANSIBLE_COLLECTIONS_PATHS = \" ${ HOME } /.ansible/collections\" ansible-playbook \" ${ ANSIBLE_COLLECTIONS_PATHS } /ansible_collections/serdigital64/development/playbooks/dev_opencl.yml\"","title":"Usage"},{"location":"roles/dev_opencl/#role-parameters","text":"","title":"Role Parameters"},{"location":"roles/dev_opencl/#actions","text":"Use action-parameters to control what tasks are enabled for the role to execute. Parameters should be declared as task level vars as they are intented to be dynamic. dev_opencl : resolve_prereq : deploy : Parameter Required? Type Default Purpose / Value dev_opencl.resolve_prereq no boolean false Enable automatic resolution of prequisites dev_opencl.deploy no boolean false Enable installation of application packages","title":"Actions"},{"location":"roles/dev_opencl/#end-state","text":"Use end-state parameters to define the target state after role execution. Parameters should be declared in host_vars or group_vars as they are intended to be permanent. dev_opencl_application : name : type : version : installed : Parameter Required? Type Default Purpose / Value dev_opencl_application no dictionary Set application package end state dev_opencl_application.name no string \"opencl\" Select application package name dev_opencl_application.type no string \"distro\" Select application package type dev_opencl_application.version no string \"latest\" Select application package version dev_opencl_application.installed no boolean true Set application package end state","title":"End State"},{"location":"roles/dev_opencl/#deployment","text":"","title":"Deployment"},{"location":"roles/dev_opencl/#os-compatibility","text":"CentOS8","title":"OS Compatibility"},{"location":"roles/dev_opencl/#dependencies","text":"Ansible Collections: serdigital64.backup serdigital64.system","title":"Dependencies"},{"location":"roles/dev_opencl/#prerequisites","text":"The Ansible engine must be already installed and configured for privileged access and remote execution. In addition the following prerequisites can be automatically solved when running the playbook by setting the role action: resolve_prereq: true Package manager for the target application is installed and enabled.","title":"Prerequisites"},{"location":"roles/dev_opencl/#installation-procedure","text":"Manually install Ansible Collections from the Ansible Galaxy repository: ansible-galaxy collection install --upgrade serdigital64.development Automatic installation is also available by deploying A:Platform64","title":"Installation Procedure"},{"location":"roles/dev_opencl/#contributing","text":"Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details.","title":"Contributing"},{"location":"roles/dev_opencl/#author","text":"SerDigital64","title":"Author"},{"location":"roles/dev_opencl/#license","text":"GPL-3.0-or-later","title":"License"},{"location":"roles/dev_python/","text":"Ansible Role: serdigital64.development.dev_python \u00b6 Purpose \u00b6 Manage provision of Python Supported features in the current version: Deploy language and basic tools. Packages are defined in the variable dev_python_profiles . Python versions: CentOS8: v8, v9 OracleLinux8: v8, v9 Ubuntu20: v8, v9 Ubuntu21: v9, v10 Fedora33: v9 Fedora35: v10 Debian10: v7 Debian11: v9 Tools: pip venv setuptools wheel Provision isolated applications: this feature is used to install modules that can be used directly from the command line as stand-alone applications: Dedicated directory Virtual environment (venv) Python Modules The dev_python Ansible-Role is part of the A:Platform64 project and is available in the development Ansible-Collection. Usage \u00b6 The following example is an Ansible Playbook that includes all the supported features: use this link if viewing the doc on github --- - name : \"Development / Python / Usage example\" hosts : \"localhost\" gather_facts : true tasks : - name : \"Example: Install Python package\" vars : dev_python : resolve_prereq : true deploy : true ansible.builtin.include_role : name : \"serdigital64.development.dev_python\" - name : \"Example: Install MKDocs as isolated application\" vars : dev_python : resolve_prereq : true deploy : true provision : true dev_python_applications : - name : \"mkdocs\" description : \"MKDocs tool\" location : \"/opt/mkdocs\" owner : \"root\" group : \"root\" modules : - \"mkdocs\" ansible.builtin.include_role : name : \"serdigital64.development.dev_python\" ... The playbook can be run by executing: # Set ANSIBLE_COLLECTIONS_PATHS to the default install location. Change as needed. ANSIBLE_COLLECTIONS_PATHS = \" ${ HOME } /.ansible/collections\" ansible-playbook \" ${ ANSIBLE_COLLECTIONS_PATHS } /ansible_collections/serdigital64/development/playbooks/dev_python.yml\" Role Parameters \u00b6 Actions \u00b6 Use action-parameters to control what tasks are enabled for the role to execute. Parameters should be declared as task level vars as they are intented to be dynamic. dev_python : resolve_prereq : deploy : provision : Parameter Required? Type Default Purpose / Value dev_python.resolve_prereq no boolean false Enable automatic resolution of prequisites dev_python.deploy no boolean false Enable installation of application packages dev_python.provision no boolean false Enable provisioning of isolated applications (python modules) End State \u00b6 Use end-state parameters to define the target state after role execution. Parameters should be declared in host_vars or group_vars as they are intended to be permanent. dev_python_application : name : type : version : installed : dev_python_applications : - name : description : location : owner : group : modules : - Parameter Required? Type Default Purpose / Value dev_python_application no dictionary Set application package end state dev_python_application.name no string \"python\" Select application package name dev_python_application.type no string \"distro\" Select application package type dev_python_application.version no string \"latest\" Select application package version dev_python_application.installed no boolean true Set application package end state dev_python_applications.0.name yes(provision) string Application short name. Format: a-z 0-9 dev_python_applications.0.description no string Short description dev_python_applications.0.location yes(provision) string Full path where the app will be installed to dev_python_applications.0.owner no string \"root\" Location owner dev_python_applications.0.group no string \"root\" Location group dev_python_applications.0.modules yes(provision) list List of Python modules that forms the app dev_python_applications.0.modules.0 yes(provision) string Python module name Deployment \u00b6 OS Compatibility \u00b6 The operating system compatibility list is defined in the variable: dev_python_platforms Dependencies \u00b6 Ansible Collections: serdigital64.backup serdigital64.system Prerequisites \u00b6 The Ansible engine must be already installed and configured for privileged access and remote execution. In addition the following prerequisites can be automatically solved when running the playbook by setting the role action: resolve_prereq: true Package manager for the target application is installed and enabled. Installation Procedure \u00b6 Manually install Ansible Collections from the Ansible Galaxy repository: ansible-galaxy collection install --upgrade serdigital64.development Automatic installation is also available by deploying A:Platform64 Contributing \u00b6 Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details. Author \u00b6 SerDigital64 License \u00b6 GPL-3.0-or-later","title":"dev_python"},{"location":"roles/dev_python/#ansible-role-serdigital64developmentdev_python","text":"","title":"Ansible Role: serdigital64.development.dev_python"},{"location":"roles/dev_python/#purpose","text":"Manage provision of Python Supported features in the current version: Deploy language and basic tools. Packages are defined in the variable dev_python_profiles . Python versions: CentOS8: v8, v9 OracleLinux8: v8, v9 Ubuntu20: v8, v9 Ubuntu21: v9, v10 Fedora33: v9 Fedora35: v10 Debian10: v7 Debian11: v9 Tools: pip venv setuptools wheel Provision isolated applications: this feature is used to install modules that can be used directly from the command line as stand-alone applications: Dedicated directory Virtual environment (venv) Python Modules The dev_python Ansible-Role is part of the A:Platform64 project and is available in the development Ansible-Collection.","title":"Purpose"},{"location":"roles/dev_python/#usage","text":"The following example is an Ansible Playbook that includes all the supported features: use this link if viewing the doc on github --- - name : \"Development / Python / Usage example\" hosts : \"localhost\" gather_facts : true tasks : - name : \"Example: Install Python package\" vars : dev_python : resolve_prereq : true deploy : true ansible.builtin.include_role : name : \"serdigital64.development.dev_python\" - name : \"Example: Install MKDocs as isolated application\" vars : dev_python : resolve_prereq : true deploy : true provision : true dev_python_applications : - name : \"mkdocs\" description : \"MKDocs tool\" location : \"/opt/mkdocs\" owner : \"root\" group : \"root\" modules : - \"mkdocs\" ansible.builtin.include_role : name : \"serdigital64.development.dev_python\" ... The playbook can be run by executing: # Set ANSIBLE_COLLECTIONS_PATHS to the default install location. Change as needed. ANSIBLE_COLLECTIONS_PATHS = \" ${ HOME } /.ansible/collections\" ansible-playbook \" ${ ANSIBLE_COLLECTIONS_PATHS } /ansible_collections/serdigital64/development/playbooks/dev_python.yml\"","title":"Usage"},{"location":"roles/dev_python/#role-parameters","text":"","title":"Role Parameters"},{"location":"roles/dev_python/#actions","text":"Use action-parameters to control what tasks are enabled for the role to execute. Parameters should be declared as task level vars as they are intented to be dynamic. dev_python : resolve_prereq : deploy : provision : Parameter Required? Type Default Purpose / Value dev_python.resolve_prereq no boolean false Enable automatic resolution of prequisites dev_python.deploy no boolean false Enable installation of application packages dev_python.provision no boolean false Enable provisioning of isolated applications (python modules)","title":"Actions"},{"location":"roles/dev_python/#end-state","text":"Use end-state parameters to define the target state after role execution. Parameters should be declared in host_vars or group_vars as they are intended to be permanent. dev_python_application : name : type : version : installed : dev_python_applications : - name : description : location : owner : group : modules : - Parameter Required? Type Default Purpose / Value dev_python_application no dictionary Set application package end state dev_python_application.name no string \"python\" Select application package name dev_python_application.type no string \"distro\" Select application package type dev_python_application.version no string \"latest\" Select application package version dev_python_application.installed no boolean true Set application package end state dev_python_applications.0.name yes(provision) string Application short name. Format: a-z 0-9 dev_python_applications.0.description no string Short description dev_python_applications.0.location yes(provision) string Full path where the app will be installed to dev_python_applications.0.owner no string \"root\" Location owner dev_python_applications.0.group no string \"root\" Location group dev_python_applications.0.modules yes(provision) list List of Python modules that forms the app dev_python_applications.0.modules.0 yes(provision) string Python module name","title":"End State"},{"location":"roles/dev_python/#deployment","text":"","title":"Deployment"},{"location":"roles/dev_python/#os-compatibility","text":"The operating system compatibility list is defined in the variable: dev_python_platforms","title":"OS Compatibility"},{"location":"roles/dev_python/#dependencies","text":"Ansible Collections: serdigital64.backup serdigital64.system","title":"Dependencies"},{"location":"roles/dev_python/#prerequisites","text":"The Ansible engine must be already installed and configured for privileged access and remote execution. In addition the following prerequisites can be automatically solved when running the playbook by setting the role action: resolve_prereq: true Package manager for the target application is installed and enabled.","title":"Prerequisites"},{"location":"roles/dev_python/#installation-procedure","text":"Manually install Ansible Collections from the Ansible Galaxy repository: ansible-galaxy collection install --upgrade serdigital64.development Automatic installation is also available by deploying A:Platform64","title":"Installation Procedure"},{"location":"roles/dev_python/#contributing","text":"Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details.","title":"Contributing"},{"location":"roles/dev_python/#author","text":"SerDigital64","title":"Author"},{"location":"roles/dev_python/#license","text":"GPL-3.0-or-later","title":"License"},{"location":"roles/dev_ruby/","text":"Ansible Role: serdigital64.development.dev_ruby \u00b6 Purpose \u00b6 Manage provisioning of Ruby. Supported features in the current version: Deploy language. Packages are defined in the variable dev_ruby_profiles . The dev_ruby Ansible-Role is part of the A:Platform64 project and is available in the development Ansible-Collection. Usage \u00b6 The following example is an Ansible Playbook that includes all the supported features: use this link if viewing the doc on github --- - name : \"Development / Ruby / Usage example\" hosts : \"localhost\" gather_facts : true tasks : - name : \"Example: Install Ruby package\" vars : dev_ruby : resolve_prereq : true deploy : true ansible.builtin.include_role : name : \"serdigital64.development.dev_ruby\" ... The playbook can be run by executing: # Set ANSIBLE_COLLECTIONS_PATHS to the default install location. Change as needed. ANSIBLE_COLLECTIONS_PATHS = \" ${ HOME } /.ansible/collections\" ansible-playbook \" ${ ANSIBLE_COLLECTIONS_PATHS } /ansible_collections/serdigital64/development/playbooks/dev_ruby.yml\" Role Parameters \u00b6 Actions \u00b6 Use action-parameters to control what tasks are enabled for the role to execute. Parameters should be declared as task level vars as they are intented to be dynamic. dev_ruby : resolve_prereq : deploy : Parameter Required? Type Default Purpose / Value dev_ruby.resolve_prereq no boolean false Enable automatic resolution of prequisites dev_ruby.deploy no boolean false Enable installation of application package End State \u00b6 Use end-state parameters to define the target state after role execution. Parameters should be declared in host_vars or group_vars as they are intended to be permanent. dev_ruby_application : name : type : version : installed : Parameter Required? Type Default Purpose / Value dev_ruby_application no dictionary Set application package end state dev_ruby_application.name no string \"ruby\" Select application package name dev_ruby_application.type no string \"distro\" Select application package type dev_ruby_application.version no string \"latest\" Select application package version dev_ruby_application.installed no boolean true Set application package end state Deployment \u00b6 OS Compatibility \u00b6 CentOS8 RedHat8 AlmaLinux8 OracleLinux8 Ubuntu20 Ubuntu21 Fedora33 Fedora35 Debian10 Debian11 Dependencies \u00b6 Ansible Collections: serdigital64.backup serdigital64.system Prerequisites \u00b6 The Ansible engine must be already installed and configured for privileged access and remote execution. In addition the following prerequisites can be automatically solved when running the playbook by setting the role action: resolve_prereq: true Package manager for the target application is installed and enabled. Installation Procedure \u00b6 Manually install Ansible Collections from the Ansible Galaxy repository: ansible-galaxy collection install --upgrade serdigital64.development Automatic installation is also available by deploying A:Platform64 Contributing \u00b6 Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details. Author \u00b6 SerDigital64 License \u00b6 GPL-3.0-or-later","title":"dev_ruby"},{"location":"roles/dev_ruby/#ansible-role-serdigital64developmentdev_ruby","text":"","title":"Ansible Role: serdigital64.development.dev_ruby"},{"location":"roles/dev_ruby/#purpose","text":"Manage provisioning of Ruby. Supported features in the current version: Deploy language. Packages are defined in the variable dev_ruby_profiles . The dev_ruby Ansible-Role is part of the A:Platform64 project and is available in the development Ansible-Collection.","title":"Purpose"},{"location":"roles/dev_ruby/#usage","text":"The following example is an Ansible Playbook that includes all the supported features: use this link if viewing the doc on github --- - name : \"Development / Ruby / Usage example\" hosts : \"localhost\" gather_facts : true tasks : - name : \"Example: Install Ruby package\" vars : dev_ruby : resolve_prereq : true deploy : true ansible.builtin.include_role : name : \"serdigital64.development.dev_ruby\" ... The playbook can be run by executing: # Set ANSIBLE_COLLECTIONS_PATHS to the default install location. Change as needed. ANSIBLE_COLLECTIONS_PATHS = \" ${ HOME } /.ansible/collections\" ansible-playbook \" ${ ANSIBLE_COLLECTIONS_PATHS } /ansible_collections/serdigital64/development/playbooks/dev_ruby.yml\"","title":"Usage"},{"location":"roles/dev_ruby/#role-parameters","text":"","title":"Role Parameters"},{"location":"roles/dev_ruby/#actions","text":"Use action-parameters to control what tasks are enabled for the role to execute. Parameters should be declared as task level vars as they are intented to be dynamic. dev_ruby : resolve_prereq : deploy : Parameter Required? Type Default Purpose / Value dev_ruby.resolve_prereq no boolean false Enable automatic resolution of prequisites dev_ruby.deploy no boolean false Enable installation of application package","title":"Actions"},{"location":"roles/dev_ruby/#end-state","text":"Use end-state parameters to define the target state after role execution. Parameters should be declared in host_vars or group_vars as they are intended to be permanent. dev_ruby_application : name : type : version : installed : Parameter Required? Type Default Purpose / Value dev_ruby_application no dictionary Set application package end state dev_ruby_application.name no string \"ruby\" Select application package name dev_ruby_application.type no string \"distro\" Select application package type dev_ruby_application.version no string \"latest\" Select application package version dev_ruby_application.installed no boolean true Set application package end state","title":"End State"},{"location":"roles/dev_ruby/#deployment","text":"","title":"Deployment"},{"location":"roles/dev_ruby/#os-compatibility","text":"CentOS8 RedHat8 AlmaLinux8 OracleLinux8 Ubuntu20 Ubuntu21 Fedora33 Fedora35 Debian10 Debian11","title":"OS Compatibility"},{"location":"roles/dev_ruby/#dependencies","text":"Ansible Collections: serdigital64.backup serdigital64.system","title":"Dependencies"},{"location":"roles/dev_ruby/#prerequisites","text":"The Ansible engine must be already installed and configured for privileged access and remote execution. In addition the following prerequisites can be automatically solved when running the playbook by setting the role action: resolve_prereq: true Package manager for the target application is installed and enabled.","title":"Prerequisites"},{"location":"roles/dev_ruby/#installation-procedure","text":"Manually install Ansible Collections from the Ansible Galaxy repository: ansible-galaxy collection install --upgrade serdigital64.development Automatic installation is also available by deploying A:Platform64","title":"Installation Procedure"},{"location":"roles/dev_ruby/#contributing","text":"Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details.","title":"Contributing"},{"location":"roles/dev_ruby/#author","text":"SerDigital64","title":"Author"},{"location":"roles/dev_ruby/#license","text":"GPL-3.0-or-later","title":"License"},{"location":"roles/dev_tools/","text":"Ansible Role: serdigital64.development.dev_tools \u00b6 Purpose \u00b6 Manage provisioning of common development tools Supported features in the current version: Deploy tools. Packages are defined in the variable dev_tools_profiles . The dev_tools Ansible-Role is part of the A:Platform64 project and is available in the development Ansible-Collection. Usage \u00b6 The following example is an Ansible Playbook that includes all the supported features: use this link if viewing the doc on github --- - name : \"Development / Tools / Usage example\" hosts : \"localhost\" gather_facts : true tasks : - name : \"Example: Install Tools packages\" vars : dev_tools : resolve_prereq : true deploy : true ansible.builtin.include_role : name : \"serdigital64.development.dev_tools\" ... The playbook can be run by executing: # Set ANSIBLE_COLLECTIONS_PATHS to the default install location. Change as needed. ANSIBLE_COLLECTIONS_PATHS = \" ${ HOME } /.ansible/collections\" ansible-playbook \" ${ ANSIBLE_COLLECTIONS_PATHS } /ansible_collections/serdigital64/development/playbooks/dev_tools.yml\" Role Parameters \u00b6 Actions \u00b6 Use action-parameters to control what tasks are enabled for the role to execute. Parameters should be declared as task level vars as they are intented to be dynamic. dev_tools : resolve_prereq : deploy : Parameter Required? Type Default Purpose / Value dev_tools.resolve_prereq no boolean false Enable automatic resolution of prequisites dev_tools.deploy no boolean false Enable installation of application packages End State \u00b6 Use end-state parameters to define the target state after role execution. Parameters should be declared in host_vars or group_vars as they are intended to be permanent. dev_tools_application : name : type : version : installed : Parameter Required? Type Default Purpose / Value dev_tools_application no dictionary Set application package end state dev_tools_application.name no string \"tools\" Select application package name dev_tools_application.type no string \"distro\" Select application package type dev_tools_application.version no string \"latest\" Select application package version dev_tools_application.installed no boolean true Set application package end state Deployment \u00b6 OS Compatibility \u00b6 CentOS8 RedHat8 AlmaLinux8 OracleLinux8 Ubuntu20 Ubuntu21 Fedora33 Fedora35 Debian10 Debian11 Dependencies \u00b6 Ansible Collections: serdigital64.backup serdigital64.system Prerequisites \u00b6 The Ansible engine must be already installed and configured for privileged access and remote execution. In addition the following prerequisites can be automatically solved when running the playbook by setting the role action: resolve_prereq: true Package manager for the target application is installed and enabled. Installation Procedure \u00b6 Manually install Ansible Collections from the Ansible Galaxy repository: ansible-galaxy collection install --upgrade serdigital64.development Automatic installation is also available by deploying A:Platform64 Contributing \u00b6 Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details. Author \u00b6 SerDigital64 License \u00b6 GPL-3.0-or-later","title":"dev_tools"},{"location":"roles/dev_tools/#ansible-role-serdigital64developmentdev_tools","text":"","title":"Ansible Role: serdigital64.development.dev_tools"},{"location":"roles/dev_tools/#purpose","text":"Manage provisioning of common development tools Supported features in the current version: Deploy tools. Packages are defined in the variable dev_tools_profiles . The dev_tools Ansible-Role is part of the A:Platform64 project and is available in the development Ansible-Collection.","title":"Purpose"},{"location":"roles/dev_tools/#usage","text":"The following example is an Ansible Playbook that includes all the supported features: use this link if viewing the doc on github --- - name : \"Development / Tools / Usage example\" hosts : \"localhost\" gather_facts : true tasks : - name : \"Example: Install Tools packages\" vars : dev_tools : resolve_prereq : true deploy : true ansible.builtin.include_role : name : \"serdigital64.development.dev_tools\" ... The playbook can be run by executing: # Set ANSIBLE_COLLECTIONS_PATHS to the default install location. Change as needed. ANSIBLE_COLLECTIONS_PATHS = \" ${ HOME } /.ansible/collections\" ansible-playbook \" ${ ANSIBLE_COLLECTIONS_PATHS } /ansible_collections/serdigital64/development/playbooks/dev_tools.yml\"","title":"Usage"},{"location":"roles/dev_tools/#role-parameters","text":"","title":"Role Parameters"},{"location":"roles/dev_tools/#actions","text":"Use action-parameters to control what tasks are enabled for the role to execute. Parameters should be declared as task level vars as they are intented to be dynamic. dev_tools : resolve_prereq : deploy : Parameter Required? Type Default Purpose / Value dev_tools.resolve_prereq no boolean false Enable automatic resolution of prequisites dev_tools.deploy no boolean false Enable installation of application packages","title":"Actions"},{"location":"roles/dev_tools/#end-state","text":"Use end-state parameters to define the target state after role execution. Parameters should be declared in host_vars or group_vars as they are intended to be permanent. dev_tools_application : name : type : version : installed : Parameter Required? Type Default Purpose / Value dev_tools_application no dictionary Set application package end state dev_tools_application.name no string \"tools\" Select application package name dev_tools_application.type no string \"distro\" Select application package type dev_tools_application.version no string \"latest\" Select application package version dev_tools_application.installed no boolean true Set application package end state","title":"End State"},{"location":"roles/dev_tools/#deployment","text":"","title":"Deployment"},{"location":"roles/dev_tools/#os-compatibility","text":"CentOS8 RedHat8 AlmaLinux8 OracleLinux8 Ubuntu20 Ubuntu21 Fedora33 Fedora35 Debian10 Debian11","title":"OS Compatibility"},{"location":"roles/dev_tools/#dependencies","text":"Ansible Collections: serdigital64.backup serdigital64.system","title":"Dependencies"},{"location":"roles/dev_tools/#prerequisites","text":"The Ansible engine must be already installed and configured for privileged access and remote execution. In addition the following prerequisites can be automatically solved when running the playbook by setting the role action: resolve_prereq: true Package manager for the target application is installed and enabled.","title":"Prerequisites"},{"location":"roles/dev_tools/#installation-procedure","text":"Manually install Ansible Collections from the Ansible Galaxy repository: ansible-galaxy collection install --upgrade serdigital64.development Automatic installation is also available by deploying A:Platform64","title":"Installation Procedure"},{"location":"roles/dev_tools/#contributing","text":"Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details.","title":"Contributing"},{"location":"roles/dev_tools/#author","text":"SerDigital64","title":"Author"},{"location":"roles/dev_tools/#license","text":"GPL-3.0-or-later","title":"License"},{"location":"roles/dops_ansiblelint/","text":"Ansible Role: serdigital64.devops.dops_ansiblelint \u00b6 Purpose \u00b6 Manage provisioning of Ansible Linter. Supported features in the current version: Deploy application. Packages are defined in the variable dops_ansiblelint_profiles . The dops_ansiblelint Ansible-Role is part of the A:Platform64 project and is available in the devops Ansible-Collection. Usage \u00b6 The following example is an Ansible Playbook that includes all the supported features: use this link if viewing the doc on github --- - name : \"DevOps / AnsibleLint / Usage example\" hosts : \"localhost\" gather_facts : true tasks : - name : \"Example: install\" vars : dops_ansiblelint : resolve_prereq : true deploy : true ansible.builtin.include_role : name : \"serdigital64.devops.dops_ansiblelint\" ... The playbook can be run by executing: # Set ANSIBLE_COLLECTIONS_PATHS to the default location. Change as needed. ANSIBLE_COLLECTIONS_PATHS = \" ${ HOME } /.ansible/collections\" ansible-playbook \" ${ ANSIBLE_COLLECTIONS_PATHS } /ansible_collections/serdigital64/devops/playbooks/dops_ansiblelint.yml\" Role Parameters \u00b6 Actions \u00b6 Use action-parameters to control what tasks are enabled for the role to execute. Parameters should be declared as task level vars as they are intented to be dynamic. dops_ansiblelint : resolve_prereq : deploy : Parameter Required? Type Default Purpose / Value dops_ansiblelint.resolve_prereq no boolean false Enable automatic resolution of prequisites dops_ansiblelint.deploy no boolean false Enable installation of application packages End State \u00b6 Use end-state parameters to define the target state after role execution. Parameters should be declared in host_vars or group_vars as they are intended to be permanent. dops_ansiblelint_application : name : type : version : installed : dops_ansiblelint_paths : root : dops_ansiblelint_owners : app : name : group : home : Parameter Required? Type Default Purpose / Value dops_ansiblelint_application yes(deploy) dictionary Set application package end state dops_ansiblelint_application.name yes string \"ansiblelint\" Select application package name dops_ansiblelint_application.type yes string \"pip\" Select application package type dops_ansiblelint_application.version yes string \"latest\" Select application package version dops_ansiblelint_application.installed yes boolean true Set application package end state dops_ansiblelint_paths yes(prepare) dictionary Set paths dops_ansiblelint_paths.root yes string \"/opt/ansiblelint\" dops_ansiblelint_owners yes(prepare) dictionary Define users dops_ansiblelint_owners.app yes dictionary Define directory structure owner dops_ansiblelint_owners.app.name yes string \"ansiblelint\" Set login name dops_ansiblelint_owners.app.group yes string \"ansiblelint\" Set group name dops_ansiblelint_owners.app.home yes string \"/home/ansiblelint\" Set home directory Deployment \u00b6 OS Compatibility \u00b6 The operating system compatibility list is defined in the variable: dops_ansiblelint_platforms Dependencies \u00b6 Ansible Collections: serdigital64.backup bkp_archive serdigital64.system sys_package sys_repository Prerequisites \u00b6 The Ansible engine must be already installed and configured for privileged access and remote execution. In addition the following prerequisites can be automatically solved when running the playbook by setting the role action: resolve_prereq: true Package manager for the target application is installed and enabled. Installation Procedure \u00b6 Manually install Ansible Collections from the Ansible Galaxy repository: ansible-galaxy collection install serdigital64.devops Automatic installation is also available by deploying A:Platform64 Contributing \u00b6 Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details. Author \u00b6 SerDigital64 License \u00b6 GPL-3.0-or-later","title":"dops_ansiblelint"},{"location":"roles/dops_ansiblelint/#ansible-role-serdigital64devopsdops_ansiblelint","text":"","title":"Ansible Role: serdigital64.devops.dops_ansiblelint"},{"location":"roles/dops_ansiblelint/#purpose","text":"Manage provisioning of Ansible Linter. Supported features in the current version: Deploy application. Packages are defined in the variable dops_ansiblelint_profiles . The dops_ansiblelint Ansible-Role is part of the A:Platform64 project and is available in the devops Ansible-Collection.","title":"Purpose"},{"location":"roles/dops_ansiblelint/#usage","text":"The following example is an Ansible Playbook that includes all the supported features: use this link if viewing the doc on github --- - name : \"DevOps / AnsibleLint / Usage example\" hosts : \"localhost\" gather_facts : true tasks : - name : \"Example: install\" vars : dops_ansiblelint : resolve_prereq : true deploy : true ansible.builtin.include_role : name : \"serdigital64.devops.dops_ansiblelint\" ... The playbook can be run by executing: # Set ANSIBLE_COLLECTIONS_PATHS to the default location. Change as needed. ANSIBLE_COLLECTIONS_PATHS = \" ${ HOME } /.ansible/collections\" ansible-playbook \" ${ ANSIBLE_COLLECTIONS_PATHS } /ansible_collections/serdigital64/devops/playbooks/dops_ansiblelint.yml\"","title":"Usage"},{"location":"roles/dops_ansiblelint/#role-parameters","text":"","title":"Role Parameters"},{"location":"roles/dops_ansiblelint/#actions","text":"Use action-parameters to control what tasks are enabled for the role to execute. Parameters should be declared as task level vars as they are intented to be dynamic. dops_ansiblelint : resolve_prereq : deploy : Parameter Required? Type Default Purpose / Value dops_ansiblelint.resolve_prereq no boolean false Enable automatic resolution of prequisites dops_ansiblelint.deploy no boolean false Enable installation of application packages","title":"Actions"},{"location":"roles/dops_ansiblelint/#end-state","text":"Use end-state parameters to define the target state after role execution. Parameters should be declared in host_vars or group_vars as they are intended to be permanent. dops_ansiblelint_application : name : type : version : installed : dops_ansiblelint_paths : root : dops_ansiblelint_owners : app : name : group : home : Parameter Required? Type Default Purpose / Value dops_ansiblelint_application yes(deploy) dictionary Set application package end state dops_ansiblelint_application.name yes string \"ansiblelint\" Select application package name dops_ansiblelint_application.type yes string \"pip\" Select application package type dops_ansiblelint_application.version yes string \"latest\" Select application package version dops_ansiblelint_application.installed yes boolean true Set application package end state dops_ansiblelint_paths yes(prepare) dictionary Set paths dops_ansiblelint_paths.root yes string \"/opt/ansiblelint\" dops_ansiblelint_owners yes(prepare) dictionary Define users dops_ansiblelint_owners.app yes dictionary Define directory structure owner dops_ansiblelint_owners.app.name yes string \"ansiblelint\" Set login name dops_ansiblelint_owners.app.group yes string \"ansiblelint\" Set group name dops_ansiblelint_owners.app.home yes string \"/home/ansiblelint\" Set home directory","title":"End State"},{"location":"roles/dops_ansiblelint/#deployment","text":"","title":"Deployment"},{"location":"roles/dops_ansiblelint/#os-compatibility","text":"The operating system compatibility list is defined in the variable: dops_ansiblelint_platforms","title":"OS Compatibility"},{"location":"roles/dops_ansiblelint/#dependencies","text":"Ansible Collections: serdigital64.backup bkp_archive serdigital64.system sys_package sys_repository","title":"Dependencies"},{"location":"roles/dops_ansiblelint/#prerequisites","text":"The Ansible engine must be already installed and configured for privileged access and remote execution. In addition the following prerequisites can be automatically solved when running the playbook by setting the role action: resolve_prereq: true Package manager for the target application is installed and enabled.","title":"Prerequisites"},{"location":"roles/dops_ansiblelint/#installation-procedure","text":"Manually install Ansible Collections from the Ansible Galaxy repository: ansible-galaxy collection install serdigital64.devops Automatic installation is also available by deploying A:Platform64","title":"Installation Procedure"},{"location":"roles/dops_ansiblelint/#contributing","text":"Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details.","title":"Contributing"},{"location":"roles/dops_ansiblelint/#author","text":"SerDigital64","title":"Author"},{"location":"roles/dops_ansiblelint/#license","text":"GPL-3.0-or-later","title":"License"},{"location":"roles/dops_batscore/","text":"Ansible Role: serdigital64.devops.dops_batscore \u00b6 Purpose \u00b6 Manage provisioning of Bats Core. Supported features in the current version: Deploy application. Packages are defined in the variable dops_batscore_profiles . Deploy plugins assert file support The dops_batscore Ansible-Role is part of the A:Platform64 project and is available in the devops Ansible-Collection. Usage \u00b6 The following example is an Ansible Playbook that includes all the supported features: use this link if viewing the doc on github --- - name : \"DevOps / BatsCore / Usage example\" hosts : \"localhost\" gather_facts : true tasks : - name : \"Example: Install Bats-Core and plugins\" vars : dops_batscore : resolve_prereq : true prepare : true deploy : true ansible.builtin.include_role : name : \"serdigital64.devops.dops_batscore\" ... The playbook can be run by executing: # Set ANSIBLE_COLLECTIONS_PATHS to the default install location. Change as needed. ANSIBLE_COLLECTIONS_PATHS = \" ${ HOME } /.ansible/collections\" ansible-playbook \" ${ ANSIBLE_COLLECTIONS_PATHS } /ansible_collections/serdigital64/devops/playbooks/dops_batscore.yml\" Role Parameters \u00b6 Actions \u00b6 Use action-parameters to control what tasks are enabled for the role to execute. Parameters should be declared as task level vars as they are intented to be dynamic. dops_batscore : resolve_prereq : prepare : deploy : Parameter Required? Type Default Purpose / Value dops_batscore.resolve_prereq no boolean false Enable automatic resolution of prequisites dops_batscore.prepare no boolean false Enable environment preparation dops_batscore.deploy no boolean false Enable installation of application packages End State \u00b6 Use end-state parameters to define the target state after role execution. Parameters should be declared in host_vars or group_vars as they are intended to be permanent. dops_batscore_application : name : type : version : installed : Parameter Required? Type Default Purpose / Value dops_batscore_application no dictionary Set application package end state dops_batscore_application.name no string \"batscore\" Select application package name dops_batscore_application.type no string \"binary\" Select application package type dops_batscore_application.version no string \"v1_5\" Select application package version dops_batscore_application.installed no boolean true Set application package end state Deployment \u00b6 OS Compatibility \u00b6 The operating system compatibility list is defined in the variable: dops_batscore_platforms Dependencies \u00b6 Ansible Collections: serdigital64.backup serdigital64.system Prerequisites \u00b6 The Ansible engine must be already installed and configured for privileged access and remote execution. In addition the following prerequisites can be automatically solved when running the playbook by setting the role action: resolve_prereq: true Package manager for the target application is installed and enabled. Installation Procedure \u00b6 Manually install Ansible Collections from the Ansible Galaxy repository: ansible-galaxy collection install --upgrade serdigital64.devops Automatic installation is also available by deploying A:Platform64 Contributing \u00b6 Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details. Author \u00b6 SerDigital64 License \u00b6 GPL-3.0-or-later","title":"dops_batscore"},{"location":"roles/dops_batscore/#ansible-role-serdigital64devopsdops_batscore","text":"","title":"Ansible Role: serdigital64.devops.dops_batscore"},{"location":"roles/dops_batscore/#purpose","text":"Manage provisioning of Bats Core. Supported features in the current version: Deploy application. Packages are defined in the variable dops_batscore_profiles . Deploy plugins assert file support The dops_batscore Ansible-Role is part of the A:Platform64 project and is available in the devops Ansible-Collection.","title":"Purpose"},{"location":"roles/dops_batscore/#usage","text":"The following example is an Ansible Playbook that includes all the supported features: use this link if viewing the doc on github --- - name : \"DevOps / BatsCore / Usage example\" hosts : \"localhost\" gather_facts : true tasks : - name : \"Example: Install Bats-Core and plugins\" vars : dops_batscore : resolve_prereq : true prepare : true deploy : true ansible.builtin.include_role : name : \"serdigital64.devops.dops_batscore\" ... The playbook can be run by executing: # Set ANSIBLE_COLLECTIONS_PATHS to the default install location. Change as needed. ANSIBLE_COLLECTIONS_PATHS = \" ${ HOME } /.ansible/collections\" ansible-playbook \" ${ ANSIBLE_COLLECTIONS_PATHS } /ansible_collections/serdigital64/devops/playbooks/dops_batscore.yml\"","title":"Usage"},{"location":"roles/dops_batscore/#role-parameters","text":"","title":"Role Parameters"},{"location":"roles/dops_batscore/#actions","text":"Use action-parameters to control what tasks are enabled for the role to execute. Parameters should be declared as task level vars as they are intented to be dynamic. dops_batscore : resolve_prereq : prepare : deploy : Parameter Required? Type Default Purpose / Value dops_batscore.resolve_prereq no boolean false Enable automatic resolution of prequisites dops_batscore.prepare no boolean false Enable environment preparation dops_batscore.deploy no boolean false Enable installation of application packages","title":"Actions"},{"location":"roles/dops_batscore/#end-state","text":"Use end-state parameters to define the target state after role execution. Parameters should be declared in host_vars or group_vars as they are intended to be permanent. dops_batscore_application : name : type : version : installed : Parameter Required? Type Default Purpose / Value dops_batscore_application no dictionary Set application package end state dops_batscore_application.name no string \"batscore\" Select application package name dops_batscore_application.type no string \"binary\" Select application package type dops_batscore_application.version no string \"v1_5\" Select application package version dops_batscore_application.installed no boolean true Set application package end state","title":"End State"},{"location":"roles/dops_batscore/#deployment","text":"","title":"Deployment"},{"location":"roles/dops_batscore/#os-compatibility","text":"The operating system compatibility list is defined in the variable: dops_batscore_platforms","title":"OS Compatibility"},{"location":"roles/dops_batscore/#dependencies","text":"Ansible Collections: serdigital64.backup serdigital64.system","title":"Dependencies"},{"location":"roles/dops_batscore/#prerequisites","text":"The Ansible engine must be already installed and configured for privileged access and remote execution. In addition the following prerequisites can be automatically solved when running the playbook by setting the role action: resolve_prereq: true Package manager for the target application is installed and enabled.","title":"Prerequisites"},{"location":"roles/dops_batscore/#installation-procedure","text":"Manually install Ansible Collections from the Ansible Galaxy repository: ansible-galaxy collection install --upgrade serdigital64.devops Automatic installation is also available by deploying A:Platform64","title":"Installation Procedure"},{"location":"roles/dops_batscore/#contributing","text":"Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details.","title":"Contributing"},{"location":"roles/dops_batscore/#author","text":"SerDigital64","title":"Author"},{"location":"roles/dops_batscore/#license","text":"GPL-3.0-or-later","title":"License"},{"location":"roles/dops_git_client/","text":"Ansible Role: serdigital64.devops.dops_git_client \u00b6 Purpose \u00b6 Manage provisioning of client side GIT. Supported features in the current version: Deploy application. Packages are defined in the variable dops_git_client_profiles . Setup user configuration Create default gitconfig user.name user.email init.defaultBranch Provision GIT local repositories: sets initial project gitconfig user.name user.email init.defaultBranch Create .gitignore file initializes project directory: git init The dops_git_client Ansible-Role is part of the A:Platform64 project and is available in the devops Ansible-Collection. Usage \u00b6 The following example is an Ansible Playbook that includes all the supported features: use this link if viewing the doc on github --- - name : \"DevOps / GIT / Client / Usage example\" hosts : \"localhost\" gather_facts : true vars : target_user : \"{{ lookup('env','USER') }}\" target_users : - name : \"{{ target_user }}\" group : \"{{ target_user }}\" home : \"/home/{{ target_user }}\" user_name : \"{{ target_user }}\" user_email : \"{{ target_user }}@localhost.localdomain\" test_repo : \"/home/{{ target_user }}/test-repo\" tasks : - name : \"Example: Install GIT, configure CLI, create local repository\" vars : dops_git_client : resolve_prereq : true deploy : true provision : true dops_git_client_repositories : - name : \"test repo\" path : \"{{ test_repo }}\" owner : \"{{ target_user }}\" email : \"{{ target_user }}@localhost\" branch : \"dev\" ignore : - \".cache\" - \".tmp\" ansible.builtin.include_role : name : \"serdigital64.devops.dops_git_client\" - name : \"Example: create default user configuration for already installed git\" vars : dops_git_client : setup : true dops_git_client_users : \"{{ target_users }}\" ansible.builtin.include_role : name : \"serdigital64.devops.dops_git_client\" ... The playbook can be run by executing: # Set ANSIBLE_COLLECTIONS_PATHS to the default install location. Change as needed. ANSIBLE_COLLECTIONS_PATHS = \" ${ HOME } /.ansible/collections\" ansible-playbook \" ${ ANSIBLE_COLLECTIONS_PATHS } /ansible_collections/serdigital64/devops/playbooks/dops_git_client.yml\" Role Parameters \u00b6 Actions \u00b6 Use action-parameters to control what tasks are enabled for the role to execute. Parameters should be declared as task level vars as they are intented to be dynamic. dops_git_client : resolve_prereq : deploy : setup : provision : Parameter Required? Type Default Purpose / Value dops_git_client.resolve_prereq no boolean false Enable automatic resolution of prequisites dops_git_client.deploy no boolean false Enable installation of application package dops_git_client.setup no boolean false Enable application configuration dops_git_client.provision no boolean false Enable provisioning of application components End State \u00b6 Use end-state parameters to define the target state after role execution. Parameters should be declared in host_vars or group_vars as they are intended to be permanent. dops_git_client_application : client : name : type : version : installed : extras : name : type : version : installed : dops_git_client_users : - user : group : home : user_name : user_email : default_branch : dops_git_client_repositories : - name : path : owner : email : branch : ignore : - Parameter Required? Type Default Purpose / Value dops_git_client_application yes(deploy) dictionary Set application package end state dops_git_client_application.client yes dictionary Set application package end state dops_git_client_application.client.name yes string \"git\" Select application package name dops_git_client_application.client.type yes string \"distro\" Select application package type dops_git_client_application.client.version yes string \"latest\" Select application package version dops_git_client_application.client.installed yes boolean true Set application package end state dops_git_client_application.extras no dictionary Set application package end state dops_git_client_application.extras.name no string \"extras\" Select application package name dops_git_client_application.extras.type no string \"distro\" Select application package type dops_git_client_application.extras.version no string \"latest\" Select application package version dops_git_client_application.extras.installed no boolean false Set application package end state dops_git_client_users yes(setup) list List of users dops_git_client_users.0.user yes(setup) string User login name dops_git_client_users.0.group yes(setup) string User primary group dops_git_client_users.0.home yes(setup) string Home directory dops_git_client_users.0.user_name yes(setup) string Set gitconfig parameter dops_git_client_users.0.user_email yes(setup) string Set gitconfig parameter dops_git_client_users.0.default_branch no string \"main\" Set gitconfig parameter dops_git_client_repositories yes(provision) dictionary Define GIT repositories to be provisioned dops_git_client_repositories.0.name yes string Project short name dops_git_client_repositories.0.path yes string Project full path dops_git_client_repositories.0.owner yes string Project owner. User must already exist dops_git_client_repositories.0.email yes string Project owner's email dops_git_client_repositories.0.branch no string \"main\" GIT default branch name dops_git_client_repositories.0.ignore no list [] List of paths for gitignore dops_git_client_repositories.0.ignore.0 no string Path pattern Deployment \u00b6 OS Compatibility \u00b6 The operating system compatibility list is defined in the variable: dops_git_client_platforms Dependencies \u00b6 Ansible Collections: serdigital64.backup serdigital64.system Prerequisites \u00b6 The Ansible engine must be already installed and configured for privileged access and remote execution. In addition the following prerequisites can be automatically solved when running the playbook by setting the role action: resolve_prereq: true Package manager for the target application is installed and enabled. Installation Procedure \u00b6 Manually install Ansible Collections from the Ansible Galaxy repository: ansible-galaxy collection install --upgrade serdigital64.devops Automatic installation is also available by deploying A:Platform64 Contributing \u00b6 Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details. Author \u00b6 SerDigital64 License \u00b6 GPL-3.0-or-later","title":"dops_git_client"},{"location":"roles/dops_git_client/#ansible-role-serdigital64devopsdops_git_client","text":"","title":"Ansible Role: serdigital64.devops.dops_git_client"},{"location":"roles/dops_git_client/#purpose","text":"Manage provisioning of client side GIT. Supported features in the current version: Deploy application. Packages are defined in the variable dops_git_client_profiles . Setup user configuration Create default gitconfig user.name user.email init.defaultBranch Provision GIT local repositories: sets initial project gitconfig user.name user.email init.defaultBranch Create .gitignore file initializes project directory: git init The dops_git_client Ansible-Role is part of the A:Platform64 project and is available in the devops Ansible-Collection.","title":"Purpose"},{"location":"roles/dops_git_client/#usage","text":"The following example is an Ansible Playbook that includes all the supported features: use this link if viewing the doc on github --- - name : \"DevOps / GIT / Client / Usage example\" hosts : \"localhost\" gather_facts : true vars : target_user : \"{{ lookup('env','USER') }}\" target_users : - name : \"{{ target_user }}\" group : \"{{ target_user }}\" home : \"/home/{{ target_user }}\" user_name : \"{{ target_user }}\" user_email : \"{{ target_user }}@localhost.localdomain\" test_repo : \"/home/{{ target_user }}/test-repo\" tasks : - name : \"Example: Install GIT, configure CLI, create local repository\" vars : dops_git_client : resolve_prereq : true deploy : true provision : true dops_git_client_repositories : - name : \"test repo\" path : \"{{ test_repo }}\" owner : \"{{ target_user }}\" email : \"{{ target_user }}@localhost\" branch : \"dev\" ignore : - \".cache\" - \".tmp\" ansible.builtin.include_role : name : \"serdigital64.devops.dops_git_client\" - name : \"Example: create default user configuration for already installed git\" vars : dops_git_client : setup : true dops_git_client_users : \"{{ target_users }}\" ansible.builtin.include_role : name : \"serdigital64.devops.dops_git_client\" ... The playbook can be run by executing: # Set ANSIBLE_COLLECTIONS_PATHS to the default install location. Change as needed. ANSIBLE_COLLECTIONS_PATHS = \" ${ HOME } /.ansible/collections\" ansible-playbook \" ${ ANSIBLE_COLLECTIONS_PATHS } /ansible_collections/serdigital64/devops/playbooks/dops_git_client.yml\"","title":"Usage"},{"location":"roles/dops_git_client/#role-parameters","text":"","title":"Role Parameters"},{"location":"roles/dops_git_client/#actions","text":"Use action-parameters to control what tasks are enabled for the role to execute. Parameters should be declared as task level vars as they are intented to be dynamic. dops_git_client : resolve_prereq : deploy : setup : provision : Parameter Required? Type Default Purpose / Value dops_git_client.resolve_prereq no boolean false Enable automatic resolution of prequisites dops_git_client.deploy no boolean false Enable installation of application package dops_git_client.setup no boolean false Enable application configuration dops_git_client.provision no boolean false Enable provisioning of application components","title":"Actions"},{"location":"roles/dops_git_client/#end-state","text":"Use end-state parameters to define the target state after role execution. Parameters should be declared in host_vars or group_vars as they are intended to be permanent. dops_git_client_application : client : name : type : version : installed : extras : name : type : version : installed : dops_git_client_users : - user : group : home : user_name : user_email : default_branch : dops_git_client_repositories : - name : path : owner : email : branch : ignore : - Parameter Required? Type Default Purpose / Value dops_git_client_application yes(deploy) dictionary Set application package end state dops_git_client_application.client yes dictionary Set application package end state dops_git_client_application.client.name yes string \"git\" Select application package name dops_git_client_application.client.type yes string \"distro\" Select application package type dops_git_client_application.client.version yes string \"latest\" Select application package version dops_git_client_application.client.installed yes boolean true Set application package end state dops_git_client_application.extras no dictionary Set application package end state dops_git_client_application.extras.name no string \"extras\" Select application package name dops_git_client_application.extras.type no string \"distro\" Select application package type dops_git_client_application.extras.version no string \"latest\" Select application package version dops_git_client_application.extras.installed no boolean false Set application package end state dops_git_client_users yes(setup) list List of users dops_git_client_users.0.user yes(setup) string User login name dops_git_client_users.0.group yes(setup) string User primary group dops_git_client_users.0.home yes(setup) string Home directory dops_git_client_users.0.user_name yes(setup) string Set gitconfig parameter dops_git_client_users.0.user_email yes(setup) string Set gitconfig parameter dops_git_client_users.0.default_branch no string \"main\" Set gitconfig parameter dops_git_client_repositories yes(provision) dictionary Define GIT repositories to be provisioned dops_git_client_repositories.0.name yes string Project short name dops_git_client_repositories.0.path yes string Project full path dops_git_client_repositories.0.owner yes string Project owner. User must already exist dops_git_client_repositories.0.email yes string Project owner's email dops_git_client_repositories.0.branch no string \"main\" GIT default branch name dops_git_client_repositories.0.ignore no list [] List of paths for gitignore dops_git_client_repositories.0.ignore.0 no string Path pattern","title":"End State"},{"location":"roles/dops_git_client/#deployment","text":"","title":"Deployment"},{"location":"roles/dops_git_client/#os-compatibility","text":"The operating system compatibility list is defined in the variable: dops_git_client_platforms","title":"OS Compatibility"},{"location":"roles/dops_git_client/#dependencies","text":"Ansible Collections: serdigital64.backup serdigital64.system","title":"Dependencies"},{"location":"roles/dops_git_client/#prerequisites","text":"The Ansible engine must be already installed and configured for privileged access and remote execution. In addition the following prerequisites can be automatically solved when running the playbook by setting the role action: resolve_prereq: true Package manager for the target application is installed and enabled.","title":"Prerequisites"},{"location":"roles/dops_git_client/#installation-procedure","text":"Manually install Ansible Collections from the Ansible Galaxy repository: ansible-galaxy collection install --upgrade serdigital64.devops Automatic installation is also available by deploying A:Platform64","title":"Installation Procedure"},{"location":"roles/dops_git_client/#contributing","text":"Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details.","title":"Contributing"},{"location":"roles/dops_git_client/#author","text":"SerDigital64","title":"Author"},{"location":"roles/dops_git_client/#license","text":"GPL-3.0-or-later","title":"License"},{"location":"roles/dops_git_server/","text":"Ansible Role: serdigital64.devops.dops_git_server \u00b6 Purpose \u00b6 Manage GIT server Supported features in the current version: Prepare application environment. Deploy application. Packages are defined in the variable dops_git_server_profiles . Provision GIT remote repositories Supported remote access methods: SSH using client's public keys The dops_git_server Ansible-Role is part of the A:Platform64 project and is available in the devops Ansible-Collection. Usage \u00b6 The following example is an Ansible Playbook that includes all the supported features: use this link if viewing the doc on github --- - name : \"DevOps / GIT / Server / Usage example\" hosts : \"localhost\" gather_facts : true tasks : - name : \"Example: Install GIT, create origin repository, create owner\" vars : dops_git_server : resolve_prereq : true prepare : true deploy : true provision : true dops_git_server_repositories : - name : \"test_repo\" description : \"GIT remote repository\" public_keys : [] ansible.builtin.include_role : name : \"serdigital64.devops.dops_git_server\" ... The playbook can be run by executing: # Set ANSIBLE_COLLECTIONS_PATHS to the default install location. Change as needed. ANSIBLE_COLLECTIONS_PATHS = \" ${ HOME } /.ansible/collections\" ansible-playbook \" ${ ANSIBLE_COLLECTIONS_PATHS } /ansible_collections/serdigital64/devops/playbooks/dops_git_server.yml\" Role Parameters \u00b6 Actions \u00b6 Use action-parameters to control what tasks are enabled for the role to execute. Parameters should be declared as task level vars as they are intented to be dynamic. dops_git_server : resolve_prereq : prepare : deploy : provision : Parameter Required? Type Default Purpose / Value dops_git_server.resolve_prereq no boolean false Enable automatic resolution of prequisites dops_git_server.prepare no boolean false Enable environment preparation dops_git_server.deploy no boolean false Enable installation of application packages dops_git_server.provision no boolean false Enable repositories provisioning End State \u00b6 Use end-state parameters to define the target state after role execution. Parameters should be declared in host_vars or group_vars as they are intended to be permanent. dops_git_server_application : name : type : version : installed : dops_git_server_subsystem : enabled : status : dops_git_server_paths : root : dops_git_server_repositories : - name : description : public_keys : - Parameter Required? Type Default Purpose / Value dops_git_server_application no dictionary Set application package end state dops_git_server_application.name no string \"git\" Select application package name dops_git_server_application.type no string \"distro\" Select application package type dops_git_server_application.version no string \"latest\" Select application package version dops_git_server_application.installed no boolean true Set application package end state dops_git_server_paths yes dictionary Set application paths dops_git_server_paths.root yes string \"/srv/git\" Base directory for GIT repositories dops_git_server_repositories yes (provision) list Define GIT repositories dops_git_server_repositories.0.name yes string Set repository name. Valid chars: a-zA-Z0-9_- dops_git_server_repositories.0.description no string Set repository description dops_git_server_repositories.0.public_keys no list List of client's SSH public keys dops_git_server_repositories.0.public_keys.0 no string SSH Public key content Deployment \u00b6 OS Compatibility \u00b6 CentOS8 RedHat8 AlmaLinux8 OracleLinux8 Ubuntu20 Ubuntu21 Fedora33 Fedora35 Debian10 Debian11 Dependencies \u00b6 Ansible Collections: serdigital64.backup serdigital64.system Prerequisites \u00b6 The Ansible engine must be already installed and configured for privileged access and remote execution. In addition the following prerequisites can be automatically solved when running the playbook by setting the role action: resolve_prereq: true Package manager for the target application is installed and enabled. Installation Procedure \u00b6 Manually install Ansible Collections from the Ansible Galaxy repository: ansible-galaxy collection install --upgrade serdigital64.devops Automatic installation is also available by deploying A:Platform64 Contributing \u00b6 Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details. Author \u00b6 SerDigital64 License \u00b6 GPL-3.0-or-later","title":"dops_git_server"},{"location":"roles/dops_git_server/#ansible-role-serdigital64devopsdops_git_server","text":"","title":"Ansible Role: serdigital64.devops.dops_git_server"},{"location":"roles/dops_git_server/#purpose","text":"Manage GIT server Supported features in the current version: Prepare application environment. Deploy application. Packages are defined in the variable dops_git_server_profiles . Provision GIT remote repositories Supported remote access methods: SSH using client's public keys The dops_git_server Ansible-Role is part of the A:Platform64 project and is available in the devops Ansible-Collection.","title":"Purpose"},{"location":"roles/dops_git_server/#usage","text":"The following example is an Ansible Playbook that includes all the supported features: use this link if viewing the doc on github --- - name : \"DevOps / GIT / Server / Usage example\" hosts : \"localhost\" gather_facts : true tasks : - name : \"Example: Install GIT, create origin repository, create owner\" vars : dops_git_server : resolve_prereq : true prepare : true deploy : true provision : true dops_git_server_repositories : - name : \"test_repo\" description : \"GIT remote repository\" public_keys : [] ansible.builtin.include_role : name : \"serdigital64.devops.dops_git_server\" ... The playbook can be run by executing: # Set ANSIBLE_COLLECTIONS_PATHS to the default install location. Change as needed. ANSIBLE_COLLECTIONS_PATHS = \" ${ HOME } /.ansible/collections\" ansible-playbook \" ${ ANSIBLE_COLLECTIONS_PATHS } /ansible_collections/serdigital64/devops/playbooks/dops_git_server.yml\"","title":"Usage"},{"location":"roles/dops_git_server/#role-parameters","text":"","title":"Role Parameters"},{"location":"roles/dops_git_server/#actions","text":"Use action-parameters to control what tasks are enabled for the role to execute. Parameters should be declared as task level vars as they are intented to be dynamic. dops_git_server : resolve_prereq : prepare : deploy : provision : Parameter Required? Type Default Purpose / Value dops_git_server.resolve_prereq no boolean false Enable automatic resolution of prequisites dops_git_server.prepare no boolean false Enable environment preparation dops_git_server.deploy no boolean false Enable installation of application packages dops_git_server.provision no boolean false Enable repositories provisioning","title":"Actions"},{"location":"roles/dops_git_server/#end-state","text":"Use end-state parameters to define the target state after role execution. Parameters should be declared in host_vars or group_vars as they are intended to be permanent. dops_git_server_application : name : type : version : installed : dops_git_server_subsystem : enabled : status : dops_git_server_paths : root : dops_git_server_repositories : - name : description : public_keys : - Parameter Required? Type Default Purpose / Value dops_git_server_application no dictionary Set application package end state dops_git_server_application.name no string \"git\" Select application package name dops_git_server_application.type no string \"distro\" Select application package type dops_git_server_application.version no string \"latest\" Select application package version dops_git_server_application.installed no boolean true Set application package end state dops_git_server_paths yes dictionary Set application paths dops_git_server_paths.root yes string \"/srv/git\" Base directory for GIT repositories dops_git_server_repositories yes (provision) list Define GIT repositories dops_git_server_repositories.0.name yes string Set repository name. Valid chars: a-zA-Z0-9_- dops_git_server_repositories.0.description no string Set repository description dops_git_server_repositories.0.public_keys no list List of client's SSH public keys dops_git_server_repositories.0.public_keys.0 no string SSH Public key content","title":"End State"},{"location":"roles/dops_git_server/#deployment","text":"","title":"Deployment"},{"location":"roles/dops_git_server/#os-compatibility","text":"CentOS8 RedHat8 AlmaLinux8 OracleLinux8 Ubuntu20 Ubuntu21 Fedora33 Fedora35 Debian10 Debian11","title":"OS Compatibility"},{"location":"roles/dops_git_server/#dependencies","text":"Ansible Collections: serdigital64.backup serdigital64.system","title":"Dependencies"},{"location":"roles/dops_git_server/#prerequisites","text":"The Ansible engine must be already installed and configured for privileged access and remote execution. In addition the following prerequisites can be automatically solved when running the playbook by setting the role action: resolve_prereq: true Package manager for the target application is installed and enabled.","title":"Prerequisites"},{"location":"roles/dops_git_server/#installation-procedure","text":"Manually install Ansible Collections from the Ansible Galaxy repository: ansible-galaxy collection install --upgrade serdigital64.devops Automatic installation is also available by deploying A:Platform64","title":"Installation Procedure"},{"location":"roles/dops_git_server/#contributing","text":"Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details.","title":"Contributing"},{"location":"roles/dops_git_server/#author","text":"SerDigital64","title":"Author"},{"location":"roles/dops_git_server/#license","text":"GPL-3.0-or-later","title":"License"},{"location":"roles/dops_github_cli/","text":"Ansible Role: serdigital64.devops.dops_github_cli \u00b6 Purpose \u00b6 Manage provisioning of the GitHub CLI. Supported features in the current version: Deploy application. Packages are defined in the variable dops_github_cli_profiles . The dops_github_cli Ansible-Role is part of the A:Platform64 project and is available in the devops Ansible-Collection. Usage \u00b6 The following example is an Ansible Playbook that includes all the supported features: use this link if viewing the doc on github --- - name : \"DevOps / GitHUB / CLI / Usage example\" hosts : \"localhost\" gather_facts : true tasks : - name : \"Example: Install CLI\" vars : dops_github_cli : resolve_prereq : true deploy : true ansible.builtin.include_role : name : \"serdigital64.devops.dops_github_cli\" ... The playbook can be run by executing: # Set ANSIBLE_COLLECTIONS_PATHS to the default location. Change as needed. ANSIBLE_COLLECTIONS_PATHS = \" ${ HOME } /.ansible/collections\" ansible-playbook \" ${ ANSIBLE_COLLECTIONS_PATHS } /ansible_collections/serdigital64/devops/playbooks/dops_github_cli.yml\" Role Parameters \u00b6 Actions \u00b6 Use action-parameters to control what tasks are enabled for the role to execute. Parameters should be declared as task level vars as they are intented to be dynamic. dops_github_cli : resolve_prereq : deploy : Parameter Required? Type Default Purpose / Value dops_github_cli.resolve_prereq no boolean false Enable automatic resolution of prequisites dops_github_cli.deploy no boolean false Enable installation of application packages End State \u00b6 Use end-state parameters to define the target state after role execution. Parameters should be declared in host_vars or group_vars as they are intended to be permanent. dops_github_cli_application : name : type : version : installed : Parameter Required? Type Default Purpose / Value dops_github_cli_application yes(deploy) dictionary Set application package end state dops_github_cli_application.name yes string \"gh\" Select application package name dops_github_cli_application.type yes string \"distro\" Select application package type dops_github_cli_application.version yes string \"latest\" Select application package version dops_github_cli_application.installed yes boolean true Set application package end state Deployment \u00b6 OS Compatibility \u00b6 CentOS8 RedHat8 AlmaLinux8 OracleLinux8 Ubuntu20 Ubuntu21 Fedora33 Fedora35 Debian10 Debian11 Dependencies \u00b6 Ansible Collections: serdigital64.backup bkp_archive serdigital64.system sys_package sys_repository Prerequisites \u00b6 The Ansible engine must be already installed and configured for privileged access and remote execution. In addition the following prerequisites can be automatically solved when running the playbook by setting the role action: resolve_prereq: true Package manager for the target application is installed and enabled. Installation Procedure \u00b6 Manually install Ansible Collections from the Ansible Galaxy repository: ansible-galaxy collection install serdigital64.devops Automatic installation is also available by deploying A:Platform64 Contributing \u00b6 Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details. Author \u00b6 SerDigital64 License \u00b6 GPL-3.0-or-later","title":"dops_github_cli"},{"location":"roles/dops_github_cli/#ansible-role-serdigital64devopsdops_github_cli","text":"","title":"Ansible Role: serdigital64.devops.dops_github_cli"},{"location":"roles/dops_github_cli/#purpose","text":"Manage provisioning of the GitHub CLI. Supported features in the current version: Deploy application. Packages are defined in the variable dops_github_cli_profiles . The dops_github_cli Ansible-Role is part of the A:Platform64 project and is available in the devops Ansible-Collection.","title":"Purpose"},{"location":"roles/dops_github_cli/#usage","text":"The following example is an Ansible Playbook that includes all the supported features: use this link if viewing the doc on github --- - name : \"DevOps / GitHUB / CLI / Usage example\" hosts : \"localhost\" gather_facts : true tasks : - name : \"Example: Install CLI\" vars : dops_github_cli : resolve_prereq : true deploy : true ansible.builtin.include_role : name : \"serdigital64.devops.dops_github_cli\" ... The playbook can be run by executing: # Set ANSIBLE_COLLECTIONS_PATHS to the default location. Change as needed. ANSIBLE_COLLECTIONS_PATHS = \" ${ HOME } /.ansible/collections\" ansible-playbook \" ${ ANSIBLE_COLLECTIONS_PATHS } /ansible_collections/serdigital64/devops/playbooks/dops_github_cli.yml\"","title":"Usage"},{"location":"roles/dops_github_cli/#role-parameters","text":"","title":"Role Parameters"},{"location":"roles/dops_github_cli/#actions","text":"Use action-parameters to control what tasks are enabled for the role to execute. Parameters should be declared as task level vars as they are intented to be dynamic. dops_github_cli : resolve_prereq : deploy : Parameter Required? Type Default Purpose / Value dops_github_cli.resolve_prereq no boolean false Enable automatic resolution of prequisites dops_github_cli.deploy no boolean false Enable installation of application packages","title":"Actions"},{"location":"roles/dops_github_cli/#end-state","text":"Use end-state parameters to define the target state after role execution. Parameters should be declared in host_vars or group_vars as they are intended to be permanent. dops_github_cli_application : name : type : version : installed : Parameter Required? Type Default Purpose / Value dops_github_cli_application yes(deploy) dictionary Set application package end state dops_github_cli_application.name yes string \"gh\" Select application package name dops_github_cli_application.type yes string \"distro\" Select application package type dops_github_cli_application.version yes string \"latest\" Select application package version dops_github_cli_application.installed yes boolean true Set application package end state","title":"End State"},{"location":"roles/dops_github_cli/#deployment","text":"","title":"Deployment"},{"location":"roles/dops_github_cli/#os-compatibility","text":"CentOS8 RedHat8 AlmaLinux8 OracleLinux8 Ubuntu20 Ubuntu21 Fedora33 Fedora35 Debian10 Debian11","title":"OS Compatibility"},{"location":"roles/dops_github_cli/#dependencies","text":"Ansible Collections: serdigital64.backup bkp_archive serdigital64.system sys_package sys_repository","title":"Dependencies"},{"location":"roles/dops_github_cli/#prerequisites","text":"The Ansible engine must be already installed and configured for privileged access and remote execution. In addition the following prerequisites can be automatically solved when running the playbook by setting the role action: resolve_prereq: true Package manager for the target application is installed and enabled.","title":"Prerequisites"},{"location":"roles/dops_github_cli/#installation-procedure","text":"Manually install Ansible Collections from the Ansible Galaxy repository: ansible-galaxy collection install serdigital64.devops Automatic installation is also available by deploying A:Platform64","title":"Installation Procedure"},{"location":"roles/dops_github_cli/#contributing","text":"Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details.","title":"Contributing"},{"location":"roles/dops_github_cli/#author","text":"SerDigital64","title":"Author"},{"location":"roles/dops_github_cli/#license","text":"GPL-3.0-or-later","title":"License"},{"location":"roles/dops_gitlab_server/","text":"Ansible Role: serdigital64.devops.dops_gitlab_server \u00b6 Purpose \u00b6 Manage provisioning of GitLab Server Supported features in the current version: Deploy application. Packages are defined in the variable dops_gitlab_server_profiles . Control application subsystem services. Services are defined in the variable dops_gitlab_server_subsystems . Configure OS level firewall rules. Rules are defined in the varible dops_gitlab_server_firewall_rules . Configure server options. Options are defined in the variable dops_gitlab_server_server . The dops_gitlab_server Ansible-Role is part of the A:Platform64 project and is available in the devops Ansible-Collection. Usage \u00b6 The following example is an Ansible Playbook that includes all the supported features: use this link if viewing the doc on github --- - name : \"DevOps / GitLab / Server / Usage example\" hosts : \"localhost\" gather_facts : true tasks : - name : \"Example: Install package\" vars : dops_gitlab_server : resolve_prereq : true deploy : true setup : true control : true dops_gitlab_server_firewall : zone : \"public\" dops_gitlab_server_server : external_url : \"gitlab.localdomain\" ansible.builtin.include_role : name : \"serdigital64.devops.dops_gitlab_server\" ... The playbook can be run by executing: # Set ANSIBLE_COLLECTIONS_PATHS to the default location. Change as needed. ANSIBLE_COLLECTIONS_PATHS = \" ${ HOME } /.ansible/collections\" ansible-playbook \" ${ ANSIBLE_COLLECTIONS_PATHS } /ansible_collections/serdigital64/devops/playbooks/dops_gitlab_server.yml\" Role Parameters \u00b6 Actions \u00b6 Use action-parameters to control what tasks are enabled for the role to execute. Parameters should be declared as task level vars as they are intented to be dynamic. dops_gitlab_server : resolve_prereq : deploy : setup : control : Parameter Required? Type Default Purpose / Value dops_gitlab_server.resolve_prereq no boolean false Enable automatic resolution of prequisites dops_gitlab_server.deploy no boolean false Enable installation of application packages dops_gitlab_server.setup no boolean false Enable application configuration dops_gitlab_server.control no boolean false Enable application subsystem service control End State \u00b6 Use end-state parameters to define the target state after role execution. Parameters should be declared in host_vars or group_vars as they are intended to be permanent. dops_gitlab_server_application : name : type : version : installed : dops_gitlab_server_subsystem : enabled : status : dops_gitlab_server_firewall : zone : dops_gitlab_server_server : external_url : Parameter Required? Type Default Purpose / Value dops_gitlab_server_application yes(deploy) dictionary Set application package end state dops_gitlab_server_application.name yes string \"gitlab_server\" Select application package name dops_gitlab_server_application.type yes string \"distro\" Select application package type dops_gitlab_server_application.version yes string \"v14\" Select application package version dops_gitlab_server_application.installed yes boolean true Set application package end state dops_gitlab_server_subsystem yes(control) dictionary Set application subsystem end state dops_gitlab_server_subsystem.enabled yes boolean false Enable the subsystem? dops_gitlab_server_subsystem.status yes string \"stopped\" Set the service state dops_gitlab_server_server yes(control) dictionary Set subsystem server options dops_gitlab_server_server.external_url yes string \"gitlab.localdomain\" Server URL. Format: FQDN dops_gitlab_server_firewall yes(setup) dictionary OS Firewall options dops_gitlab_server_firewall.zone yes string \"public\" Name of the target zone Deployment \u00b6 OS Compatibility \u00b6 CentOS8 RedHat8 AlmaLinux8 OracleLinux8 Dependencies \u00b6 Ansible Collections: serdigital64.backup bkp_archive serdigital64.system sys_package sys_repository serdigital64.security sec_firewall_os Prerequisites \u00b6 The Ansible engine must be already installed and configured for privileged access and remote execution. In addition the following prerequisites can be automatically solved when running the playbook by setting the role action: resolve_prereq: true Package manager for the target application is installed and enabled. Installation Procedure \u00b6 Manually install Ansible Collections from the Ansible Galaxy repository: ansible-galaxy collection install serdigital64.devops Automatic installation is also available by deploying A:Platform64 Contributing \u00b6 Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details. Author \u00b6 SerDigital64 License \u00b6 GPL-3.0-or-later","title":"dops_gitlab_server"},{"location":"roles/dops_gitlab_server/#ansible-role-serdigital64devopsdops_gitlab_server","text":"","title":"Ansible Role: serdigital64.devops.dops_gitlab_server"},{"location":"roles/dops_gitlab_server/#purpose","text":"Manage provisioning of GitLab Server Supported features in the current version: Deploy application. Packages are defined in the variable dops_gitlab_server_profiles . Control application subsystem services. Services are defined in the variable dops_gitlab_server_subsystems . Configure OS level firewall rules. Rules are defined in the varible dops_gitlab_server_firewall_rules . Configure server options. Options are defined in the variable dops_gitlab_server_server . The dops_gitlab_server Ansible-Role is part of the A:Platform64 project and is available in the devops Ansible-Collection.","title":"Purpose"},{"location":"roles/dops_gitlab_server/#usage","text":"The following example is an Ansible Playbook that includes all the supported features: use this link if viewing the doc on github --- - name : \"DevOps / GitLab / Server / Usage example\" hosts : \"localhost\" gather_facts : true tasks : - name : \"Example: Install package\" vars : dops_gitlab_server : resolve_prereq : true deploy : true setup : true control : true dops_gitlab_server_firewall : zone : \"public\" dops_gitlab_server_server : external_url : \"gitlab.localdomain\" ansible.builtin.include_role : name : \"serdigital64.devops.dops_gitlab_server\" ... The playbook can be run by executing: # Set ANSIBLE_COLLECTIONS_PATHS to the default location. Change as needed. ANSIBLE_COLLECTIONS_PATHS = \" ${ HOME } /.ansible/collections\" ansible-playbook \" ${ ANSIBLE_COLLECTIONS_PATHS } /ansible_collections/serdigital64/devops/playbooks/dops_gitlab_server.yml\"","title":"Usage"},{"location":"roles/dops_gitlab_server/#role-parameters","text":"","title":"Role Parameters"},{"location":"roles/dops_gitlab_server/#actions","text":"Use action-parameters to control what tasks are enabled for the role to execute. Parameters should be declared as task level vars as they are intented to be dynamic. dops_gitlab_server : resolve_prereq : deploy : setup : control : Parameter Required? Type Default Purpose / Value dops_gitlab_server.resolve_prereq no boolean false Enable automatic resolution of prequisites dops_gitlab_server.deploy no boolean false Enable installation of application packages dops_gitlab_server.setup no boolean false Enable application configuration dops_gitlab_server.control no boolean false Enable application subsystem service control","title":"Actions"},{"location":"roles/dops_gitlab_server/#end-state","text":"Use end-state parameters to define the target state after role execution. Parameters should be declared in host_vars or group_vars as they are intended to be permanent. dops_gitlab_server_application : name : type : version : installed : dops_gitlab_server_subsystem : enabled : status : dops_gitlab_server_firewall : zone : dops_gitlab_server_server : external_url : Parameter Required? Type Default Purpose / Value dops_gitlab_server_application yes(deploy) dictionary Set application package end state dops_gitlab_server_application.name yes string \"gitlab_server\" Select application package name dops_gitlab_server_application.type yes string \"distro\" Select application package type dops_gitlab_server_application.version yes string \"v14\" Select application package version dops_gitlab_server_application.installed yes boolean true Set application package end state dops_gitlab_server_subsystem yes(control) dictionary Set application subsystem end state dops_gitlab_server_subsystem.enabled yes boolean false Enable the subsystem? dops_gitlab_server_subsystem.status yes string \"stopped\" Set the service state dops_gitlab_server_server yes(control) dictionary Set subsystem server options dops_gitlab_server_server.external_url yes string \"gitlab.localdomain\" Server URL. Format: FQDN dops_gitlab_server_firewall yes(setup) dictionary OS Firewall options dops_gitlab_server_firewall.zone yes string \"public\" Name of the target zone","title":"End State"},{"location":"roles/dops_gitlab_server/#deployment","text":"","title":"Deployment"},{"location":"roles/dops_gitlab_server/#os-compatibility","text":"CentOS8 RedHat8 AlmaLinux8 OracleLinux8","title":"OS Compatibility"},{"location":"roles/dops_gitlab_server/#dependencies","text":"Ansible Collections: serdigital64.backup bkp_archive serdigital64.system sys_package sys_repository serdigital64.security sec_firewall_os","title":"Dependencies"},{"location":"roles/dops_gitlab_server/#prerequisites","text":"The Ansible engine must be already installed and configured for privileged access and remote execution. In addition the following prerequisites can be automatically solved when running the playbook by setting the role action: resolve_prereq: true Package manager for the target application is installed and enabled.","title":"Prerequisites"},{"location":"roles/dops_gitlab_server/#installation-procedure","text":"Manually install Ansible Collections from the Ansible Galaxy repository: ansible-galaxy collection install serdigital64.devops Automatic installation is also available by deploying A:Platform64","title":"Installation Procedure"},{"location":"roles/dops_gitlab_server/#contributing","text":"Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details.","title":"Contributing"},{"location":"roles/dops_gitlab_server/#author","text":"SerDigital64","title":"Author"},{"location":"roles/dops_gitlab_server/#license","text":"GPL-3.0-or-later","title":"License"},{"location":"roles/dops_jenkins/","text":"Ansible Role: serdigital64.devops.dops_jenkins \u00b6 Purpose \u00b6 Manage Jenkins server Supported features in the current version: Deploy application. Packages are defined in the variable dops_jenkins_profiles . Control application subsystem services. Services are defined in the variable dops_jenkins_subsystems . Configure application. Options are defined in the end-state: dops_jenkins_server_options Resolve dependencies Install OpenJDK Install daemonize tool Add OS level firewall rules The dops_jenkins Ansible-Role is part of the A:Platform64 project and is available in the devops Ansible-Collection. Usage \u00b6 The following example is an Ansible Playbook that includes all the supported features: use this link if viewing the doc on github --- - name : \"DevOps / Jenkins / Usage example\" hosts : \"localhost\" gather_facts : true tasks : - name : \"Example: Install Jenkins, configure service, start server\" vars : dops_jenkins : resolve_prereq : true deploy : true setup : true control : true dops_jenkins_subsystem : enabled : true status : \"started\" dops_jenkins_server_options : port : \"8080\" listen_address : \"\" dops_jenkins_firewall : zone : \"public\" ansible.builtin.include_role : name : \"serdigital64.devops.dops_jenkins\" ... The playbook can be run by executing: # Set ANSIBLE_COLLECTIONS_PATHS to the default install location. Change as needed. ANSIBLE_COLLECTIONS_PATHS = \" ${ HOME } /.ansible/collections\" ansible-playbook \" ${ ANSIBLE_COLLECTIONS_PATHS } /ansible_collections/serdigital64/devops/playbooks/dops_jenkins.yml\" Role Parameters \u00b6 Actions \u00b6 Use action-parameters to control what tasks are enabled for the role to execute. Parameters should be declared as task level vars as they are intented to be dynamic. dops_jenkins : resolve_prereq : deploy : setup : control : Parameter Required? Type Default Purpose / Value dops_jenkins.resolve_prereq no boolean false Enable automatic resolution of prequisites dops_jenkins.deploy no boolean false Enable installation of application packages dops_jenkins.setup no boolean false Enable application configuration dops_jenkins.control no boolean false Enable application subsystem service control End State \u00b6 Use end-state parameters to define the target state after role execution. Parameters should be declared in host_vars or group_vars as they are intended to be permanent. dops_jenkins_application : name : type : version : installed : dops_jenkins_subsystem : enabled : status : dops_jenkins_server_options : port : listen_address : dops_jenkins_firewall : zone : Parameter Required? Type Default Purpose / Value dops_jenkins_application no dictionary Set application package end state dops_jenkins_application.name yes string \"jenkins\" Select application package name dops_jenkins_application.type yes string \"distro\" Select application package type dops_jenkins_application.version yes string \"latest\" Select application package version dops_jenkins_application.installed yes boolean true Set application package end state dops_jenkins_subsystem no dictionary Set application subsystem end state dops_jenkins_subsystem.enabled yes boolean false Enable the subsystem? dops_jenkins_subsystem.status yes string \"stopped\" Set the service state dops_jenkins_server_options no dictionary Set jenkins server options dops_jenkins_server_options.port no string \"8080\" Listen port dops_jenkins_server_options.listen_address no string \"\" Listen address dops_jenkins_firewall no dictionary OS Firewall options dops_jenkins_firewall.zone yes string \"public\" Name of the target zone Deployment \u00b6 OS Compatibility \u00b6 CentOS8 RedHat8 AlmaLinux8 OracleLinux8 Ubuntu20 Ubuntu21 Fedora33 Fedora35 Debian10 Debian11 Dependencies \u00b6 Ansible Collections: serdigital64.backup bkp_archive serdigital64.system sys_package sys_repository serdigital64.development dev_java OS: SystemD Daemonize Packages: OpenJDK11 Prerequisites \u00b6 The Ansible engine must be already installed and configured for privileged access and remote execution. In addition the following prerequisites can be automatically solved when running the playbook by setting the role action: resolve_prereq: true Package manager for the target application is installed and enabled. Installation Procedure \u00b6 Manually install Ansible Collections from the Ansible Galaxy repository: ansible-galaxy collection install --upgrade serdigital64.devops Automatic installation is also available by deploying A:Platform64 Contributing \u00b6 Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details. Author \u00b6 SerDigital64 License \u00b6 GPL-3.0-or-later","title":"dops_jenkins"},{"location":"roles/dops_jenkins/#ansible-role-serdigital64devopsdops_jenkins","text":"","title":"Ansible Role: serdigital64.devops.dops_jenkins"},{"location":"roles/dops_jenkins/#purpose","text":"Manage Jenkins server Supported features in the current version: Deploy application. Packages are defined in the variable dops_jenkins_profiles . Control application subsystem services. Services are defined in the variable dops_jenkins_subsystems . Configure application. Options are defined in the end-state: dops_jenkins_server_options Resolve dependencies Install OpenJDK Install daemonize tool Add OS level firewall rules The dops_jenkins Ansible-Role is part of the A:Platform64 project and is available in the devops Ansible-Collection.","title":"Purpose"},{"location":"roles/dops_jenkins/#usage","text":"The following example is an Ansible Playbook that includes all the supported features: use this link if viewing the doc on github --- - name : \"DevOps / Jenkins / Usage example\" hosts : \"localhost\" gather_facts : true tasks : - name : \"Example: Install Jenkins, configure service, start server\" vars : dops_jenkins : resolve_prereq : true deploy : true setup : true control : true dops_jenkins_subsystem : enabled : true status : \"started\" dops_jenkins_server_options : port : \"8080\" listen_address : \"\" dops_jenkins_firewall : zone : \"public\" ansible.builtin.include_role : name : \"serdigital64.devops.dops_jenkins\" ... The playbook can be run by executing: # Set ANSIBLE_COLLECTIONS_PATHS to the default install location. Change as needed. ANSIBLE_COLLECTIONS_PATHS = \" ${ HOME } /.ansible/collections\" ansible-playbook \" ${ ANSIBLE_COLLECTIONS_PATHS } /ansible_collections/serdigital64/devops/playbooks/dops_jenkins.yml\"","title":"Usage"},{"location":"roles/dops_jenkins/#role-parameters","text":"","title":"Role Parameters"},{"location":"roles/dops_jenkins/#actions","text":"Use action-parameters to control what tasks are enabled for the role to execute. Parameters should be declared as task level vars as they are intented to be dynamic. dops_jenkins : resolve_prereq : deploy : setup : control : Parameter Required? Type Default Purpose / Value dops_jenkins.resolve_prereq no boolean false Enable automatic resolution of prequisites dops_jenkins.deploy no boolean false Enable installation of application packages dops_jenkins.setup no boolean false Enable application configuration dops_jenkins.control no boolean false Enable application subsystem service control","title":"Actions"},{"location":"roles/dops_jenkins/#end-state","text":"Use end-state parameters to define the target state after role execution. Parameters should be declared in host_vars or group_vars as they are intended to be permanent. dops_jenkins_application : name : type : version : installed : dops_jenkins_subsystem : enabled : status : dops_jenkins_server_options : port : listen_address : dops_jenkins_firewall : zone : Parameter Required? Type Default Purpose / Value dops_jenkins_application no dictionary Set application package end state dops_jenkins_application.name yes string \"jenkins\" Select application package name dops_jenkins_application.type yes string \"distro\" Select application package type dops_jenkins_application.version yes string \"latest\" Select application package version dops_jenkins_application.installed yes boolean true Set application package end state dops_jenkins_subsystem no dictionary Set application subsystem end state dops_jenkins_subsystem.enabled yes boolean false Enable the subsystem? dops_jenkins_subsystem.status yes string \"stopped\" Set the service state dops_jenkins_server_options no dictionary Set jenkins server options dops_jenkins_server_options.port no string \"8080\" Listen port dops_jenkins_server_options.listen_address no string \"\" Listen address dops_jenkins_firewall no dictionary OS Firewall options dops_jenkins_firewall.zone yes string \"public\" Name of the target zone","title":"End State"},{"location":"roles/dops_jenkins/#deployment","text":"","title":"Deployment"},{"location":"roles/dops_jenkins/#os-compatibility","text":"CentOS8 RedHat8 AlmaLinux8 OracleLinux8 Ubuntu20 Ubuntu21 Fedora33 Fedora35 Debian10 Debian11","title":"OS Compatibility"},{"location":"roles/dops_jenkins/#dependencies","text":"Ansible Collections: serdigital64.backup bkp_archive serdigital64.system sys_package sys_repository serdigital64.development dev_java OS: SystemD Daemonize Packages: OpenJDK11","title":"Dependencies"},{"location":"roles/dops_jenkins/#prerequisites","text":"The Ansible engine must be already installed and configured for privileged access and remote execution. In addition the following prerequisites can be automatically solved when running the playbook by setting the role action: resolve_prereq: true Package manager for the target application is installed and enabled.","title":"Prerequisites"},{"location":"roles/dops_jenkins/#installation-procedure","text":"Manually install Ansible Collections from the Ansible Galaxy repository: ansible-galaxy collection install --upgrade serdigital64.devops Automatic installation is also available by deploying A:Platform64","title":"Installation Procedure"},{"location":"roles/dops_jenkins/#contributing","text":"Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details.","title":"Contributing"},{"location":"roles/dops_jenkins/#author","text":"SerDigital64","title":"Author"},{"location":"roles/dops_jenkins/#license","text":"GPL-3.0-or-later","title":"License"},{"location":"roles/dops_molecule/","text":"Ansible Role: serdigital64.devops.dops_molecule \u00b6 Purpose \u00b6 Manage provisioning of Molecule Supported features in the current version: Deploy application. Packages are defined in the variable dops_molecule_profiles . The dops_molecule Ansible-Role is part of the A:Platform64 project and is available in the devops Ansible-Collection. Usage \u00b6 The following example is an Ansible Playbook that includes all the supported features: use this link if viewing the doc on github --- - name : \"DevOps / Molecule / Usage example\" hosts : \"localhost\" gather_facts : true tasks : - name : \"Example: install\" vars : dops_molecule : resolve_prereq : true deploy : true ansible.builtin.include_role : name : \"serdigital64.devops.dops_molecule\" ... The playbook can be run by executing: # Set ANSIBLE_COLLECTIONS_PATHS to the default location. Change as needed. ANSIBLE_COLLECTIONS_PATHS = \" ${ HOME } /.ansible/collections\" ansible-playbook \" ${ ANSIBLE_COLLECTIONS_PATHS } /ansible_collections/serdigital64/devops/playbooks/dops_molecule.yml\" Role Parameters \u00b6 Actions \u00b6 Use action-parameters to control what tasks are enabled for the role to execute. Parameters should be declared as task level vars as they are intented to be dynamic. dops_molecule : resolve_prereq : deploy : Parameter Required? Type Default Purpose / Value dops_molecule.resolve_prereq no boolean false Enable automatic resolution of prequisites dops_molecule.deploy no boolean false Enable installation of application packages End State \u00b6 Use end-state parameters to define the target state after role execution. Parameters should be declared in host_vars or group_vars as they are intended to be permanent. dops_molecule_application : name : type : version : installed : dops_molecule_paths : root : dops_molecule_owners : app : name : group : home : Parameter Required? Type Default Purpose / Value dops_molecule_application yes(deploy) dictionary Set application package end state dops_molecule_application.name yes string \"molecule\" Select application package name dops_molecule_application.type yes string \"pip\" Select application package type dops_molecule_application.version yes string \"latest\" Select application package version dops_molecule_application.installed yes boolean true Set application package end state dops_molecule_paths yes(prepare) dictionary Set paths dops_molecule_paths.root yes string \"/opt/molecule\" dops_molecule_owners yes(prepare) dictionary Define users dops_molecule_owners.app yes dictionary Define directory structure owner dops_molecule_owners.app.name yes string \"molecule\" Set login name dops_molecule_owners.app.group yes string \"molecule\" Set group name dops_molecule_owners.app.home yes string \"/home/molecule\" Set home directory Deployment \u00b6 OS Compatibility \u00b6 CentOS8 RedHat8 AlmaLinux8 OracleLinux8 Ubuntu20 Ubuntu21 Fedora33 Fedora35 Debian10 Debian11 Dependencies \u00b6 Ansible Collections: serdigital64.backup bkp_archive serdigital64.system sys_package sys_repository Prerequisites \u00b6 The Ansible engine must be already installed and configured for privileged access and remote execution. In addition the following prerequisites can be automatically solved when running the playbook by setting the role action: resolve_prereq: true Package manager for the target application is installed and enabled. Installation Procedure \u00b6 Manually install Ansible Collections from the Ansible Galaxy repository: ansible-galaxy collection install serdigital64.devops Automatic installation is also available by deploying A:Platform64 Contributing \u00b6 Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details. Author \u00b6 SerDigital64 License \u00b6 GPL-3.0-or-later","title":"dops_molecule"},{"location":"roles/dops_molecule/#ansible-role-serdigital64devopsdops_molecule","text":"","title":"Ansible Role: serdigital64.devops.dops_molecule"},{"location":"roles/dops_molecule/#purpose","text":"Manage provisioning of Molecule Supported features in the current version: Deploy application. Packages are defined in the variable dops_molecule_profiles . The dops_molecule Ansible-Role is part of the A:Platform64 project and is available in the devops Ansible-Collection.","title":"Purpose"},{"location":"roles/dops_molecule/#usage","text":"The following example is an Ansible Playbook that includes all the supported features: use this link if viewing the doc on github --- - name : \"DevOps / Molecule / Usage example\" hosts : \"localhost\" gather_facts : true tasks : - name : \"Example: install\" vars : dops_molecule : resolve_prereq : true deploy : true ansible.builtin.include_role : name : \"serdigital64.devops.dops_molecule\" ... The playbook can be run by executing: # Set ANSIBLE_COLLECTIONS_PATHS to the default location. Change as needed. ANSIBLE_COLLECTIONS_PATHS = \" ${ HOME } /.ansible/collections\" ansible-playbook \" ${ ANSIBLE_COLLECTIONS_PATHS } /ansible_collections/serdigital64/devops/playbooks/dops_molecule.yml\"","title":"Usage"},{"location":"roles/dops_molecule/#role-parameters","text":"","title":"Role Parameters"},{"location":"roles/dops_molecule/#actions","text":"Use action-parameters to control what tasks are enabled for the role to execute. Parameters should be declared as task level vars as they are intented to be dynamic. dops_molecule : resolve_prereq : deploy : Parameter Required? Type Default Purpose / Value dops_molecule.resolve_prereq no boolean false Enable automatic resolution of prequisites dops_molecule.deploy no boolean false Enable installation of application packages","title":"Actions"},{"location":"roles/dops_molecule/#end-state","text":"Use end-state parameters to define the target state after role execution. Parameters should be declared in host_vars or group_vars as they are intended to be permanent. dops_molecule_application : name : type : version : installed : dops_molecule_paths : root : dops_molecule_owners : app : name : group : home : Parameter Required? Type Default Purpose / Value dops_molecule_application yes(deploy) dictionary Set application package end state dops_molecule_application.name yes string \"molecule\" Select application package name dops_molecule_application.type yes string \"pip\" Select application package type dops_molecule_application.version yes string \"latest\" Select application package version dops_molecule_application.installed yes boolean true Set application package end state dops_molecule_paths yes(prepare) dictionary Set paths dops_molecule_paths.root yes string \"/opt/molecule\" dops_molecule_owners yes(prepare) dictionary Define users dops_molecule_owners.app yes dictionary Define directory structure owner dops_molecule_owners.app.name yes string \"molecule\" Set login name dops_molecule_owners.app.group yes string \"molecule\" Set group name dops_molecule_owners.app.home yes string \"/home/molecule\" Set home directory","title":"End State"},{"location":"roles/dops_molecule/#deployment","text":"","title":"Deployment"},{"location":"roles/dops_molecule/#os-compatibility","text":"CentOS8 RedHat8 AlmaLinux8 OracleLinux8 Ubuntu20 Ubuntu21 Fedora33 Fedora35 Debian10 Debian11","title":"OS Compatibility"},{"location":"roles/dops_molecule/#dependencies","text":"Ansible Collections: serdigital64.backup bkp_archive serdigital64.system sys_package sys_repository","title":"Dependencies"},{"location":"roles/dops_molecule/#prerequisites","text":"The Ansible engine must be already installed and configured for privileged access and remote execution. In addition the following prerequisites can be automatically solved when running the playbook by setting the role action: resolve_prereq: true Package manager for the target application is installed and enabled.","title":"Prerequisites"},{"location":"roles/dops_molecule/#installation-procedure","text":"Manually install Ansible Collections from the Ansible Galaxy repository: ansible-galaxy collection install serdigital64.devops Automatic installation is also available by deploying A:Platform64","title":"Installation Procedure"},{"location":"roles/dops_molecule/#contributing","text":"Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details.","title":"Contributing"},{"location":"roles/dops_molecule/#author","text":"SerDigital64","title":"Author"},{"location":"roles/dops_molecule/#license","text":"GPL-3.0-or-later","title":"License"},{"location":"roles/dops_shellcheck/","text":"Ansible Role: serdigital64.devops.dops_shellcheck \u00b6 Purpose \u00b6 Manage provisioning of ShellCheck. Supported features in the current version: Deploy application. Packages are defined in the variable dops_shellcheck_profiles . The dops_shellcheck Ansible-Role is part of the A:Platform64 project and is available in the devops Ansible-Collection. Usage \u00b6 The following example is an Ansible Playbook that includes all the supported features: use this link if viewing the doc on github --- - name : \"DevOps / ShellCheck / Usage example\" hosts : \"localhost\" gather_facts : true tasks : - name : \"Example: install\" vars : dops_shellcheck : resolve_prereq : true deploy : true ansible.builtin.include_role : name : \"serdigital64.devops.dops_shellcheck\" ... The playbook can be run by executing: # Set ANSIBLE_COLLECTIONS_PATHS to the default location. Change as needed. ANSIBLE_COLLECTIONS_PATHS = \" ${ HOME } /.ansible/collections\" ansible-playbook \" ${ ANSIBLE_COLLECTIONS_PATHS } /ansible_collections/serdigital64/devops/playbooks/dops_shellcheck.yml\" Role Parameters \u00b6 Actions \u00b6 Use action-parameters to control what tasks are enabled for the role to execute. Parameters should be declared as task level vars as they are intented to be dynamic. dops_shellcheck : resolve_prereq : deploy : Parameter Required? Type Default Purpose / Value dops_shellcheck.resolve_prereq no boolean false Enable automatic resolution of prequisites dops_shellcheck.deploy no boolean false Enable installation of application packages End State \u00b6 Use end-state parameters to define the target state after role execution. Parameters should be declared in host_vars or group_vars as they are intended to be permanent. dops_shellcheck_application : name : type : version : installed : Parameter Required? Type Default Purpose / Value dops_shellcheck_application yes(deploy) dictionary Set application package end state dops_shellcheck_application.name yes string \"shellcheck\" Select application package name dops_shellcheck_application.type yes string \"distro\" Select application package type dops_shellcheck_application.version yes string \"latest\" Select application package version dops_shellcheck_application.installed yes boolean true Set application package end state Deployment \u00b6 OS Compatibility \u00b6 CentOS8 RedHat8 AlmaLinux8 OracleLinux8 Ubuntu20 Ubuntu21 Fedora33 Fedora35 Debian10 Debian11 Dependencies \u00b6 Ansible Collections: serdigital64.backup bkp_archive serdigital64.system sys_package sys_repository Prerequisites \u00b6 The Ansible engine must be already installed and configured for privileged access and remote execution. In addition the following prerequisites can be automatically solved when running the playbook by setting the role action: resolve_prereq: true Package manager for the target application is installed and enabled. Installation Procedure \u00b6 Manually install Ansible Collections from the Ansible Galaxy repository: ansible-galaxy collection install serdigital64.devops Automatic installation is also available by deploying A:Platform64 Contributing \u00b6 Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details. Author \u00b6 SerDigital64 License \u00b6 GPL-3.0-or-later","title":"dops_shellcheck"},{"location":"roles/dops_shellcheck/#ansible-role-serdigital64devopsdops_shellcheck","text":"","title":"Ansible Role: serdigital64.devops.dops_shellcheck"},{"location":"roles/dops_shellcheck/#purpose","text":"Manage provisioning of ShellCheck. Supported features in the current version: Deploy application. Packages are defined in the variable dops_shellcheck_profiles . The dops_shellcheck Ansible-Role is part of the A:Platform64 project and is available in the devops Ansible-Collection.","title":"Purpose"},{"location":"roles/dops_shellcheck/#usage","text":"The following example is an Ansible Playbook that includes all the supported features: use this link if viewing the doc on github --- - name : \"DevOps / ShellCheck / Usage example\" hosts : \"localhost\" gather_facts : true tasks : - name : \"Example: install\" vars : dops_shellcheck : resolve_prereq : true deploy : true ansible.builtin.include_role : name : \"serdigital64.devops.dops_shellcheck\" ... The playbook can be run by executing: # Set ANSIBLE_COLLECTIONS_PATHS to the default location. Change as needed. ANSIBLE_COLLECTIONS_PATHS = \" ${ HOME } /.ansible/collections\" ansible-playbook \" ${ ANSIBLE_COLLECTIONS_PATHS } /ansible_collections/serdigital64/devops/playbooks/dops_shellcheck.yml\"","title":"Usage"},{"location":"roles/dops_shellcheck/#role-parameters","text":"","title":"Role Parameters"},{"location":"roles/dops_shellcheck/#actions","text":"Use action-parameters to control what tasks are enabled for the role to execute. Parameters should be declared as task level vars as they are intented to be dynamic. dops_shellcheck : resolve_prereq : deploy : Parameter Required? Type Default Purpose / Value dops_shellcheck.resolve_prereq no boolean false Enable automatic resolution of prequisites dops_shellcheck.deploy no boolean false Enable installation of application packages","title":"Actions"},{"location":"roles/dops_shellcheck/#end-state","text":"Use end-state parameters to define the target state after role execution. Parameters should be declared in host_vars or group_vars as they are intended to be permanent. dops_shellcheck_application : name : type : version : installed : Parameter Required? Type Default Purpose / Value dops_shellcheck_application yes(deploy) dictionary Set application package end state dops_shellcheck_application.name yes string \"shellcheck\" Select application package name dops_shellcheck_application.type yes string \"distro\" Select application package type dops_shellcheck_application.version yes string \"latest\" Select application package version dops_shellcheck_application.installed yes boolean true Set application package end state","title":"End State"},{"location":"roles/dops_shellcheck/#deployment","text":"","title":"Deployment"},{"location":"roles/dops_shellcheck/#os-compatibility","text":"CentOS8 RedHat8 AlmaLinux8 OracleLinux8 Ubuntu20 Ubuntu21 Fedora33 Fedora35 Debian10 Debian11","title":"OS Compatibility"},{"location":"roles/dops_shellcheck/#dependencies","text":"Ansible Collections: serdigital64.backup bkp_archive serdigital64.system sys_package sys_repository","title":"Dependencies"},{"location":"roles/dops_shellcheck/#prerequisites","text":"The Ansible engine must be already installed and configured for privileged access and remote execution. In addition the following prerequisites can be automatically solved when running the playbook by setting the role action: resolve_prereq: true Package manager for the target application is installed and enabled.","title":"Prerequisites"},{"location":"roles/dops_shellcheck/#installation-procedure","text":"Manually install Ansible Collections from the Ansible Galaxy repository: ansible-galaxy collection install serdigital64.devops Automatic installation is also available by deploying A:Platform64","title":"Installation Procedure"},{"location":"roles/dops_shellcheck/#contributing","text":"Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details.","title":"Contributing"},{"location":"roles/dops_shellcheck/#author","text":"SerDigital64","title":"Author"},{"location":"roles/dops_shellcheck/#license","text":"GPL-3.0-or-later","title":"License"},{"location":"roles/dops_tfsec/","text":"Ansible Role: serdigital64.devops.dops_tfsec \u00b6 Purpose \u00b6 Manage provisioning of the TFSec tool. Supported features in the current version: Deploy application. Packages are defined in the variable dops_tfsec_profiles . The dops_tfsec Ansible-Role is part of the A:Platform64 project and is available in the devops Ansible-Collection. Usage \u00b6 The following example is an Ansible Playbook that includes all the supported features: use this link if viewing the doc on github --- - name : \"DevOps / TFSec / Usage example\" hosts : \"localhost\" gather_facts : true tasks : - name : \"Example: Install TFSec\" vars : dops_tfsec : resolve_prereq : true deploy : true ansible.builtin.include_role : name : \"serdigital64.devops.dops_tfsec\" ... The playbook can be run by executing: # Set ANSIBLE_COLLECTIONS_PATHS to the default location. Change as needed. ANSIBLE_COLLECTIONS_PATHS = \" ${ HOME } /.ansible/collections\" ansible-playbook \" ${ ANSIBLE_COLLECTIONS_PATHS } /ansible_collections/serdigital64/devops/playbooks/dops_tfsec.yml\" Role Parameters \u00b6 Actions \u00b6 Use action-parameters to control what tasks are enabled for the role to execute. Parameters should be declared as task level vars as they are intented to be dynamic. dops_tfsec : resolve_prereq : deploy : Parameter Required? Type Default Purpose / Value dops_tfsec.resolve_prereq no boolean false Enable automatic resolution of prequisites dops_tfsec.deploy no boolean false Enable installation of application packages End State \u00b6 Use end-state parameters to define the target state after role execution. Parameters should be declared in host_vars or group_vars as they are intended to be permanent. dops_tfsec_application : name : type : version : installed : Parameter Required? Type Default Purpose / Value dops_tfsec_application yes(deploy) dictionary Set application package end state dops_tfsec_application.name yes string \"tfsec\" Select application package name dops_tfsec_application.type yes string \"brew\" Select application package type dops_tfsec_application.version yes string \"latest\" Select application package version dops_tfsec_application.installed yes boolean true Set application package end state Deployment \u00b6 OS Compatibility \u00b6 The operating system compatibility list is defined in the variable: dops_tfsec_platforms Dependencies \u00b6 Ansible Collections: serdigital64.backup bkp_archive serdigital64.system sys_package sys_repository Prerequisites \u00b6 The Ansible engine must be already installed and configured for privileged access and remote execution. In addition the following prerequisites can be automatically solved when running the playbook by setting the role action: resolve_prereq: true Package manager for the target application is installed and enabled. Installation Procedure \u00b6 Manually install Ansible Collections from the Ansible Galaxy repository: ansible-galaxy collection install serdigital64.devops Automatic installation is also available by deploying A:Platform64 Contributing \u00b6 Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details. Author \u00b6 SerDigital64 License \u00b6 GPL-3.0-or-later","title":"dops_tfsec"},{"location":"roles/dops_tfsec/#ansible-role-serdigital64devopsdops_tfsec","text":"","title":"Ansible Role: serdigital64.devops.dops_tfsec"},{"location":"roles/dops_tfsec/#purpose","text":"Manage provisioning of the TFSec tool. Supported features in the current version: Deploy application. Packages are defined in the variable dops_tfsec_profiles . The dops_tfsec Ansible-Role is part of the A:Platform64 project and is available in the devops Ansible-Collection.","title":"Purpose"},{"location":"roles/dops_tfsec/#usage","text":"The following example is an Ansible Playbook that includes all the supported features: use this link if viewing the doc on github --- - name : \"DevOps / TFSec / Usage example\" hosts : \"localhost\" gather_facts : true tasks : - name : \"Example: Install TFSec\" vars : dops_tfsec : resolve_prereq : true deploy : true ansible.builtin.include_role : name : \"serdigital64.devops.dops_tfsec\" ... The playbook can be run by executing: # Set ANSIBLE_COLLECTIONS_PATHS to the default location. Change as needed. ANSIBLE_COLLECTIONS_PATHS = \" ${ HOME } /.ansible/collections\" ansible-playbook \" ${ ANSIBLE_COLLECTIONS_PATHS } /ansible_collections/serdigital64/devops/playbooks/dops_tfsec.yml\"","title":"Usage"},{"location":"roles/dops_tfsec/#role-parameters","text":"","title":"Role Parameters"},{"location":"roles/dops_tfsec/#actions","text":"Use action-parameters to control what tasks are enabled for the role to execute. Parameters should be declared as task level vars as they are intented to be dynamic. dops_tfsec : resolve_prereq : deploy : Parameter Required? Type Default Purpose / Value dops_tfsec.resolve_prereq no boolean false Enable automatic resolution of prequisites dops_tfsec.deploy no boolean false Enable installation of application packages","title":"Actions"},{"location":"roles/dops_tfsec/#end-state","text":"Use end-state parameters to define the target state after role execution. Parameters should be declared in host_vars or group_vars as they are intended to be permanent. dops_tfsec_application : name : type : version : installed : Parameter Required? Type Default Purpose / Value dops_tfsec_application yes(deploy) dictionary Set application package end state dops_tfsec_application.name yes string \"tfsec\" Select application package name dops_tfsec_application.type yes string \"brew\" Select application package type dops_tfsec_application.version yes string \"latest\" Select application package version dops_tfsec_application.installed yes boolean true Set application package end state","title":"End State"},{"location":"roles/dops_tfsec/#deployment","text":"","title":"Deployment"},{"location":"roles/dops_tfsec/#os-compatibility","text":"The operating system compatibility list is defined in the variable: dops_tfsec_platforms","title":"OS Compatibility"},{"location":"roles/dops_tfsec/#dependencies","text":"Ansible Collections: serdigital64.backup bkp_archive serdigital64.system sys_package sys_repository","title":"Dependencies"},{"location":"roles/dops_tfsec/#prerequisites","text":"The Ansible engine must be already installed and configured for privileged access and remote execution. In addition the following prerequisites can be automatically solved when running the playbook by setting the role action: resolve_prereq: true Package manager for the target application is installed and enabled.","title":"Prerequisites"},{"location":"roles/dops_tfsec/#installation-procedure","text":"Manually install Ansible Collections from the Ansible Galaxy repository: ansible-galaxy collection install serdigital64.devops Automatic installation is also available by deploying A:Platform64","title":"Installation Procedure"},{"location":"roles/dops_tfsec/#contributing","text":"Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details.","title":"Contributing"},{"location":"roles/dops_tfsec/#author","text":"SerDigital64","title":"Author"},{"location":"roles/dops_tfsec/#license","text":"GPL-3.0-or-later","title":"License"},{"location":"roles/dops_yamllint/","text":"Ansible Role: serdigital64.devops.dops_yamllint \u00b6 Purpose \u00b6 Manage provisioning of YAML Linter Supported features in the current version: Deploy application. Packages are defined in the variable dops_yamllint_profiles . The dops_yamllint Ansible-Role is part of the A:Platform64 project and is available in the devops Ansible-Collection. Usage \u00b6 The following example is an Ansible Playbook that includes all the supported features: use this link if viewing the doc on github --- - name : \"DevOps / YAMLLint / Usage example\" hosts : \"localhost\" gather_facts : true tasks : - name : \"Example: install\" vars : dops_yamllint : resolve_prereq : true deploy : true ansible.builtin.include_role : name : \"serdigital64.devops.dops_yamllint\" ... The playbook can be run by executing: # Set ANSIBLE_COLLECTIONS_PATHS to the default location. Change as needed. ANSIBLE_COLLECTIONS_PATHS = \" ${ HOME } /.ansible/collections\" ansible-playbook \" ${ ANSIBLE_COLLECTIONS_PATHS } /ansible_collections/serdigital64/devops/playbooks/dops_yamllint.yml\" Role Parameters \u00b6 Actions \u00b6 Use action-parameters to control what tasks are enabled for the role to execute. Parameters should be declared as task level vars as they are intented to be dynamic. dops_yamllint : resolve_prereq : deploy : Parameter Required? Type Default Purpose / Value dops_yamllint.resolve_prereq no boolean false Enable automatic resolution of prequisites dops_yamllint.deploy no boolean false Enable installation of application packages End State \u00b6 Use end-state parameters to define the target state after role execution. Parameters should be declared in host_vars or group_vars as they are intended to be permanent. dops_yamllint_application : name : type : version : installed : dops_yamllint_paths : root : dops_yamllint_owners : app : name : group : home : Parameter Required? Type Default Purpose / Value dops_yamllint_application yes(deploy) dictionary Set application package end state dops_yamllint_application.name yes string \"yamllint\" Select application package name dops_yamllint_application.type yes string \"pip\" Select application package type dops_yamllint_application.version yes string \"latest\" Select application package version dops_yamllint_application.installed yes boolean true Set application package end state dops_yamllint_paths yes(prepare) dictionary Set paths dops_yamllint_paths.root yes string \"/opt/yamllint\" dops_yamllint_owners yes(prepare) dictionary Define users dops_yamllint_owners.app yes dictionary Define directory structure owner dops_yamllint_owners.app.name yes string \"yamllint\" Set login name dops_yamllint_owners.app.group yes string \"yamllint\" Set group name dops_yamllint_owners.app.home yes string \"/home/yamllint\" Set home directory Deployment \u00b6 OS Compatibility \u00b6 The operating system compatibility list is defined in the variable: dops_yamllint_platforms Dependencies \u00b6 Ansible Collections: serdigital64.backup bkp_archive serdigital64.system sys_package sys_repository Prerequisites \u00b6 The Ansible engine must be already installed and configured for privileged access and remote execution. In addition the following prerequisites can be automatically solved when running the playbook by setting the role action: resolve_prereq: true Package manager for the target application is installed and enabled. Installation Procedure \u00b6 Manually install Ansible Collections from the Ansible Galaxy repository: ansible-galaxy collection install serdigital64.devops Automatic installation is also available by deploying A:Platform64 Contributing \u00b6 Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details. Author \u00b6 SerDigital64 License \u00b6 GPL-3.0-or-later","title":"dops_yamllint"},{"location":"roles/dops_yamllint/#ansible-role-serdigital64devopsdops_yamllint","text":"","title":"Ansible Role: serdigital64.devops.dops_yamllint"},{"location":"roles/dops_yamllint/#purpose","text":"Manage provisioning of YAML Linter Supported features in the current version: Deploy application. Packages are defined in the variable dops_yamllint_profiles . The dops_yamllint Ansible-Role is part of the A:Platform64 project and is available in the devops Ansible-Collection.","title":"Purpose"},{"location":"roles/dops_yamllint/#usage","text":"The following example is an Ansible Playbook that includes all the supported features: use this link if viewing the doc on github --- - name : \"DevOps / YAMLLint / Usage example\" hosts : \"localhost\" gather_facts : true tasks : - name : \"Example: install\" vars : dops_yamllint : resolve_prereq : true deploy : true ansible.builtin.include_role : name : \"serdigital64.devops.dops_yamllint\" ... The playbook can be run by executing: # Set ANSIBLE_COLLECTIONS_PATHS to the default location. Change as needed. ANSIBLE_COLLECTIONS_PATHS = \" ${ HOME } /.ansible/collections\" ansible-playbook \" ${ ANSIBLE_COLLECTIONS_PATHS } /ansible_collections/serdigital64/devops/playbooks/dops_yamllint.yml\"","title":"Usage"},{"location":"roles/dops_yamllint/#role-parameters","text":"","title":"Role Parameters"},{"location":"roles/dops_yamllint/#actions","text":"Use action-parameters to control what tasks are enabled for the role to execute. Parameters should be declared as task level vars as they are intented to be dynamic. dops_yamllint : resolve_prereq : deploy : Parameter Required? Type Default Purpose / Value dops_yamllint.resolve_prereq no boolean false Enable automatic resolution of prequisites dops_yamllint.deploy no boolean false Enable installation of application packages","title":"Actions"},{"location":"roles/dops_yamllint/#end-state","text":"Use end-state parameters to define the target state after role execution. Parameters should be declared in host_vars or group_vars as they are intended to be permanent. dops_yamllint_application : name : type : version : installed : dops_yamllint_paths : root : dops_yamllint_owners : app : name : group : home : Parameter Required? Type Default Purpose / Value dops_yamllint_application yes(deploy) dictionary Set application package end state dops_yamllint_application.name yes string \"yamllint\" Select application package name dops_yamllint_application.type yes string \"pip\" Select application package type dops_yamllint_application.version yes string \"latest\" Select application package version dops_yamllint_application.installed yes boolean true Set application package end state dops_yamllint_paths yes(prepare) dictionary Set paths dops_yamllint_paths.root yes string \"/opt/yamllint\" dops_yamllint_owners yes(prepare) dictionary Define users dops_yamllint_owners.app yes dictionary Define directory structure owner dops_yamllint_owners.app.name yes string \"yamllint\" Set login name dops_yamllint_owners.app.group yes string \"yamllint\" Set group name dops_yamllint_owners.app.home yes string \"/home/yamllint\" Set home directory","title":"End State"},{"location":"roles/dops_yamllint/#deployment","text":"","title":"Deployment"},{"location":"roles/dops_yamllint/#os-compatibility","text":"The operating system compatibility list is defined in the variable: dops_yamllint_platforms","title":"OS Compatibility"},{"location":"roles/dops_yamllint/#dependencies","text":"Ansible Collections: serdigital64.backup bkp_archive serdigital64.system sys_package sys_repository","title":"Dependencies"},{"location":"roles/dops_yamllint/#prerequisites","text":"The Ansible engine must be already installed and configured for privileged access and remote execution. In addition the following prerequisites can be automatically solved when running the playbook by setting the role action: resolve_prereq: true Package manager for the target application is installed and enabled.","title":"Prerequisites"},{"location":"roles/dops_yamllint/#installation-procedure","text":"Manually install Ansible Collections from the Ansible Galaxy repository: ansible-galaxy collection install serdigital64.devops Automatic installation is also available by deploying A:Platform64","title":"Installation Procedure"},{"location":"roles/dops_yamllint/#contributing","text":"Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details.","title":"Contributing"},{"location":"roles/dops_yamllint/#author","text":"SerDigital64","title":"Author"},{"location":"roles/dops_yamllint/#license","text":"GPL-3.0-or-later","title":"License"},{"location":"roles/hpv_libvirt_client/","text":"Ansible Role: serdigital64.hypervisor.hpv_libvirt_client \u00b6 Purpose \u00b6 Manage provisioning of LibVirt client. Supported features in the current version: Deploy application. Packages are defined in the variable hpv_libvirt_client_profiles . The hpv_libvirt_client Ansible-Role is part of the A:Platform64 project and is available in the hypervisor Ansible-Collection. Usage \u00b6 The following example is an Ansible Playbook that includes all the supported features: use this link if viewing the doc on github --- - name : \"Hypervisor / LibVirt / Client / Usage example\" hosts : \"localhost\" gather_facts : true tasks : - name : \"Example: Install LibVirt Client\" vars : hpv_libvirt_client : resolve_prereq : true deploy : true ansible.builtin.include_role : name : \"serdigital64.hypervisor.hpv_libvirt_client\" ... The playbook can be run by executing: # Set ANSIBLE_COLLECTIONS_PATHS to the default install location. Change as needed. ANSIBLE_COLLECTIONS_PATHS = \" ${ HOME } /.ansible/collections\" ansible-playbook \" ${ ANSIBLE_COLLECTIONS_PATHS } /ansible_collections/serdigital64/hypervisor/playbooks/hpv_libvirt_client.yml\" Role Parameters \u00b6 Actions \u00b6 Use action-parameters to control what tasks are enabled for the role to execute. Parameters should be declared as task level vars as they are intented to be dynamic. hpv_libvirt_client : resolve_prereq : deploy : Parameter Required? Type Default Purpose / Value hpv_libvirt_client.resolve_prereq no boolean false Enable automatic resolution of prequisites hpv_libvirt_client.deploy no boolean false Enable installation of application packages End State \u00b6 Use end-state parameters to define the target state after role execution. Parameters should be declared in host_vars or group_vars as they are intended to be permanent. hpv_libvirt_client_application : name : type : version : installed : Parameter Required? Type Default Purpose / Value hpv_libvirt_client_application no dictionary Set application package end state hpv_libvirt_client_application.name no string \"libvirt\" Select application package name hpv_libvirt_client_application.type no string \"distro\" Select application package type hpv_libvirt_client_application.version no string \"latest\" Select application package version hpv_libvirt_client_application.installed no boolean true Set application package end state Deployment \u00b6 OS Compatibility \u00b6 The operating system compatibility list is defined in the variable: hpv_libvirt_client_platforms Dependencies \u00b6 Ansible Collections: serdigital64.backup bkp_archive serdigital64.system sys_package sys_repository Prerequisites \u00b6 The Ansible engine must be already installed and configured for privileged access and remote execution. In addition the following prerequisites can be automatically solved when running the playbook by setting the role action: resolve_prereq: true Package manager for the target application is installed and enabled. Installation Procedure \u00b6 Manually install Ansible Collections from the Ansible Galaxy repository: ansible-galaxy collection install --upgrade serdigital64.hypervisor Automatic installation is also available by deploying A:Platform64 Contributing \u00b6 Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details. Author \u00b6 SerDigital64 License \u00b6 GPL-3.0-or-later","title":"hpv_libvirt_client"},{"location":"roles/hpv_libvirt_client/#ansible-role-serdigital64hypervisorhpv_libvirt_client","text":"","title":"Ansible Role: serdigital64.hypervisor.hpv_libvirt_client"},{"location":"roles/hpv_libvirt_client/#purpose","text":"Manage provisioning of LibVirt client. Supported features in the current version: Deploy application. Packages are defined in the variable hpv_libvirt_client_profiles . The hpv_libvirt_client Ansible-Role is part of the A:Platform64 project and is available in the hypervisor Ansible-Collection.","title":"Purpose"},{"location":"roles/hpv_libvirt_client/#usage","text":"The following example is an Ansible Playbook that includes all the supported features: use this link if viewing the doc on github --- - name : \"Hypervisor / LibVirt / Client / Usage example\" hosts : \"localhost\" gather_facts : true tasks : - name : \"Example: Install LibVirt Client\" vars : hpv_libvirt_client : resolve_prereq : true deploy : true ansible.builtin.include_role : name : \"serdigital64.hypervisor.hpv_libvirt_client\" ... The playbook can be run by executing: # Set ANSIBLE_COLLECTIONS_PATHS to the default install location. Change as needed. ANSIBLE_COLLECTIONS_PATHS = \" ${ HOME } /.ansible/collections\" ansible-playbook \" ${ ANSIBLE_COLLECTIONS_PATHS } /ansible_collections/serdigital64/hypervisor/playbooks/hpv_libvirt_client.yml\"","title":"Usage"},{"location":"roles/hpv_libvirt_client/#role-parameters","text":"","title":"Role Parameters"},{"location":"roles/hpv_libvirt_client/#actions","text":"Use action-parameters to control what tasks are enabled for the role to execute. Parameters should be declared as task level vars as they are intented to be dynamic. hpv_libvirt_client : resolve_prereq : deploy : Parameter Required? Type Default Purpose / Value hpv_libvirt_client.resolve_prereq no boolean false Enable automatic resolution of prequisites hpv_libvirt_client.deploy no boolean false Enable installation of application packages","title":"Actions"},{"location":"roles/hpv_libvirt_client/#end-state","text":"Use end-state parameters to define the target state after role execution. Parameters should be declared in host_vars or group_vars as they are intended to be permanent. hpv_libvirt_client_application : name : type : version : installed : Parameter Required? Type Default Purpose / Value hpv_libvirt_client_application no dictionary Set application package end state hpv_libvirt_client_application.name no string \"libvirt\" Select application package name hpv_libvirt_client_application.type no string \"distro\" Select application package type hpv_libvirt_client_application.version no string \"latest\" Select application package version hpv_libvirt_client_application.installed no boolean true Set application package end state","title":"End State"},{"location":"roles/hpv_libvirt_client/#deployment","text":"","title":"Deployment"},{"location":"roles/hpv_libvirt_client/#os-compatibility","text":"The operating system compatibility list is defined in the variable: hpv_libvirt_client_platforms","title":"OS Compatibility"},{"location":"roles/hpv_libvirt_client/#dependencies","text":"Ansible Collections: serdigital64.backup bkp_archive serdigital64.system sys_package sys_repository","title":"Dependencies"},{"location":"roles/hpv_libvirt_client/#prerequisites","text":"The Ansible engine must be already installed and configured for privileged access and remote execution. In addition the following prerequisites can be automatically solved when running the playbook by setting the role action: resolve_prereq: true Package manager for the target application is installed and enabled.","title":"Prerequisites"},{"location":"roles/hpv_libvirt_client/#installation-procedure","text":"Manually install Ansible Collections from the Ansible Galaxy repository: ansible-galaxy collection install --upgrade serdigital64.hypervisor Automatic installation is also available by deploying A:Platform64","title":"Installation Procedure"},{"location":"roles/hpv_libvirt_client/#contributing","text":"Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details.","title":"Contributing"},{"location":"roles/hpv_libvirt_client/#author","text":"SerDigital64","title":"Author"},{"location":"roles/hpv_libvirt_client/#license","text":"GPL-3.0-or-later","title":"License"},{"location":"roles/hpv_libvirt_server/","text":"Ansible Role: serdigital64.hypervisor.hpv_libvirt_server \u00b6 Purpose \u00b6 Manage provisioning of LibVirt server Supported features in the current version: Prepare environment for application deployment. Deploy application. Packages are defined in the variable hpv_libvirt_server_profiles . Control application subsystem services. Services are defined in the variable hpv_libvirt_server_subsystem_profile . Configure application. Configure application subsystem server. The hpv_libvirt_server Ansible-Role is part of the A:Platform64 project and is available in the hypervisor Ansible-Collection. Usage \u00b6 The following example is an Ansible Playbook that includes all the supported features: use this link if viewing the doc on github --- - name : \"Hypervisor / LibVirt / Server / Usage example\" hosts : \"localhost\" gather_facts : true tasks : - name : \"Example: Install, setup and start LibVirt server\" vars : hpv_libvirt_server : resolve_prereq : true prepare : true deploy : true setup : true control : true hpv_libvirt_server_subsystem : enabled : true status : \"started\" hpv_libvirt_server_server_options : tcp_access : enabled : true port : \"16509\" listen : \"127.0.0.1\" cleartext : false qemu : security_driver : false ansible.builtin.include_role : name : \"serdigital64.hypervisor.hpv_libvirt_server\" ... The playbook can be run by executing: # Set ANSIBLE_COLLECTIONS_PATHS to the default install location. Change as needed. ANSIBLE_COLLECTIONS_PATHS = \" ${ HOME } /.ansible/collections\" ansible-playbook \" ${ ANSIBLE_COLLECTIONS_PATHS } /ansible_collections/serdigital64/hypervisor/playbooks/hpv_libvirt_server.yml\" Role Parameters \u00b6 Actions \u00b6 Use action-parameters to control what tasks are enabled for the role to execute. Parameters should be declared as task level vars as they are intented to be dynamic. hpv_libvirt_server : resolve_prereq : prepare : deploy : setup : control : Parameter Required? Type Default Purpose / Value hpv_libvirt_server.resolve_prereq no boolean false Enable automatic resolution of prequisites hpv_libvirt_server.prepare no boolean false Enable environment preparation hpv_libvirt_server.deploy no boolean false Enable installation of application packages hpv_libvirt_server.setup no boolean false Enable application configuration hpv_libvirt_server.control no boolean false Enable application subsystem service control End State \u00b6 Use end-state parameters to define the target state after role execution. Parameters should be declared in host_vars or group_vars as they are intended to be permanent. hpv_libvirt_server_application : name : type : version : installed : hpv_libvirt_server_subsystem : enabled : status : hpv_libvirt_server_server_options : tcp_access : enabled : port : listen : cleartext : qemu : security_driver : Parameter Required? Type Default Purpose / Value hpv_libvirt_server_application no dictionary Set application package end state hpv_libvirt_server_application.name no string \"libvirt_server\" Select application package name hpv_libvirt_server_application.type no string \"distro\" Select application package type hpv_libvirt_server_application.version no string \"latest\" Select application package version hpv_libvirt_server_application.installed no boolean true Set application package end state hpv_libvirt_server_subsystem no dictionary Set application subsystem end state hpv_libvirt_server_subsystem.enabled no boolean false Enable the subsystem? hpv_libvirt_server_subsystem.status no string \"stopped\" Set the service state hpv_libvirt_server_server_options no dictionary Set subsystem server options hpv_libvirt_server_server_options.tcp_access no dictionary Define remote management access hpv_libvirt_server_server_options.tcp_access.enabled no boolean false Enable remote access? hpv_libvirt_server_server_options.tcp_access.port no string \"16509\" Set remote access port hpv_libvirt_server_server_options.tcp_access.listen no string \"127.0.0.1\" Set listen IPv4 address hpv_libvirt_server_server_options.tcp_access.cleartext no boolean false Allow cleartext ? hpv_libvirt_server_server_options.qemu no dictionary Configure qemu driver hpv_libvirt_server_server_options.qemu.security_driver no boolean false Enable platform specific security driver? Deployment \u00b6 OS Compatibility \u00b6 The operating system compatibility list is defined in the variable: hpv_libvirt_server_platforms Dependencies \u00b6 Ansible Collections: serdigital64.backup bkp_archive serdigital64.system sys_package sys_repository Prerequisites \u00b6 The Ansible engine must be already installed and configured for privileged access and remote execution. In addition the following prerequisites can be automatically solved when running the playbook by setting the role action: resolve_prereq: true Package manager for the target application is installed and enabled. Installation Procedure \u00b6 Manually install Ansible Collections from the Ansible Galaxy repository: ansible-galaxy collection install --upgrade serdigital64.hypervisor Automatic installation is also available by deploying A:Platform64 Contributing \u00b6 Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details. Author \u00b6 SerDigital64 License \u00b6 GPL-3.0-or-later","title":"hpv_libvirt_server"},{"location":"roles/hpv_libvirt_server/#ansible-role-serdigital64hypervisorhpv_libvirt_server","text":"","title":"Ansible Role: serdigital64.hypervisor.hpv_libvirt_server"},{"location":"roles/hpv_libvirt_server/#purpose","text":"Manage provisioning of LibVirt server Supported features in the current version: Prepare environment for application deployment. Deploy application. Packages are defined in the variable hpv_libvirt_server_profiles . Control application subsystem services. Services are defined in the variable hpv_libvirt_server_subsystem_profile . Configure application. Configure application subsystem server. The hpv_libvirt_server Ansible-Role is part of the A:Platform64 project and is available in the hypervisor Ansible-Collection.","title":"Purpose"},{"location":"roles/hpv_libvirt_server/#usage","text":"The following example is an Ansible Playbook that includes all the supported features: use this link if viewing the doc on github --- - name : \"Hypervisor / LibVirt / Server / Usage example\" hosts : \"localhost\" gather_facts : true tasks : - name : \"Example: Install, setup and start LibVirt server\" vars : hpv_libvirt_server : resolve_prereq : true prepare : true deploy : true setup : true control : true hpv_libvirt_server_subsystem : enabled : true status : \"started\" hpv_libvirt_server_server_options : tcp_access : enabled : true port : \"16509\" listen : \"127.0.0.1\" cleartext : false qemu : security_driver : false ansible.builtin.include_role : name : \"serdigital64.hypervisor.hpv_libvirt_server\" ... The playbook can be run by executing: # Set ANSIBLE_COLLECTIONS_PATHS to the default install location. Change as needed. ANSIBLE_COLLECTIONS_PATHS = \" ${ HOME } /.ansible/collections\" ansible-playbook \" ${ ANSIBLE_COLLECTIONS_PATHS } /ansible_collections/serdigital64/hypervisor/playbooks/hpv_libvirt_server.yml\"","title":"Usage"},{"location":"roles/hpv_libvirt_server/#role-parameters","text":"","title":"Role Parameters"},{"location":"roles/hpv_libvirt_server/#actions","text":"Use action-parameters to control what tasks are enabled for the role to execute. Parameters should be declared as task level vars as they are intented to be dynamic. hpv_libvirt_server : resolve_prereq : prepare : deploy : setup : control : Parameter Required? Type Default Purpose / Value hpv_libvirt_server.resolve_prereq no boolean false Enable automatic resolution of prequisites hpv_libvirt_server.prepare no boolean false Enable environment preparation hpv_libvirt_server.deploy no boolean false Enable installation of application packages hpv_libvirt_server.setup no boolean false Enable application configuration hpv_libvirt_server.control no boolean false Enable application subsystem service control","title":"Actions"},{"location":"roles/hpv_libvirt_server/#end-state","text":"Use end-state parameters to define the target state after role execution. Parameters should be declared in host_vars or group_vars as they are intended to be permanent. hpv_libvirt_server_application : name : type : version : installed : hpv_libvirt_server_subsystem : enabled : status : hpv_libvirt_server_server_options : tcp_access : enabled : port : listen : cleartext : qemu : security_driver : Parameter Required? Type Default Purpose / Value hpv_libvirt_server_application no dictionary Set application package end state hpv_libvirt_server_application.name no string \"libvirt_server\" Select application package name hpv_libvirt_server_application.type no string \"distro\" Select application package type hpv_libvirt_server_application.version no string \"latest\" Select application package version hpv_libvirt_server_application.installed no boolean true Set application package end state hpv_libvirt_server_subsystem no dictionary Set application subsystem end state hpv_libvirt_server_subsystem.enabled no boolean false Enable the subsystem? hpv_libvirt_server_subsystem.status no string \"stopped\" Set the service state hpv_libvirt_server_server_options no dictionary Set subsystem server options hpv_libvirt_server_server_options.tcp_access no dictionary Define remote management access hpv_libvirt_server_server_options.tcp_access.enabled no boolean false Enable remote access? hpv_libvirt_server_server_options.tcp_access.port no string \"16509\" Set remote access port hpv_libvirt_server_server_options.tcp_access.listen no string \"127.0.0.1\" Set listen IPv4 address hpv_libvirt_server_server_options.tcp_access.cleartext no boolean false Allow cleartext ? hpv_libvirt_server_server_options.qemu no dictionary Configure qemu driver hpv_libvirt_server_server_options.qemu.security_driver no boolean false Enable platform specific security driver?","title":"End State"},{"location":"roles/hpv_libvirt_server/#deployment","text":"","title":"Deployment"},{"location":"roles/hpv_libvirt_server/#os-compatibility","text":"The operating system compatibility list is defined in the variable: hpv_libvirt_server_platforms","title":"OS Compatibility"},{"location":"roles/hpv_libvirt_server/#dependencies","text":"Ansible Collections: serdigital64.backup bkp_archive serdigital64.system sys_package sys_repository","title":"Dependencies"},{"location":"roles/hpv_libvirt_server/#prerequisites","text":"The Ansible engine must be already installed and configured for privileged access and remote execution. In addition the following prerequisites can be automatically solved when running the playbook by setting the role action: resolve_prereq: true Package manager for the target application is installed and enabled.","title":"Prerequisites"},{"location":"roles/hpv_libvirt_server/#installation-procedure","text":"Manually install Ansible Collections from the Ansible Galaxy repository: ansible-galaxy collection install --upgrade serdigital64.hypervisor Automatic installation is also available by deploying A:Platform64","title":"Installation Procedure"},{"location":"roles/hpv_libvirt_server/#contributing","text":"Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details.","title":"Contributing"},{"location":"roles/hpv_libvirt_server/#author","text":"SerDigital64","title":"Author"},{"location":"roles/hpv_libvirt_server/#license","text":"GPL-3.0-or-later","title":"License"},{"location":"roles/hw_gpu_amd/","text":"Ansible Role: serdigital64.hardware.hw_gpu_amd \u00b6 Purpose \u00b6 Manage provisioning of AMD GPU drivers. Supported features in the current version: Deploy headless drivers with OpenCL support. Packages are defined in the variable hw_gpu_amd_profiles . Download and open only. For now the install process is manual to avoid kernel level failures The hw_gpu_amd Ansible-Role is part of the A:Platform64 project and is available in the hardware Ansible-Collection. Usage \u00b6 The following example is an Ansible Playbook that includes all the supported features: use this link if viewing the doc on github --- - name : \"Hardware / GPU / AMD / Usage example\" hosts : \"localhost\" gather_facts : true tasks : - name : \"Example: Install AMD GPU drivers\" vars : hw_gpu_amd : resolve_prereq : true deploy : true ansible.builtin.include_role : name : \"serdigital64.hardware.hw_gpu_amd\" ... The playbook can be run by executing: # Set ANSIBLE_COLLECTIONS_PATHS to the default install location. Change as needed. ANSIBLE_COLLECTIONS_PATHS = \" ${ HOME } /.ansible/collections\" ansible-playbook \" ${ ANSIBLE_COLLECTIONS_PATHS } /ansible_collections/serdigital64/hardware/playbooks/hw_gpu_amd.yml\" Role Parameters \u00b6 Actions \u00b6 Use action-parameters to control what tasks are enabled for the role to execute. Parameters should be declared as task level vars as they are intented to be dynamic. hw_gpu_amd : resolve_prereq : deploy : Parameter Required? Type Default Purpose / Value hw_gpu_amd.resolve_prereq no boolean false Enable automatic resolution of prequisites hw_gpu_amd.deploy no boolean false Enable installation of application packages End State \u00b6 Use end-state parameters to define the target state after role execution. Parameters should be declared in host_vars or group_vars as they are intended to be permanent. hw_gpu_amd_application : name : type : version : installed : Parameter Required? Type Default Purpose / Value hw_gpu_amd_application no dictionary Set application package end state hw_gpu_amd_application.name no string \"amdgpu\" Select application package name hw_gpu_amd_application.type no string \"binary\" Select application package type hw_gpu_amd_application.version no string \"v21_30\" Select application package version hw_gpu_amd_application.installed no boolean true Set application package end state Deployment \u00b6 OS Compatibility \u00b6 The operating system compatibility list is defined in the variable: hw_gpu_amd_platforms Dependencies \u00b6 Ansible Collections: serdigital64.backup bkp_archive serdigital64.system sys_package sys_repository Prerequisites \u00b6 The Ansible engine must be already installed and configured for privileged access and remote execution. In addition the following prerequisites can be automatically solved when running the playbook by setting the role action: resolve_prereq: true Package manager for the target application is installed and enabled. Installation Procedure \u00b6 Manually install Ansible Collections from the Ansible Galaxy repository: ansible-galaxy collection install --upgrade serdigital64.hardware Automatic installation is also available by deploying A:Platform64 Contributing \u00b6 Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details. Author \u00b6 SerDigital64 License \u00b6 GPL-3.0-or-later","title":"hw_gpu_amd"},{"location":"roles/hw_gpu_amd/#ansible-role-serdigital64hardwarehw_gpu_amd","text":"","title":"Ansible Role: serdigital64.hardware.hw_gpu_amd"},{"location":"roles/hw_gpu_amd/#purpose","text":"Manage provisioning of AMD GPU drivers. Supported features in the current version: Deploy headless drivers with OpenCL support. Packages are defined in the variable hw_gpu_amd_profiles . Download and open only. For now the install process is manual to avoid kernel level failures The hw_gpu_amd Ansible-Role is part of the A:Platform64 project and is available in the hardware Ansible-Collection.","title":"Purpose"},{"location":"roles/hw_gpu_amd/#usage","text":"The following example is an Ansible Playbook that includes all the supported features: use this link if viewing the doc on github --- - name : \"Hardware / GPU / AMD / Usage example\" hosts : \"localhost\" gather_facts : true tasks : - name : \"Example: Install AMD GPU drivers\" vars : hw_gpu_amd : resolve_prereq : true deploy : true ansible.builtin.include_role : name : \"serdigital64.hardware.hw_gpu_amd\" ... The playbook can be run by executing: # Set ANSIBLE_COLLECTIONS_PATHS to the default install location. Change as needed. ANSIBLE_COLLECTIONS_PATHS = \" ${ HOME } /.ansible/collections\" ansible-playbook \" ${ ANSIBLE_COLLECTIONS_PATHS } /ansible_collections/serdigital64/hardware/playbooks/hw_gpu_amd.yml\"","title":"Usage"},{"location":"roles/hw_gpu_amd/#role-parameters","text":"","title":"Role Parameters"},{"location":"roles/hw_gpu_amd/#actions","text":"Use action-parameters to control what tasks are enabled for the role to execute. Parameters should be declared as task level vars as they are intented to be dynamic. hw_gpu_amd : resolve_prereq : deploy : Parameter Required? Type Default Purpose / Value hw_gpu_amd.resolve_prereq no boolean false Enable automatic resolution of prequisites hw_gpu_amd.deploy no boolean false Enable installation of application packages","title":"Actions"},{"location":"roles/hw_gpu_amd/#end-state","text":"Use end-state parameters to define the target state after role execution. Parameters should be declared in host_vars or group_vars as they are intended to be permanent. hw_gpu_amd_application : name : type : version : installed : Parameter Required? Type Default Purpose / Value hw_gpu_amd_application no dictionary Set application package end state hw_gpu_amd_application.name no string \"amdgpu\" Select application package name hw_gpu_amd_application.type no string \"binary\" Select application package type hw_gpu_amd_application.version no string \"v21_30\" Select application package version hw_gpu_amd_application.installed no boolean true Set application package end state","title":"End State"},{"location":"roles/hw_gpu_amd/#deployment","text":"","title":"Deployment"},{"location":"roles/hw_gpu_amd/#os-compatibility","text":"The operating system compatibility list is defined in the variable: hw_gpu_amd_platforms","title":"OS Compatibility"},{"location":"roles/hw_gpu_amd/#dependencies","text":"Ansible Collections: serdigital64.backup bkp_archive serdigital64.system sys_package sys_repository","title":"Dependencies"},{"location":"roles/hw_gpu_amd/#prerequisites","text":"The Ansible engine must be already installed and configured for privileged access and remote execution. In addition the following prerequisites can be automatically solved when running the playbook by setting the role action: resolve_prereq: true Package manager for the target application is installed and enabled.","title":"Prerequisites"},{"location":"roles/hw_gpu_amd/#installation-procedure","text":"Manually install Ansible Collections from the Ansible Galaxy repository: ansible-galaxy collection install --upgrade serdigital64.hardware Automatic installation is also available by deploying A:Platform64","title":"Installation Procedure"},{"location":"roles/hw_gpu_amd/#contributing","text":"Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details.","title":"Contributing"},{"location":"roles/hw_gpu_amd/#author","text":"SerDigital64","title":"Author"},{"location":"roles/hw_gpu_amd/#license","text":"GPL-3.0-or-later","title":"License"},{"location":"roles/infra_helm/","text":"Ansible Role: serdigital64.infrastructure.infra_helm \u00b6 Purpose \u00b6 Manage provisioning of Helm CLI. Supported features in the current version: Prepare environment for application deployment. Deploy application. Packages are defined in the variable infra_helm_profiles . The infra_helm Ansible-Role is part of the A:Platform64 project and is available in the infrastructure Ansible-Collection. Usage \u00b6 The following example is an Ansible Playbook that includes all the supported features: use this link if viewing the doc on github --- - name : \"Infrastructure / Helm / Usage example\" hosts : \"localhost\" gather_facts : true tasks : - name : \"Example: Install Helm\" vars : infra_helm : resolve_prereq : true deploy : true ansible.builtin.include_role : name : \"serdigital64.infrastructure.infra_helm\" ... The playbook can be run by executing: # Set ANSIBLE_COLLECTIONS_PATHS to the default location. Change as needed. ANSIBLE_COLLECTIONS_PATHS = \" ${ HOME } /.ansible/collections\" ansible-playbook \" ${ ANSIBLE_COLLECTIONS_PATHS } /ansible_collections/serdigital64/infrastructure/playbooks/infra_helm.yml\" Role Parameters \u00b6 Actions \u00b6 Use action-parameters to control what tasks are enabled for the role to execute. Parameters should be declared as task level vars as they are intented to be dynamic. infra_helm : resolve_prereq : prepare : deploy : Parameter Required? Type Default Purpose / Value infra_helm.resolve_prereq no boolean false Enable automatic resolution of prequisites infra_helm.prepare no boolean false Enable environment preparation infra_helm.deploy no boolean false Enable installation of application packages End State \u00b6 Use end-state parameters to define the target state after role execution. Parameters should be declared in host_vars or group_vars as they are intended to be permanent. infra_helm_application : name : type : version : installed : infra_helm_paths : root : infra_helm_owners : root : name : group : Parameter Required? Type Default Purpose / Value infra_helm_application yes(deploy) dictionary Set application package end state infra_helm_application.name yes string \"helm\" Select application package name infra_helm_application.type yes string \"binary\" Select application package type infra_helm_application.version yes string \"latest\" Select application package version infra_helm_application.installed yes boolean true Set application package end state infra_helm_paths yes(prepare) dictionary Set paths infra_helm_paths.root yes string \"/opt/helm\" infra_helm_owners yes(prepare) dictionary Define users infra_helm_owners.root yes dictionary Define directory structure owner infra_helm_owners.root.name yes string \"helm\" Set login name infra_helm_owners.root.group yes string \"helm\" Set group name Deployment \u00b6 OS Compatibility \u00b6 The operating system compatibility list is defined in the variable: infra_helm_platforms Dependencies \u00b6 Ansible Collections: serdigital64.backup bkp_archive serdigital64.system sys_package sys_repository sys_user Prerequisites \u00b6 The Ansible engine must be already installed and configured for privileged access and remote execution. In addition the following prerequisites can be automatically solved when running the playbook by setting the role action: resolve_prereq: true Package manager for the target application is installed and enabled. Installation Procedure \u00b6 Manually install Ansible Collections from the Ansible Galaxy repository: ansible-galaxy collection install serdigital64.infrastructure Automatic installation is also available by deploying A:Platform64 Contributing \u00b6 Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details. Author \u00b6 SerDigital64 License \u00b6 GPL-3.0-or-later","title":"infra_helm"},{"location":"roles/infra_helm/#ansible-role-serdigital64infrastructureinfra_helm","text":"","title":"Ansible Role: serdigital64.infrastructure.infra_helm"},{"location":"roles/infra_helm/#purpose","text":"Manage provisioning of Helm CLI. Supported features in the current version: Prepare environment for application deployment. Deploy application. Packages are defined in the variable infra_helm_profiles . The infra_helm Ansible-Role is part of the A:Platform64 project and is available in the infrastructure Ansible-Collection.","title":"Purpose"},{"location":"roles/infra_helm/#usage","text":"The following example is an Ansible Playbook that includes all the supported features: use this link if viewing the doc on github --- - name : \"Infrastructure / Helm / Usage example\" hosts : \"localhost\" gather_facts : true tasks : - name : \"Example: Install Helm\" vars : infra_helm : resolve_prereq : true deploy : true ansible.builtin.include_role : name : \"serdigital64.infrastructure.infra_helm\" ... The playbook can be run by executing: # Set ANSIBLE_COLLECTIONS_PATHS to the default location. Change as needed. ANSIBLE_COLLECTIONS_PATHS = \" ${ HOME } /.ansible/collections\" ansible-playbook \" ${ ANSIBLE_COLLECTIONS_PATHS } /ansible_collections/serdigital64/infrastructure/playbooks/infra_helm.yml\"","title":"Usage"},{"location":"roles/infra_helm/#role-parameters","text":"","title":"Role Parameters"},{"location":"roles/infra_helm/#actions","text":"Use action-parameters to control what tasks are enabled for the role to execute. Parameters should be declared as task level vars as they are intented to be dynamic. infra_helm : resolve_prereq : prepare : deploy : Parameter Required? Type Default Purpose / Value infra_helm.resolve_prereq no boolean false Enable automatic resolution of prequisites infra_helm.prepare no boolean false Enable environment preparation infra_helm.deploy no boolean false Enable installation of application packages","title":"Actions"},{"location":"roles/infra_helm/#end-state","text":"Use end-state parameters to define the target state after role execution. Parameters should be declared in host_vars or group_vars as they are intended to be permanent. infra_helm_application : name : type : version : installed : infra_helm_paths : root : infra_helm_owners : root : name : group : Parameter Required? Type Default Purpose / Value infra_helm_application yes(deploy) dictionary Set application package end state infra_helm_application.name yes string \"helm\" Select application package name infra_helm_application.type yes string \"binary\" Select application package type infra_helm_application.version yes string \"latest\" Select application package version infra_helm_application.installed yes boolean true Set application package end state infra_helm_paths yes(prepare) dictionary Set paths infra_helm_paths.root yes string \"/opt/helm\" infra_helm_owners yes(prepare) dictionary Define users infra_helm_owners.root yes dictionary Define directory structure owner infra_helm_owners.root.name yes string \"helm\" Set login name infra_helm_owners.root.group yes string \"helm\" Set group name","title":"End State"},{"location":"roles/infra_helm/#deployment","text":"","title":"Deployment"},{"location":"roles/infra_helm/#os-compatibility","text":"The operating system compatibility list is defined in the variable: infra_helm_platforms","title":"OS Compatibility"},{"location":"roles/infra_helm/#dependencies","text":"Ansible Collections: serdigital64.backup bkp_archive serdigital64.system sys_package sys_repository sys_user","title":"Dependencies"},{"location":"roles/infra_helm/#prerequisites","text":"The Ansible engine must be already installed and configured for privileged access and remote execution. In addition the following prerequisites can be automatically solved when running the playbook by setting the role action: resolve_prereq: true Package manager for the target application is installed and enabled.","title":"Prerequisites"},{"location":"roles/infra_helm/#installation-procedure","text":"Manually install Ansible Collections from the Ansible Galaxy repository: ansible-galaxy collection install serdigital64.infrastructure Automatic installation is also available by deploying A:Platform64","title":"Installation Procedure"},{"location":"roles/infra_helm/#contributing","text":"Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details.","title":"Contributing"},{"location":"roles/infra_helm/#author","text":"SerDigital64","title":"Author"},{"location":"roles/infra_helm/#license","text":"GPL-3.0-or-later","title":"License"},{"location":"roles/infra_terraform/","text":"Ansible Role: serdigital64.infrastructure.infra_terraform \u00b6 Purpose \u00b6 Manage provisioning of the Terraform tool. Supported features in the current version: Create directory structure for persistent and ephemeral data Deploy application. Packages are defined in the variable infra_terraform_profiles . Create initial configuration Create repositories for projects Provision projects (copy from source to state directory) Run terraform against projects The module provides a directory structure for facilitating the usage of infrastructure-as-code with source-code-management tools: Separates ephemeral from persistent data /opt/terraform/ /var/opt/terraform/ Implements the usage of projects: repository for storing terraform scripts: /opt/terraform/src/<PROJECT> : terraform source scripts /var/opt/terraform/states/<PROJECT> : working directory where terraform is run (state, logs, etc.) The infra_terraform Ansible-Role is part of the A:Platform64 project and is available in the infrastructure Ansible-Collection. Usage \u00b6 The following example is an Ansible Playbook that includes all the supported features: use this link if viewing the doc on github --- - name : \"Infrastructure / Terraform / Usage example\" hosts : \"localhost\" gather_facts : true tasks : - name : \"Example: Install Terraform, create dedicated user, create default project repositories\" vars : infra_terraform : resolve_prereq : true prepare : true deploy : true setup : true provision : true infra_terraform_projects : - name : \"default\" infra_terraform_paths : root : \"/opt/terraform\" etc : \"/opt/terraform/etc\" src : \"/opt/terraform/src\" var : \"/var/opt/terraform\" infra_terraform_users : terraform : name : \"terraform\" group : \"terraform\" home : \"/home/terraform\" ansible.builtin.include_role : name : \"serdigital64.infrastructure.infra_terraform\" ... The playbook can be run by executing: # Set ANSIBLE_COLLECTIONS_PATHS to the default install location. Change as needed. ANSIBLE_COLLECTIONS_PATHS = \" ${ HOME } /.ansible/collections\" ansible-playbook \" ${ ANSIBLE_COLLECTIONS_PATHS } /ansible_collections/serdigital64/infrastructure/playbooks/infra_terraform.yml\" Role Parameters \u00b6 Actions \u00b6 Use action-parameters to control what tasks are enabled for the role to execute. Parameters should be declared as task level vars as they are intented to be dynamic. infra_terraform : resolve_prereq : prepare : deploy : setup : control : provision : Parameter Required? Type Default Purpose / Value infra_terraform.resolve_prereq no boolean false Enable automatic resolution of prequisites infra_terraform.prepare no boolean false Enable environment preparation infra_terraform.deploy no boolean false Enable installation of application packages infra_terraform.setup no boolean false Enable application configuration infra_terraform.control no boolean false Enable application subsystem service control infra_terraform.provision no boolean false Enable provisioning of application components End State \u00b6 Use end-state parameters to define the target state after role execution. Parameters should be declared in host_vars or group_vars as they are intended to be permanent. infra_terraform_application : name : type : version : installed : infra_terraform_paths : root : etc : src : var : infra_terraform_users : terraform : name : group : home : infra_terraform_projects : - name : Parameter Required? Type Default Purpose / Value infra_terraform_application no dictionary Set application package end state infra_terraform_application.name no string \"terraform\" Select application package name infra_terraform_application.type no string \"distro\" Select application package type infra_terraform_application.version no string \"latest\" Select application package version infra_terraform_application.installed no boolean true Set application package end state infra_terraform_paths yes dictionary Set directory structure infra_terraform_paths.root yes string \"/opt/terraform\" Base path for persistent data infra_terraform_paths.etc yes string \"/opt/terraform/etc\" Base path for configuration data infra_terraform_paths.src yes string \"/opt/terraform/src\" Base path for project's source code infra_terraform_paths.var yes string \"/var/opt/terraform\" Base path for ephemeral data infra_terraform_users yes dictionary Define users infra_terraform_users.terraform yes dictionary Define directory structure owner infra_terraform_users.terraform.name yes string \"terraform\" Set login name infra_terraform_users.terraform.group yes string \"terraform\" Set group name infra_terraform_users.terraform.home yes string \"/home/terraform\" Set home directory infra_terraform_projects yes(provision) list Define projects infra_terraform_projects.0.name yes(provision) string \"default\" Project name Deployment \u00b6 OS Compatibility \u00b6 The operating system compatibility list is defined in the variable: infra_terraform_platforms Dependencies \u00b6 Ansible Collections: serdigital64.backup bkp_archive serdigital64.system sys_package sys_repository sys_user Prerequisites \u00b6 The Ansible engine must be already installed and configured for privileged access and remote execution. In addition the following prerequisites can be automatically solved when running the playbook by setting the role action: resolve_prereq: true Package manager for the target application is installed and enabled. Installation Procedure \u00b6 Manually install Ansible Collections from the Ansible Galaxy repository: ansible-galaxy collection install --upgrade serdigital64.infrastructure Automatic installation is also available by deploying A:Platform64 Contributing \u00b6 Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details. Author \u00b6 SerDigital64 License \u00b6 GPL-3.0-or-later","title":"infra_terraform"},{"location":"roles/infra_terraform/#ansible-role-serdigital64infrastructureinfra_terraform","text":"","title":"Ansible Role: serdigital64.infrastructure.infra_terraform"},{"location":"roles/infra_terraform/#purpose","text":"Manage provisioning of the Terraform tool. Supported features in the current version: Create directory structure for persistent and ephemeral data Deploy application. Packages are defined in the variable infra_terraform_profiles . Create initial configuration Create repositories for projects Provision projects (copy from source to state directory) Run terraform against projects The module provides a directory structure for facilitating the usage of infrastructure-as-code with source-code-management tools: Separates ephemeral from persistent data /opt/terraform/ /var/opt/terraform/ Implements the usage of projects: repository for storing terraform scripts: /opt/terraform/src/<PROJECT> : terraform source scripts /var/opt/terraform/states/<PROJECT> : working directory where terraform is run (state, logs, etc.) The infra_terraform Ansible-Role is part of the A:Platform64 project and is available in the infrastructure Ansible-Collection.","title":"Purpose"},{"location":"roles/infra_terraform/#usage","text":"The following example is an Ansible Playbook that includes all the supported features: use this link if viewing the doc on github --- - name : \"Infrastructure / Terraform / Usage example\" hosts : \"localhost\" gather_facts : true tasks : - name : \"Example: Install Terraform, create dedicated user, create default project repositories\" vars : infra_terraform : resolve_prereq : true prepare : true deploy : true setup : true provision : true infra_terraform_projects : - name : \"default\" infra_terraform_paths : root : \"/opt/terraform\" etc : \"/opt/terraform/etc\" src : \"/opt/terraform/src\" var : \"/var/opt/terraform\" infra_terraform_users : terraform : name : \"terraform\" group : \"terraform\" home : \"/home/terraform\" ansible.builtin.include_role : name : \"serdigital64.infrastructure.infra_terraform\" ... The playbook can be run by executing: # Set ANSIBLE_COLLECTIONS_PATHS to the default install location. Change as needed. ANSIBLE_COLLECTIONS_PATHS = \" ${ HOME } /.ansible/collections\" ansible-playbook \" ${ ANSIBLE_COLLECTIONS_PATHS } /ansible_collections/serdigital64/infrastructure/playbooks/infra_terraform.yml\"","title":"Usage"},{"location":"roles/infra_terraform/#role-parameters","text":"","title":"Role Parameters"},{"location":"roles/infra_terraform/#actions","text":"Use action-parameters to control what tasks are enabled for the role to execute. Parameters should be declared as task level vars as they are intented to be dynamic. infra_terraform : resolve_prereq : prepare : deploy : setup : control : provision : Parameter Required? Type Default Purpose / Value infra_terraform.resolve_prereq no boolean false Enable automatic resolution of prequisites infra_terraform.prepare no boolean false Enable environment preparation infra_terraform.deploy no boolean false Enable installation of application packages infra_terraform.setup no boolean false Enable application configuration infra_terraform.control no boolean false Enable application subsystem service control infra_terraform.provision no boolean false Enable provisioning of application components","title":"Actions"},{"location":"roles/infra_terraform/#end-state","text":"Use end-state parameters to define the target state after role execution. Parameters should be declared in host_vars or group_vars as they are intended to be permanent. infra_terraform_application : name : type : version : installed : infra_terraform_paths : root : etc : src : var : infra_terraform_users : terraform : name : group : home : infra_terraform_projects : - name : Parameter Required? Type Default Purpose / Value infra_terraform_application no dictionary Set application package end state infra_terraform_application.name no string \"terraform\" Select application package name infra_terraform_application.type no string \"distro\" Select application package type infra_terraform_application.version no string \"latest\" Select application package version infra_terraform_application.installed no boolean true Set application package end state infra_terraform_paths yes dictionary Set directory structure infra_terraform_paths.root yes string \"/opt/terraform\" Base path for persistent data infra_terraform_paths.etc yes string \"/opt/terraform/etc\" Base path for configuration data infra_terraform_paths.src yes string \"/opt/terraform/src\" Base path for project's source code infra_terraform_paths.var yes string \"/var/opt/terraform\" Base path for ephemeral data infra_terraform_users yes dictionary Define users infra_terraform_users.terraform yes dictionary Define directory structure owner infra_terraform_users.terraform.name yes string \"terraform\" Set login name infra_terraform_users.terraform.group yes string \"terraform\" Set group name infra_terraform_users.terraform.home yes string \"/home/terraform\" Set home directory infra_terraform_projects yes(provision) list Define projects infra_terraform_projects.0.name yes(provision) string \"default\" Project name","title":"End State"},{"location":"roles/infra_terraform/#deployment","text":"","title":"Deployment"},{"location":"roles/infra_terraform/#os-compatibility","text":"The operating system compatibility list is defined in the variable: infra_terraform_platforms","title":"OS Compatibility"},{"location":"roles/infra_terraform/#dependencies","text":"Ansible Collections: serdigital64.backup bkp_archive serdigital64.system sys_package sys_repository sys_user","title":"Dependencies"},{"location":"roles/infra_terraform/#prerequisites","text":"The Ansible engine must be already installed and configured for privileged access and remote execution. In addition the following prerequisites can be automatically solved when running the playbook by setting the role action: resolve_prereq: true Package manager for the target application is installed and enabled.","title":"Prerequisites"},{"location":"roles/infra_terraform/#installation-procedure","text":"Manually install Ansible Collections from the Ansible Galaxy repository: ansible-galaxy collection install --upgrade serdigital64.infrastructure Automatic installation is also available by deploying A:Platform64","title":"Installation Procedure"},{"location":"roles/infra_terraform/#contributing","text":"Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details.","title":"Contributing"},{"location":"roles/infra_terraform/#author","text":"SerDigital64","title":"Author"},{"location":"roles/infra_terraform/#license","text":"GPL-3.0-or-later","title":"License"},{"location":"roles/infra_terragrunt/","text":"Ansible Role: serdigital64.infrastructure.infra_terragrunt \u00b6 Purpose \u00b6 Manage provisioning of the Terragrunt tool. Supported features in the current version: Deploy application. Packages are defined in the variable infra_terragrunt_profiles . The infra_terragrunt Ansible-Role is part of the A:Platform64 project and is available in the infrastructure Ansible-Collection. Usage \u00b6 The following example is an Ansible Playbook that includes all the supported features: use this link if viewing the doc on github --- - name : \"Infrastructure / Terragrunt / Usage example\" hosts : \"localhost\" gather_facts : true tasks : - name : \"Example: Install Terragrunt\" vars : infra_terragrunt : resolve_prereq : true deploy : true ansible.builtin.include_role : name : \"serdigital64.infrastructure.infra_terragrunt\" ... The playbook can be run by executing: # Set ANSIBLE_COLLECTIONS_PATHS to the default location. Change as needed. ANSIBLE_COLLECTIONS_PATHS = \" ${ HOME } /.ansible/collections\" ansible-playbook \" ${ ANSIBLE_COLLECTIONS_PATHS } /ansible_collections/serdigital64/infrastructure/playbooks/infra_terragrunt.yml\" Role Parameters \u00b6 Actions \u00b6 Use action-parameters to control what tasks are enabled for the role to execute. Parameters should be declared as task level vars as they are intented to be dynamic. infra_terragrunt : resolve_prereq : deploy : Parameter Required? Type Default Purpose / Value infra_terragrunt.resolve_prereq no boolean false Enable automatic resolution of prequisites infra_terragrunt.deploy no boolean false Enable installation of application packages End State \u00b6 Use end-state parameters to define the target state after role execution. Parameters should be declared in host_vars or group_vars as they are intended to be permanent. infra_terragrunt_application : name : type : version : installed : Parameter Required? Type Default Purpose / Value infra_terragrunt_application yes(deploy) dictionary Set application package end state infra_terragrunt_application.name yes string \"terragrunt\" Select application package name infra_terragrunt_application.type yes string \"brew\" Select application package type infra_terragrunt_application.version yes string \"latest\" Select application package version infra_terragrunt_application.installed yes boolean true Set application package end state Deployment \u00b6 OS Compatibility \u00b6 The operating system compatibility list is defined in the variable: infra_terragrunt_platforms Dependencies \u00b6 Ansible Collections: serdigital64.backup bkp_archive serdigital64.system sys_package sys_repository Prerequisites \u00b6 The Ansible engine must be already installed and configured for privileged access and remote execution. In addition the following prerequisites can be automatically solved when running the playbook by setting the role action: resolve_prereq: true Package manager for the target application is installed and enabled. Installation Procedure \u00b6 Manually install Ansible Collections from the Ansible Galaxy repository: ansible-galaxy collection install serdigital64.infrastructure Automatic installation is also available by deploying A:Platform64 Contributing \u00b6 Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details. Author \u00b6 SerDigital64 License \u00b6 GPL-3.0-or-later","title":"infra_terragrunt"},{"location":"roles/infra_terragrunt/#ansible-role-serdigital64infrastructureinfra_terragrunt","text":"","title":"Ansible Role: serdigital64.infrastructure.infra_terragrunt"},{"location":"roles/infra_terragrunt/#purpose","text":"Manage provisioning of the Terragrunt tool. Supported features in the current version: Deploy application. Packages are defined in the variable infra_terragrunt_profiles . The infra_terragrunt Ansible-Role is part of the A:Platform64 project and is available in the infrastructure Ansible-Collection.","title":"Purpose"},{"location":"roles/infra_terragrunt/#usage","text":"The following example is an Ansible Playbook that includes all the supported features: use this link if viewing the doc on github --- - name : \"Infrastructure / Terragrunt / Usage example\" hosts : \"localhost\" gather_facts : true tasks : - name : \"Example: Install Terragrunt\" vars : infra_terragrunt : resolve_prereq : true deploy : true ansible.builtin.include_role : name : \"serdigital64.infrastructure.infra_terragrunt\" ... The playbook can be run by executing: # Set ANSIBLE_COLLECTIONS_PATHS to the default location. Change as needed. ANSIBLE_COLLECTIONS_PATHS = \" ${ HOME } /.ansible/collections\" ansible-playbook \" ${ ANSIBLE_COLLECTIONS_PATHS } /ansible_collections/serdigital64/infrastructure/playbooks/infra_terragrunt.yml\"","title":"Usage"},{"location":"roles/infra_terragrunt/#role-parameters","text":"","title":"Role Parameters"},{"location":"roles/infra_terragrunt/#actions","text":"Use action-parameters to control what tasks are enabled for the role to execute. Parameters should be declared as task level vars as they are intented to be dynamic. infra_terragrunt : resolve_prereq : deploy : Parameter Required? Type Default Purpose / Value infra_terragrunt.resolve_prereq no boolean false Enable automatic resolution of prequisites infra_terragrunt.deploy no boolean false Enable installation of application packages","title":"Actions"},{"location":"roles/infra_terragrunt/#end-state","text":"Use end-state parameters to define the target state after role execution. Parameters should be declared in host_vars or group_vars as they are intended to be permanent. infra_terragrunt_application : name : type : version : installed : Parameter Required? Type Default Purpose / Value infra_terragrunt_application yes(deploy) dictionary Set application package end state infra_terragrunt_application.name yes string \"terragrunt\" Select application package name infra_terragrunt_application.type yes string \"brew\" Select application package type infra_terragrunt_application.version yes string \"latest\" Select application package version infra_terragrunt_application.installed yes boolean true Set application package end state","title":"End State"},{"location":"roles/infra_terragrunt/#deployment","text":"","title":"Deployment"},{"location":"roles/infra_terragrunt/#os-compatibility","text":"The operating system compatibility list is defined in the variable: infra_terragrunt_platforms","title":"OS Compatibility"},{"location":"roles/infra_terragrunt/#dependencies","text":"Ansible Collections: serdigital64.backup bkp_archive serdigital64.system sys_package sys_repository","title":"Dependencies"},{"location":"roles/infra_terragrunt/#prerequisites","text":"The Ansible engine must be already installed and configured for privileged access and remote execution. In addition the following prerequisites can be automatically solved when running the playbook by setting the role action: resolve_prereq: true Package manager for the target application is installed and enabled.","title":"Prerequisites"},{"location":"roles/infra_terragrunt/#installation-procedure","text":"Manually install Ansible Collections from the Ansible Galaxy repository: ansible-galaxy collection install serdigital64.infrastructure Automatic installation is also available by deploying A:Platform64","title":"Installation Procedure"},{"location":"roles/infra_terragrunt/#contributing","text":"Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details.","title":"Contributing"},{"location":"roles/infra_terragrunt/#author","text":"SerDigital64","title":"Author"},{"location":"roles/infra_terragrunt/#license","text":"GPL-3.0-or-later","title":"License"},{"location":"roles/infra_tfsec/","text":"Ansible Role: serdigital64.infrastructure.infra_tfsec \u00b6 Purpose \u00b6 Manage provisioning of the TFSec tool. Supported features in the current version: Deploy application. Packages are defined in the variable infra_tfsec_profiles . The infra_tfsec Ansible-Role is part of the A:Platform64 project and is available in the infrastructure Ansible-Collection. Usage \u00b6 The following example is an Ansible Playbook that includes all the supported features: use this link if viewing the doc on github --- - name : \"Infrastructure / TFSec / Usage example\" hosts : \"localhost\" gather_facts : true tasks : - name : \"Example: Install TFSec\" vars : infra_tfsec : resolve_prereq : true deploy : true ansible.builtin.include_role : name : \"serdigital64.infrastructure.infra_tfsec\" ... The playbook can be run by executing: # Set ANSIBLE_COLLECTIONS_PATHS to the default location. Change as needed. ANSIBLE_COLLECTIONS_PATHS = \" ${ HOME } /.ansible/collections\" ansible-playbook \" ${ ANSIBLE_COLLECTIONS_PATHS } /ansible_collections/serdigital64/infrastructure/playbooks/infra_tfsec.yml\" Role Parameters \u00b6 Actions \u00b6 Use action-parameters to control what tasks are enabled for the role to execute. Parameters should be declared as task level vars as they are intented to be dynamic. infra_tfsec : resolve_prereq : deploy : Parameter Required? Type Default Purpose / Value infra_tfsec.resolve_prereq no boolean false Enable automatic resolution of prequisites infra_tfsec.deploy no boolean false Enable installation of application packages End State \u00b6 Use end-state parameters to define the target state after role execution. Parameters should be declared in host_vars or group_vars as they are intended to be permanent. infra_tfsec_application : name : type : version : installed : Parameter Required? Type Default Purpose / Value infra_tfsec_application yes(deploy) dictionary Set application package end state infra_tfsec_application.name yes string \"tfsec\" Select application package name infra_tfsec_application.type yes string \"brew\" Select application package type infra_tfsec_application.version yes string \"latest\" Select application package version infra_tfsec_application.installed yes boolean true Set application package end state Deployment \u00b6 OS Compatibility \u00b6 The operating system compatibility list is defined in the variable: infra_tfsec_platforms Dependencies \u00b6 Ansible Collections: serdigital64.backup bkp_archive serdigital64.system sys_package sys_repository Prerequisites \u00b6 The Ansible engine must be already installed and configured for privileged access and remote execution. In addition the following prerequisites can be automatically solved when running the playbook by setting the role action: resolve_prereq: true Package manager for the target application is installed and enabled. Installation Procedure \u00b6 Manually install Ansible Collections from the Ansible Galaxy repository: ansible-galaxy collection install serdigital64.infrastructure Automatic installation is also available by deploying A:Platform64 Contributing \u00b6 Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details. Author \u00b6 SerDigital64 License \u00b6 GPL-3.0-or-later","title":"Ansible Role: serdigital64.infrastructure.infra_tfsec"},{"location":"roles/infra_tfsec/#ansible-role-serdigital64infrastructureinfra_tfsec","text":"","title":"Ansible Role: serdigital64.infrastructure.infra_tfsec"},{"location":"roles/infra_tfsec/#purpose","text":"Manage provisioning of the TFSec tool. Supported features in the current version: Deploy application. Packages are defined in the variable infra_tfsec_profiles . The infra_tfsec Ansible-Role is part of the A:Platform64 project and is available in the infrastructure Ansible-Collection.","title":"Purpose"},{"location":"roles/infra_tfsec/#usage","text":"The following example is an Ansible Playbook that includes all the supported features: use this link if viewing the doc on github --- - name : \"Infrastructure / TFSec / Usage example\" hosts : \"localhost\" gather_facts : true tasks : - name : \"Example: Install TFSec\" vars : infra_tfsec : resolve_prereq : true deploy : true ansible.builtin.include_role : name : \"serdigital64.infrastructure.infra_tfsec\" ... The playbook can be run by executing: # Set ANSIBLE_COLLECTIONS_PATHS to the default location. Change as needed. ANSIBLE_COLLECTIONS_PATHS = \" ${ HOME } /.ansible/collections\" ansible-playbook \" ${ ANSIBLE_COLLECTIONS_PATHS } /ansible_collections/serdigital64/infrastructure/playbooks/infra_tfsec.yml\"","title":"Usage"},{"location":"roles/infra_tfsec/#role-parameters","text":"","title":"Role Parameters"},{"location":"roles/infra_tfsec/#actions","text":"Use action-parameters to control what tasks are enabled for the role to execute. Parameters should be declared as task level vars as they are intented to be dynamic. infra_tfsec : resolve_prereq : deploy : Parameter Required? Type Default Purpose / Value infra_tfsec.resolve_prereq no boolean false Enable automatic resolution of prequisites infra_tfsec.deploy no boolean false Enable installation of application packages","title":"Actions"},{"location":"roles/infra_tfsec/#end-state","text":"Use end-state parameters to define the target state after role execution. Parameters should be declared in host_vars or group_vars as they are intended to be permanent. infra_tfsec_application : name : type : version : installed : Parameter Required? Type Default Purpose / Value infra_tfsec_application yes(deploy) dictionary Set application package end state infra_tfsec_application.name yes string \"tfsec\" Select application package name infra_tfsec_application.type yes string \"brew\" Select application package type infra_tfsec_application.version yes string \"latest\" Select application package version infra_tfsec_application.installed yes boolean true Set application package end state","title":"End State"},{"location":"roles/infra_tfsec/#deployment","text":"","title":"Deployment"},{"location":"roles/infra_tfsec/#os-compatibility","text":"The operating system compatibility list is defined in the variable: infra_tfsec_platforms","title":"OS Compatibility"},{"location":"roles/infra_tfsec/#dependencies","text":"Ansible Collections: serdigital64.backup bkp_archive serdigital64.system sys_package sys_repository","title":"Dependencies"},{"location":"roles/infra_tfsec/#prerequisites","text":"The Ansible engine must be already installed and configured for privileged access and remote execution. In addition the following prerequisites can be automatically solved when running the playbook by setting the role action: resolve_prereq: true Package manager for the target application is installed and enabled.","title":"Prerequisites"},{"location":"roles/infra_tfsec/#installation-procedure","text":"Manually install Ansible Collections from the Ansible Galaxy repository: ansible-galaxy collection install serdigital64.infrastructure Automatic installation is also available by deploying A:Platform64","title":"Installation Procedure"},{"location":"roles/infra_tfsec/#contributing","text":"Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details.","title":"Contributing"},{"location":"roles/infra_tfsec/#author","text":"SerDigital64","title":"Author"},{"location":"roles/infra_tfsec/#license","text":"GPL-3.0-or-later","title":"License"},{"location":"roles/infra_vagrant/","text":"Ansible Role: serdigital64.infrastructure.infra_vagrant \u00b6 Purpose \u00b6 Manage provisioning of the Vagrant tool. Supported features in the current version: Deploy application. Packages are defined in the variable infra_vagrant_profiles . The infra_vagrant Ansible-Role is part of the A:Platform64 project and is available in the infrastructure Ansible-Collection. Usage \u00b6 The following example is an Ansible Playbook that includes all the supported features: use this link if viewing the doc on github --- - name : \"Infrastructure / Vagrant / Usage example\" hosts : \"localhost\" gather_facts : true tasks : - name : \"Example: Install Vagrant\" vars : infra_vagrant : resolve_prereq : true deploy : true ansible.builtin.include_role : name : \"serdigital64.infrastructure.infra_vagrant\" ... The playbook can be run by executing: # Set ANSIBLE_COLLECTIONS_PATHS to the default install location. Change as needed. ANSIBLE_COLLECTIONS_PATHS = \" ${ HOME } /.ansible/collections\" ansible-playbook \" ${ ANSIBLE_COLLECTIONS_PATHS } /ansible_collections/serdigital64/infrastructure/playbooks/infra_vagrant.yml\" Role Parameters \u00b6 Actions \u00b6 Use action-parameters to control what tasks are enabled for the role to execute. Parameters should be declared as task level vars as they are intented to be dynamic. infra_vagrant : resolve_prereq : deploy : Parameter Required? Type Default Purpose / Value infra_vagrant.resolve_prereq no boolean false Enable automatic resolution of prequisites infra_vagrant.deploy no boolean false Enable installation of application packages End State \u00b6 Use end-state parameters to define the target state after role execution. Parameters should be declared in host_vars or group_vars as they are intended to be permanent. infra_vagrant_application : name : type : version : installed : Parameter Required? Type Default Purpose / Value infra_vagrant_application no dictionary Set application package end state infra_vagrant_application.name no string \"vagrant\" Select application package name infra_vagrant_application.type no string \"distro\" Select application package type infra_vagrant_application.version no string \"latest\" Select application package version infra_vagrant_application.installed no boolean true Set application package end state Deployment \u00b6 OS Compatibility \u00b6 CentOS8 OracleLinux8 Ubuntu20 Ubuntu21 Fedora33 Fedora35 Debian10 Debian11 Dependencies \u00b6 Ansible Collections: serdigital64.backup bkp_archive serdigital64.system sys_package sys_repository Prerequisites \u00b6 The Ansible engine must be already installed and configured for privileged access and remote execution. In addition the following prerequisites can be automatically solved when running the playbook by setting the role action: resolve_prereq: true Package manager for the target application is installed and enabled. Installation Procedure \u00b6 Manually install Ansible Collections from the Ansible Galaxy repository: ansible-galaxy collection install --upgrade serdigital64.infrastructure Automatic installation is also available by deploying A:Platform64 Contributing \u00b6 Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details. Author \u00b6 SerDigital64 License \u00b6 GPL-3.0-or-later","title":"infra_vagrant"},{"location":"roles/infra_vagrant/#ansible-role-serdigital64infrastructureinfra_vagrant","text":"","title":"Ansible Role: serdigital64.infrastructure.infra_vagrant"},{"location":"roles/infra_vagrant/#purpose","text":"Manage provisioning of the Vagrant tool. Supported features in the current version: Deploy application. Packages are defined in the variable infra_vagrant_profiles . The infra_vagrant Ansible-Role is part of the A:Platform64 project and is available in the infrastructure Ansible-Collection.","title":"Purpose"},{"location":"roles/infra_vagrant/#usage","text":"The following example is an Ansible Playbook that includes all the supported features: use this link if viewing the doc on github --- - name : \"Infrastructure / Vagrant / Usage example\" hosts : \"localhost\" gather_facts : true tasks : - name : \"Example: Install Vagrant\" vars : infra_vagrant : resolve_prereq : true deploy : true ansible.builtin.include_role : name : \"serdigital64.infrastructure.infra_vagrant\" ... The playbook can be run by executing: # Set ANSIBLE_COLLECTIONS_PATHS to the default install location. Change as needed. ANSIBLE_COLLECTIONS_PATHS = \" ${ HOME } /.ansible/collections\" ansible-playbook \" ${ ANSIBLE_COLLECTIONS_PATHS } /ansible_collections/serdigital64/infrastructure/playbooks/infra_vagrant.yml\"","title":"Usage"},{"location":"roles/infra_vagrant/#role-parameters","text":"","title":"Role Parameters"},{"location":"roles/infra_vagrant/#actions","text":"Use action-parameters to control what tasks are enabled for the role to execute. Parameters should be declared as task level vars as they are intented to be dynamic. infra_vagrant : resolve_prereq : deploy : Parameter Required? Type Default Purpose / Value infra_vagrant.resolve_prereq no boolean false Enable automatic resolution of prequisites infra_vagrant.deploy no boolean false Enable installation of application packages","title":"Actions"},{"location":"roles/infra_vagrant/#end-state","text":"Use end-state parameters to define the target state after role execution. Parameters should be declared in host_vars or group_vars as they are intended to be permanent. infra_vagrant_application : name : type : version : installed : Parameter Required? Type Default Purpose / Value infra_vagrant_application no dictionary Set application package end state infra_vagrant_application.name no string \"vagrant\" Select application package name infra_vagrant_application.type no string \"distro\" Select application package type infra_vagrant_application.version no string \"latest\" Select application package version infra_vagrant_application.installed no boolean true Set application package end state","title":"End State"},{"location":"roles/infra_vagrant/#deployment","text":"","title":"Deployment"},{"location":"roles/infra_vagrant/#os-compatibility","text":"CentOS8 OracleLinux8 Ubuntu20 Ubuntu21 Fedora33 Fedora35 Debian10 Debian11","title":"OS Compatibility"},{"location":"roles/infra_vagrant/#dependencies","text":"Ansible Collections: serdigital64.backup bkp_archive serdigital64.system sys_package sys_repository","title":"Dependencies"},{"location":"roles/infra_vagrant/#prerequisites","text":"The Ansible engine must be already installed and configured for privileged access and remote execution. In addition the following prerequisites can be automatically solved when running the playbook by setting the role action: resolve_prereq: true Package manager for the target application is installed and enabled.","title":"Prerequisites"},{"location":"roles/infra_vagrant/#installation-procedure","text":"Manually install Ansible Collections from the Ansible Galaxy repository: ansible-galaxy collection install --upgrade serdigital64.infrastructure Automatic installation is also available by deploying A:Platform64","title":"Installation Procedure"},{"location":"roles/infra_vagrant/#contributing","text":"Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details.","title":"Contributing"},{"location":"roles/infra_vagrant/#author","text":"SerDigital64","title":"Author"},{"location":"roles/infra_vagrant/#license","text":"GPL-3.0-or-later","title":"License"},{"location":"roles/mon_fluentd/","text":"Ansible Role: serdigital64.monitor.mon_fluentd \u00b6 Purpose \u00b6 Manage provisioning of Fluentd. Supported features in the current version: Deploy application. Packages are defined in the variable mon_fluentd_profiles . The mon_fluentd Ansible-Role is part of the A:Platform64 project and is available in the monitor Ansible-Collection. Usage \u00b6 The following example is an Ansible Playbook that includes all the supported features: use this link if viewing the doc on github --- - name : \"Monitor / Fluentd / Usage example\" hosts : \"localhost\" gather_facts : true tasks : - name : \"Example: Install Fluentd\" vars : mon_fluentd : resolve_prereq : true deploy : true ansible.builtin.include_role : name : \"serdigital64.monitor.mon_fluentd\" ... The playbook can be run by executing: # Set ANSIBLE_COLLECTIONS_PATHS to the default location. Change as needed. ANSIBLE_COLLECTIONS_PATHS = \" ${ HOME } /.ansible/collections\" ansible-playbook \" ${ ANSIBLE_COLLECTIONS_PATHS } /ansible_collections/serdigital64/monitor/playbooks/mon_fluentd.yml\" Role Parameters \u00b6 Actions \u00b6 Use action-parameters to control what tasks are enabled for the role to execute. Parameters should be declared as task level vars as they are intented to be dynamic. mon_fluentd : resolve_prereq : deploy : Parameter Required? Type Default Purpose / Value mon_fluentd.resolve_prereq no boolean false Enable automatic resolution of prequisites mon_fluentd.deploy no boolean false Enable installation of application packages End State \u00b6 Use end-state parameters to define the target state after role execution. Parameters should be declared in host_vars or group_vars as they are intended to be permanent. mon_fluentd_application : name : type : version : installed : Parameter Required? Type Default Purpose / Value mon_fluentd_application yes(deploy) dictionary Set application package end state mon_fluentd_application.name yes string \"fluentd\" Select application package name mon_fluentd_application.type yes string \"distro\" Select application package type mon_fluentd_application.version yes string \"latest\" Select application package version mon_fluentd_application.installed yes boolean true Set application package end state Deployment \u00b6 OS Compatibility \u00b6 The operating system compatibility list is defined in the variable: mon_fluentd_platforms Dependencies \u00b6 Ansible Collections: serdigital64.backup bkp_archive serdigital64.system sys_package sys_repository Prerequisites \u00b6 The Ansible engine must be already installed and configured for privileged access and remote execution. In addition the following prerequisites can be automatically solved when running the playbook by setting the role action: resolve_prereq: true Package manager for the target application is installed and enabled. Installation Procedure \u00b6 Manually install Ansible Collections from the Ansible Galaxy repository: ansible-galaxy collection install serdigital64.monitor Automatic installation is also available by deploying A:Platform64 Contributing \u00b6 Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details. Author \u00b6 SerDigital64 License \u00b6 GPL-3.0-or-later","title":"mon_fluentd"},{"location":"roles/mon_fluentd/#ansible-role-serdigital64monitormon_fluentd","text":"","title":"Ansible Role: serdigital64.monitor.mon_fluentd"},{"location":"roles/mon_fluentd/#purpose","text":"Manage provisioning of Fluentd. Supported features in the current version: Deploy application. Packages are defined in the variable mon_fluentd_profiles . The mon_fluentd Ansible-Role is part of the A:Platform64 project and is available in the monitor Ansible-Collection.","title":"Purpose"},{"location":"roles/mon_fluentd/#usage","text":"The following example is an Ansible Playbook that includes all the supported features: use this link if viewing the doc on github --- - name : \"Monitor / Fluentd / Usage example\" hosts : \"localhost\" gather_facts : true tasks : - name : \"Example: Install Fluentd\" vars : mon_fluentd : resolve_prereq : true deploy : true ansible.builtin.include_role : name : \"serdigital64.monitor.mon_fluentd\" ... The playbook can be run by executing: # Set ANSIBLE_COLLECTIONS_PATHS to the default location. Change as needed. ANSIBLE_COLLECTIONS_PATHS = \" ${ HOME } /.ansible/collections\" ansible-playbook \" ${ ANSIBLE_COLLECTIONS_PATHS } /ansible_collections/serdigital64/monitor/playbooks/mon_fluentd.yml\"","title":"Usage"},{"location":"roles/mon_fluentd/#role-parameters","text":"","title":"Role Parameters"},{"location":"roles/mon_fluentd/#actions","text":"Use action-parameters to control what tasks are enabled for the role to execute. Parameters should be declared as task level vars as they are intented to be dynamic. mon_fluentd : resolve_prereq : deploy : Parameter Required? Type Default Purpose / Value mon_fluentd.resolve_prereq no boolean false Enable automatic resolution of prequisites mon_fluentd.deploy no boolean false Enable installation of application packages","title":"Actions"},{"location":"roles/mon_fluentd/#end-state","text":"Use end-state parameters to define the target state after role execution. Parameters should be declared in host_vars or group_vars as they are intended to be permanent. mon_fluentd_application : name : type : version : installed : Parameter Required? Type Default Purpose / Value mon_fluentd_application yes(deploy) dictionary Set application package end state mon_fluentd_application.name yes string \"fluentd\" Select application package name mon_fluentd_application.type yes string \"distro\" Select application package type mon_fluentd_application.version yes string \"latest\" Select application package version mon_fluentd_application.installed yes boolean true Set application package end state","title":"End State"},{"location":"roles/mon_fluentd/#deployment","text":"","title":"Deployment"},{"location":"roles/mon_fluentd/#os-compatibility","text":"The operating system compatibility list is defined in the variable: mon_fluentd_platforms","title":"OS Compatibility"},{"location":"roles/mon_fluentd/#dependencies","text":"Ansible Collections: serdigital64.backup bkp_archive serdigital64.system sys_package sys_repository","title":"Dependencies"},{"location":"roles/mon_fluentd/#prerequisites","text":"The Ansible engine must be already installed and configured for privileged access and remote execution. In addition the following prerequisites can be automatically solved when running the playbook by setting the role action: resolve_prereq: true Package manager for the target application is installed and enabled.","title":"Prerequisites"},{"location":"roles/mon_fluentd/#installation-procedure","text":"Manually install Ansible Collections from the Ansible Galaxy repository: ansible-galaxy collection install serdigital64.monitor Automatic installation is also available by deploying A:Platform64","title":"Installation Procedure"},{"location":"roles/mon_fluentd/#contributing","text":"Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details.","title":"Contributing"},{"location":"roles/mon_fluentd/#author","text":"SerDigital64","title":"Author"},{"location":"roles/mon_fluentd/#license","text":"GPL-3.0-or-later","title":"License"},{"location":"roles/net_bind/","text":"Ansible Role: serdigital64.network.net_bind \u00b6 Purpose \u00b6 Manage provisioning of Bind. Supported features in the current version: Deploy application. Packages are defined in the variable net_bind_profiles . The net_bind Ansible-Role is part of the A:Platform64 project and is available in the network Ansible-Collection. Usage \u00b6 The following example is an Ansible Playbook that includes all the supported features: use this link if viewing the doc on github --- - name : \"Network / Bind / Usage example\" hosts : \"localhost\" gather_facts : true tasks : - name : \"Example: Install Bind\" vars : net_bind : resolve_prereq : true deploy : true ansible.builtin.include_role : name : \"serdigital64.network.net_bind\" ... The playbook can be run by executing: # Set ANSIBLE_COLLECTIONS_PATHS to the default location. Change as needed. ANSIBLE_COLLECTIONS_PATHS = \" ${ HOME } /.ansible/collections\" ansible-playbook \" ${ ANSIBLE_COLLECTIONS_PATHS } /ansible_collections/serdigital64/network/playbooks/net_bind.yml\" Role Parameters \u00b6 Actions \u00b6 Use action-parameters to control what tasks are enabled for the role to execute. Parameters should be declared as task level vars as they are intented to be dynamic. net_bind : resolve_prereq : deploy : Parameter Required? Type Default Purpose / Value net_bind.resolve_prereq no boolean false Enable automatic resolution of prequisites net_bind.deploy no boolean false Enable installation of application packages End State \u00b6 Use end-state parameters to define the target state after role execution. Parameters should be declared in host_vars or group_vars as they are intended to be permanent. net_bind_application : name : type : version : installed : Parameter Required? Type Default Purpose / Value net_bind_application yes(deploy) dictionary Set application package end state net_bind_application.name yes string \"bind\" Select application package name net_bind_application.type yes string \"distro\" Select application package type net_bind_application.version yes string \"latest\" Select application package version net_bind_application.installed yes boolean true Set application package end state Deployment \u00b6 OS Compatibility \u00b6 The operating system compatibility list is defined in the variable: net_bind_platforms Dependencies \u00b6 Ansible Collections: serdigital64.backup bkp_archive serdigital64.system sys_package sys_repository Prerequisites \u00b6 The Ansible engine must be already installed and configured for privileged access and remote execution. In addition the following prerequisites can be automatically solved when running the playbook by setting the role action: resolve_prereq: true Package manager for the target application is installed and enabled. Installation Procedure \u00b6 Manually install Ansible Collections from the Ansible Galaxy repository: ansible-galaxy collection install serdigital64.network Automatic installation is also available by deploying A:Platform64 Contributing \u00b6 Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details. Author \u00b6 SerDigital64 License \u00b6 GPL-3.0-or-later","title":"net_bind"},{"location":"roles/net_bind/#ansible-role-serdigital64networknet_bind","text":"","title":"Ansible Role: serdigital64.network.net_bind"},{"location":"roles/net_bind/#purpose","text":"Manage provisioning of Bind. Supported features in the current version: Deploy application. Packages are defined in the variable net_bind_profiles . The net_bind Ansible-Role is part of the A:Platform64 project and is available in the network Ansible-Collection.","title":"Purpose"},{"location":"roles/net_bind/#usage","text":"The following example is an Ansible Playbook that includes all the supported features: use this link if viewing the doc on github --- - name : \"Network / Bind / Usage example\" hosts : \"localhost\" gather_facts : true tasks : - name : \"Example: Install Bind\" vars : net_bind : resolve_prereq : true deploy : true ansible.builtin.include_role : name : \"serdigital64.network.net_bind\" ... The playbook can be run by executing: # Set ANSIBLE_COLLECTIONS_PATHS to the default location. Change as needed. ANSIBLE_COLLECTIONS_PATHS = \" ${ HOME } /.ansible/collections\" ansible-playbook \" ${ ANSIBLE_COLLECTIONS_PATHS } /ansible_collections/serdigital64/network/playbooks/net_bind.yml\"","title":"Usage"},{"location":"roles/net_bind/#role-parameters","text":"","title":"Role Parameters"},{"location":"roles/net_bind/#actions","text":"Use action-parameters to control what tasks are enabled for the role to execute. Parameters should be declared as task level vars as they are intented to be dynamic. net_bind : resolve_prereq : deploy : Parameter Required? Type Default Purpose / Value net_bind.resolve_prereq no boolean false Enable automatic resolution of prequisites net_bind.deploy no boolean false Enable installation of application packages","title":"Actions"},{"location":"roles/net_bind/#end-state","text":"Use end-state parameters to define the target state after role execution. Parameters should be declared in host_vars or group_vars as they are intended to be permanent. net_bind_application : name : type : version : installed : Parameter Required? Type Default Purpose / Value net_bind_application yes(deploy) dictionary Set application package end state net_bind_application.name yes string \"bind\" Select application package name net_bind_application.type yes string \"distro\" Select application package type net_bind_application.version yes string \"latest\" Select application package version net_bind_application.installed yes boolean true Set application package end state","title":"End State"},{"location":"roles/net_bind/#deployment","text":"","title":"Deployment"},{"location":"roles/net_bind/#os-compatibility","text":"The operating system compatibility list is defined in the variable: net_bind_platforms","title":"OS Compatibility"},{"location":"roles/net_bind/#dependencies","text":"Ansible Collections: serdigital64.backup bkp_archive serdigital64.system sys_package sys_repository","title":"Dependencies"},{"location":"roles/net_bind/#prerequisites","text":"The Ansible engine must be already installed and configured for privileged access and remote execution. In addition the following prerequisites can be automatically solved when running the playbook by setting the role action: resolve_prereq: true Package manager for the target application is installed and enabled.","title":"Prerequisites"},{"location":"roles/net_bind/#installation-procedure","text":"Manually install Ansible Collections from the Ansible Galaxy repository: ansible-galaxy collection install serdigital64.network Automatic installation is also available by deploying A:Platform64","title":"Installation Procedure"},{"location":"roles/net_bind/#contributing","text":"Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details.","title":"Contributing"},{"location":"roles/net_bind/#author","text":"SerDigital64","title":"Author"},{"location":"roles/net_bind/#license","text":"GPL-3.0-or-later","title":"License"},{"location":"roles/net_istio/","text":"Ansible Role: serdigital64.X_COLLECTION_NAME_X.X_ROLE_NAME_X \u00b6 Purpose \u00b6 X_ROLE_SHORT_DESCRIPTION_X. Supported features in the current version: Prepare environment for application deployment. Deploy application. Packages are defined in the variable X_ROLE_NAME_X_profiles . Control application subsystem services. Services are defined in the variable X_ROLE_NAME_X_subsystems . Configure application. Configure users. Configure application subsystem server. Provision application components. Configure OS level firewall rules. Rules are defined in the varible X_ROLE_NAME_X_firewall_rules The X_ROLE_NAME_X Ansible-Role is part of the A:Platform64 project and is available in the X_COLLECTION_NAME_X Ansible-Collection. Usage \u00b6 The following example is an Ansible Playbook that includes all the supported features: use this link if viewing the doc on github { % include \"../examples/X_ROLE_NAME_X.yml\" % } The playbook can be run by executing: # Set ANSIBLE_COLLECTIONS_PATHS to the default location. Change as needed. ANSIBLE_COLLECTIONS_PATHS = \" ${ HOME } /.ansible/collections\" ansible-playbook \" ${ ANSIBLE_COLLECTIONS_PATHS } /ansible_collections/serdigital64/X_COLLECTION_NAME_X/playbooks/X_ROLE_NAME_X.yml\" Role Parameters \u00b6 Actions \u00b6 Use action-parameters to control what tasks are enabled for the role to execute. Parameters should be declared as task level vars as they are intented to be dynamic. X_ROLE_NAME_X : resolve_prereq : prepare : deploy : setup : control : provision : Parameter Required? Type Default Purpose / Value X_ROLE_NAME_X.resolve_prereq no boolean false Enable automatic resolution of prequisites X_ROLE_NAME_X.prepare no boolean false Enable environment preparation X_ROLE_NAME_X.deploy no boolean false Enable installation of application packages X_ROLE_NAME_X.setup no boolean false Enable application configuration X_ROLE_NAME_X.control no boolean false Enable application subsystem service control X_ROLE_NAME_X.provision no boolean false Enable provisioning of application components End State \u00b6 Use end-state parameters to define the target state after role execution. Parameters should be declared in host_vars or group_vars as they are intended to be permanent. X_ROLE_NAME_X_application : name : type : version : installed : X_ROLE_NAME_X_subsystem : enabled : status : X_ROLE_NAME_X_server : X_DEFAULT_SERVER_OPTION_X : X_ROLE_NAME_X_paths : X_DEFAULT_PATH_X : X_ROLE_NAME_X_owners : X_DEFAULT_USER_X : name : group : home : X_ROLE_NAME_X_firewall : zone : X_ROLE_NAME_X_setup_users : - user : home : # X_ROLE_NAME_X_actions: # setup: # X_ACTION_OPTION: Parameter Required? Type Default Purpose / Value X_ROLE_NAME_X_application yes(deploy) dictionary Set application package end state X_ROLE_NAME_X_application.name yes string \"X_APP_ID_X\" Select application package name X_ROLE_NAME_X_application.type yes string \"X_APP_TYPE_X\" Select application package type X_ROLE_NAME_X_application.version yes string \"X_APP_VERSION_X\" Select application package version X_ROLE_NAME_X_application.installed yes boolean true Set application package end state X_ROLE_NAME_X_subsystem yes(control) dictionary Set application subsystem end state X_ROLE_NAME_X_subsystem.enabled yes boolean false Enable the subsystem? X_ROLE_NAME_X_subsystem.status yes string \"stopped\" Set the service state X_ROLE_NAME_X_server yes(control) dictionary Set subsystem server options X_ROLE_NAME_X_server.X_DEFAULT_SERVER_OPTION_X yes string \"X_DEFAULT_SERVER_OPTION_VALUE_X\" X_ROLE_NAME_X_paths yes(prepare) dictionary Set paths X_ROLE_NAME_X_paths.X_DEFAULT_PATH_X yes string \"X_DEFAULT_PATH_VALUE_X\" X_ROLE_NAME_X_owners yes(prepare) dictionary Define users X_ROLE_NAME_X_owners.X_DEFAULT_USER_X yes dictionary Define directory structure owner X_ROLE_NAME_X_owners.X_DEFAULT_USER_X.name yes string \"X_DEFAULT_USER_NAME_X\" Set login name X_ROLE_NAME_X_owners.X_DEFAULT_USER_X.group yes string \"X_DEFAULT_USER_GROUP_X\" Set group name X_ROLE_NAME_X_owners.X_DEFAULT_USER_X.home yes string \"X_DEFAULT_USER_HOME_X\" Set home directory X_ROLE_NAME_X_firewall yes(setup) dictionary OS Firewall options X_ROLE_NAME_X_firewall.zone yes string \"public\" Name of the target zone X_ROLE_NAME_X_setup_users yes(setup) list List of users for the setup task X_ROLE_NAME_X_setup_users.0.user yes string User login name X_ROLE_NAME_X_setup_users.0.home yes string Home full path X_ROLE_NAME_X_actions no dictionary Set action options X_ROLE_NAME_X_actions.setup no dictionary Set setup action options X_ROLE_NAME_X_actions.setup.X_ACTION_OPTION no Deployment \u00b6 OS Compatibility \u00b6 The operating system compatibility list is defined in the variable: X_ROLE_NAME_X_platforms Dependencies \u00b6 Ansible Collections: serdigital64.backup bkp_archive serdigital64.system sys_package sys_repository Prerequisites \u00b6 The Ansible engine must be already installed and configured for privileged access and remote execution. In addition the following prerequisites can be automatically solved when running the playbook by setting the role action: resolve_prereq: true Package manager for the target application is installed and enabled. Installation Procedure \u00b6 Manually install Ansible Collections from the Ansible Galaxy repository: ansible-galaxy collection install serdigital64.X_COLLECTION_NAME_X Automatic installation is also available by deploying A:Platform64 Contributing \u00b6 Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details. Author \u00b6 SerDigital64 License \u00b6 GPL-3.0-or-later","title":"Ansible Role: serdigital64.X_COLLECTION_NAME_X.X_ROLE_NAME_X"},{"location":"roles/net_istio/#ansible-role-serdigital64x_collection_name_xx_role_name_x","text":"","title":"Ansible Role: serdigital64.X_COLLECTION_NAME_X.X_ROLE_NAME_X"},{"location":"roles/net_istio/#purpose","text":"X_ROLE_SHORT_DESCRIPTION_X. Supported features in the current version: Prepare environment for application deployment. Deploy application. Packages are defined in the variable X_ROLE_NAME_X_profiles . Control application subsystem services. Services are defined in the variable X_ROLE_NAME_X_subsystems . Configure application. Configure users. Configure application subsystem server. Provision application components. Configure OS level firewall rules. Rules are defined in the varible X_ROLE_NAME_X_firewall_rules The X_ROLE_NAME_X Ansible-Role is part of the A:Platform64 project and is available in the X_COLLECTION_NAME_X Ansible-Collection.","title":"Purpose"},{"location":"roles/net_istio/#usage","text":"The following example is an Ansible Playbook that includes all the supported features: use this link if viewing the doc on github { % include \"../examples/X_ROLE_NAME_X.yml\" % } The playbook can be run by executing: # Set ANSIBLE_COLLECTIONS_PATHS to the default location. Change as needed. ANSIBLE_COLLECTIONS_PATHS = \" ${ HOME } /.ansible/collections\" ansible-playbook \" ${ ANSIBLE_COLLECTIONS_PATHS } /ansible_collections/serdigital64/X_COLLECTION_NAME_X/playbooks/X_ROLE_NAME_X.yml\"","title":"Usage"},{"location":"roles/net_istio/#role-parameters","text":"","title":"Role Parameters"},{"location":"roles/net_istio/#actions","text":"Use action-parameters to control what tasks are enabled for the role to execute. Parameters should be declared as task level vars as they are intented to be dynamic. X_ROLE_NAME_X : resolve_prereq : prepare : deploy : setup : control : provision : Parameter Required? Type Default Purpose / Value X_ROLE_NAME_X.resolve_prereq no boolean false Enable automatic resolution of prequisites X_ROLE_NAME_X.prepare no boolean false Enable environment preparation X_ROLE_NAME_X.deploy no boolean false Enable installation of application packages X_ROLE_NAME_X.setup no boolean false Enable application configuration X_ROLE_NAME_X.control no boolean false Enable application subsystem service control X_ROLE_NAME_X.provision no boolean false Enable provisioning of application components","title":"Actions"},{"location":"roles/net_istio/#end-state","text":"Use end-state parameters to define the target state after role execution. Parameters should be declared in host_vars or group_vars as they are intended to be permanent. X_ROLE_NAME_X_application : name : type : version : installed : X_ROLE_NAME_X_subsystem : enabled : status : X_ROLE_NAME_X_server : X_DEFAULT_SERVER_OPTION_X : X_ROLE_NAME_X_paths : X_DEFAULT_PATH_X : X_ROLE_NAME_X_owners : X_DEFAULT_USER_X : name : group : home : X_ROLE_NAME_X_firewall : zone : X_ROLE_NAME_X_setup_users : - user : home : # X_ROLE_NAME_X_actions: # setup: # X_ACTION_OPTION: Parameter Required? Type Default Purpose / Value X_ROLE_NAME_X_application yes(deploy) dictionary Set application package end state X_ROLE_NAME_X_application.name yes string \"X_APP_ID_X\" Select application package name X_ROLE_NAME_X_application.type yes string \"X_APP_TYPE_X\" Select application package type X_ROLE_NAME_X_application.version yes string \"X_APP_VERSION_X\" Select application package version X_ROLE_NAME_X_application.installed yes boolean true Set application package end state X_ROLE_NAME_X_subsystem yes(control) dictionary Set application subsystem end state X_ROLE_NAME_X_subsystem.enabled yes boolean false Enable the subsystem? X_ROLE_NAME_X_subsystem.status yes string \"stopped\" Set the service state X_ROLE_NAME_X_server yes(control) dictionary Set subsystem server options X_ROLE_NAME_X_server.X_DEFAULT_SERVER_OPTION_X yes string \"X_DEFAULT_SERVER_OPTION_VALUE_X\" X_ROLE_NAME_X_paths yes(prepare) dictionary Set paths X_ROLE_NAME_X_paths.X_DEFAULT_PATH_X yes string \"X_DEFAULT_PATH_VALUE_X\" X_ROLE_NAME_X_owners yes(prepare) dictionary Define users X_ROLE_NAME_X_owners.X_DEFAULT_USER_X yes dictionary Define directory structure owner X_ROLE_NAME_X_owners.X_DEFAULT_USER_X.name yes string \"X_DEFAULT_USER_NAME_X\" Set login name X_ROLE_NAME_X_owners.X_DEFAULT_USER_X.group yes string \"X_DEFAULT_USER_GROUP_X\" Set group name X_ROLE_NAME_X_owners.X_DEFAULT_USER_X.home yes string \"X_DEFAULT_USER_HOME_X\" Set home directory X_ROLE_NAME_X_firewall yes(setup) dictionary OS Firewall options X_ROLE_NAME_X_firewall.zone yes string \"public\" Name of the target zone X_ROLE_NAME_X_setup_users yes(setup) list List of users for the setup task X_ROLE_NAME_X_setup_users.0.user yes string User login name X_ROLE_NAME_X_setup_users.0.home yes string Home full path X_ROLE_NAME_X_actions no dictionary Set action options X_ROLE_NAME_X_actions.setup no dictionary Set setup action options X_ROLE_NAME_X_actions.setup.X_ACTION_OPTION no","title":"End State"},{"location":"roles/net_istio/#deployment","text":"","title":"Deployment"},{"location":"roles/net_istio/#os-compatibility","text":"The operating system compatibility list is defined in the variable: X_ROLE_NAME_X_platforms","title":"OS Compatibility"},{"location":"roles/net_istio/#dependencies","text":"Ansible Collections: serdigital64.backup bkp_archive serdigital64.system sys_package sys_repository","title":"Dependencies"},{"location":"roles/net_istio/#prerequisites","text":"The Ansible engine must be already installed and configured for privileged access and remote execution. In addition the following prerequisites can be automatically solved when running the playbook by setting the role action: resolve_prereq: true Package manager for the target application is installed and enabled.","title":"Prerequisites"},{"location":"roles/net_istio/#installation-procedure","text":"Manually install Ansible Collections from the Ansible Galaxy repository: ansible-galaxy collection install serdigital64.X_COLLECTION_NAME_X Automatic installation is also available by deploying A:Platform64","title":"Installation Procedure"},{"location":"roles/net_istio/#contributing","text":"Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details.","title":"Contributing"},{"location":"roles/net_istio/#author","text":"SerDigital64","title":"Author"},{"location":"roles/net_istio/#license","text":"GPL-3.0-or-later","title":"License"},{"location":"roles/net_istioctl/","text":"Ansible Role: serdigital64.network.net_istioctl \u00b6 Purpose \u00b6 Manage provisioning of IstioCtl. Supported features in the current version: Prepare environment for application deployment. Deploy application. Packages are defined in the variable net_istioctl_profiles . The net_istioctl Ansible-Role is part of the A:Platform64 project and is available in the network Ansible-Collection. Usage \u00b6 The following example is an Ansible Playbook that includes all the supported features: use this link if viewing the doc on github --- - name : \"Network / IstioCtl / Usage example\" hosts : \"localhost\" gather_facts : true tasks : - name : \"Example: Install IstioCtl\" vars : net_istio : resolve_prereq : true deploy : true ansible.builtin.include_role : name : \"serdigital64.network.net_istio\" ... The playbook can be run by executing: # Set ANSIBLE_COLLECTIONS_PATHS to the default location. Change as needed. ANSIBLE_COLLECTIONS_PATHS = \" ${ HOME } /.ansible/collections\" ansible-playbook \" ${ ANSIBLE_COLLECTIONS_PATHS } /ansible_collections/serdigital64/network/playbooks/net_istioctl.yml\" Role Parameters \u00b6 Actions \u00b6 Use action-parameters to control what tasks are enabled for the role to execute. Parameters should be declared as task level vars as they are intented to be dynamic. net_istioctl : resolve_prereq : prepare : deploy : Parameter Required? Type Default Purpose / Value net_istioctl.resolve_prereq no boolean false Enable automatic resolution of prequisites net_istioctl.prepare no boolean false Enable environment preparation net_istioctl.deploy no boolean false Enable installation of application packages End State \u00b6 Use end-state parameters to define the target state after role execution. Parameters should be declared in host_vars or group_vars as they are intended to be permanent. net_istioctl_application : name : type : version : installed : net_istioctl_paths : root : net_istioctl_owners : root : name : group : Parameter Required? Type Default Purpose / Value net_istioctl_application yes(deploy) dictionary Set application package end state net_istioctl_application.name yes string \"istioctl\" Select application package name net_istioctl_application.type yes string \"binary\" Select application package type net_istioctl_application.version yes string \"latest\" Select application package version net_istioctl_application.installed yes boolean true Set application package end state net_istioctl_paths yes(prepare) dictionary Set paths net_istioctl_paths.root yes string \"/opt/istioctl\" net_istioctl_owners yes(prepare) dictionary Define users net_istioctl_owners.root yes dictionary Define directory structure owner net_istioctl_owners.root.name yes string \"istioctl\" Set login name net_istioctl_owners.root.group yes string \"istioctl\" Set group name Deployment \u00b6 OS Compatibility \u00b6 The operating system compatibility list is defined in the variable: net_istioctl_platforms Dependencies \u00b6 Ansible Collections: serdigital64.backup bkp_archive serdigital64.system sys_package sys_repository sys_user Prerequisites \u00b6 The Ansible engine must be already installed and configured for privileged access and remote execution. In addition the following prerequisites can be automatically solved when running the playbook by setting the role action: resolve_prereq: true Package manager for the target application is installed and enabled. Installation Procedure \u00b6 Manually install Ansible Collections from the Ansible Galaxy repository: ansible-galaxy collection install serdigital64.network Automatic installation is also available by deploying A:Platform64 Contributing \u00b6 Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details. Author \u00b6 SerDigital64 License \u00b6 GPL-3.0-or-later","title":"net_istioctl"},{"location":"roles/net_istioctl/#ansible-role-serdigital64networknet_istioctl","text":"","title":"Ansible Role: serdigital64.network.net_istioctl"},{"location":"roles/net_istioctl/#purpose","text":"Manage provisioning of IstioCtl. Supported features in the current version: Prepare environment for application deployment. Deploy application. Packages are defined in the variable net_istioctl_profiles . The net_istioctl Ansible-Role is part of the A:Platform64 project and is available in the network Ansible-Collection.","title":"Purpose"},{"location":"roles/net_istioctl/#usage","text":"The following example is an Ansible Playbook that includes all the supported features: use this link if viewing the doc on github --- - name : \"Network / IstioCtl / Usage example\" hosts : \"localhost\" gather_facts : true tasks : - name : \"Example: Install IstioCtl\" vars : net_istio : resolve_prereq : true deploy : true ansible.builtin.include_role : name : \"serdigital64.network.net_istio\" ... The playbook can be run by executing: # Set ANSIBLE_COLLECTIONS_PATHS to the default location. Change as needed. ANSIBLE_COLLECTIONS_PATHS = \" ${ HOME } /.ansible/collections\" ansible-playbook \" ${ ANSIBLE_COLLECTIONS_PATHS } /ansible_collections/serdigital64/network/playbooks/net_istioctl.yml\"","title":"Usage"},{"location":"roles/net_istioctl/#role-parameters","text":"","title":"Role Parameters"},{"location":"roles/net_istioctl/#actions","text":"Use action-parameters to control what tasks are enabled for the role to execute. Parameters should be declared as task level vars as they are intented to be dynamic. net_istioctl : resolve_prereq : prepare : deploy : Parameter Required? Type Default Purpose / Value net_istioctl.resolve_prereq no boolean false Enable automatic resolution of prequisites net_istioctl.prepare no boolean false Enable environment preparation net_istioctl.deploy no boolean false Enable installation of application packages","title":"Actions"},{"location":"roles/net_istioctl/#end-state","text":"Use end-state parameters to define the target state after role execution. Parameters should be declared in host_vars or group_vars as they are intended to be permanent. net_istioctl_application : name : type : version : installed : net_istioctl_paths : root : net_istioctl_owners : root : name : group : Parameter Required? Type Default Purpose / Value net_istioctl_application yes(deploy) dictionary Set application package end state net_istioctl_application.name yes string \"istioctl\" Select application package name net_istioctl_application.type yes string \"binary\" Select application package type net_istioctl_application.version yes string \"latest\" Select application package version net_istioctl_application.installed yes boolean true Set application package end state net_istioctl_paths yes(prepare) dictionary Set paths net_istioctl_paths.root yes string \"/opt/istioctl\" net_istioctl_owners yes(prepare) dictionary Define users net_istioctl_owners.root yes dictionary Define directory structure owner net_istioctl_owners.root.name yes string \"istioctl\" Set login name net_istioctl_owners.root.group yes string \"istioctl\" Set group name","title":"End State"},{"location":"roles/net_istioctl/#deployment","text":"","title":"Deployment"},{"location":"roles/net_istioctl/#os-compatibility","text":"The operating system compatibility list is defined in the variable: net_istioctl_platforms","title":"OS Compatibility"},{"location":"roles/net_istioctl/#dependencies","text":"Ansible Collections: serdigital64.backup bkp_archive serdigital64.system sys_package sys_repository sys_user","title":"Dependencies"},{"location":"roles/net_istioctl/#prerequisites","text":"The Ansible engine must be already installed and configured for privileged access and remote execution. In addition the following prerequisites can be automatically solved when running the playbook by setting the role action: resolve_prereq: true Package manager for the target application is installed and enabled.","title":"Prerequisites"},{"location":"roles/net_istioctl/#installation-procedure","text":"Manually install Ansible Collections from the Ansible Galaxy repository: ansible-galaxy collection install serdigital64.network Automatic installation is also available by deploying A:Platform64","title":"Installation Procedure"},{"location":"roles/net_istioctl/#contributing","text":"Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details.","title":"Contributing"},{"location":"roles/net_istioctl/#author","text":"SerDigital64","title":"Author"},{"location":"roles/net_istioctl/#license","text":"GPL-3.0-or-later","title":"License"},{"location":"roles/sec_firewall_os/","text":"Ansible Role: serdigital64.security.sec_firewall_os \u00b6 Purpose \u00b6 Manage provisioning of Operating System native Firewall Supported features in the current version: Deploy application. Packages are defined in the variable sec_firewall_os_profiles . Configure application subsystem. Services are defined in the variable sec_firewall_os_subsystems . Provision Firewall rules: firewalld The sec_firewall_os Ansible-Role is part of the A:Platform64 project and is available in the security Ansible-Collection. Usage \u00b6 The following example is an Ansible Playbook that includes all the supported features: use this link if viewing the doc on github --- - name : \"Security / Firewall / OS / Usage example\" hosts : \"localhost\" gather_facts : true tasks : - name : \"Example: Install, setup and start os firewall\" vars : sec_firewall_os : resolve_prereq : true deploy : true setup : true provision : true control : true sec_firewall_os_subsystem : enabled : true status : \"started\" sec_firewall_os_rules : - id : \"ssh_allow\" zone : \"public\" service : \"ssh\" allow : true ansible.builtin.include_role : name : \"serdigital64.security.sec_firewall_os\" ... The playbook can be run by executing: # Set ANSIBLE_COLLECTIONS_PATHS to the default install location. Change as needed. ANSIBLE_COLLECTIONS_PATHS = \" ${ HOME } /.ansible/collections\" ansible-playbook \" ${ ANSIBLE_COLLECTIONS_PATHS } /ansible_collections/serdigital64/security/playbooks/sec_firewall_os.yml\" Role Parameters \u00b6 Actions \u00b6 Use action-parameters to control what tasks are enabled for the role to execute. Parameters should be declared as task level vars as they are intented to be dynamic. sec_firewall_os : resolve_prereq : deploy : setup : control : provision : Parameter Required? Type Default Purpose / Value sec_firewall_os.resolve_prereq no boolean false Enable automatic resolution of prequisites sec_firewall_os.deploy no boolean false Enable installation of application packages sec_firewall_os.setup no boolean false Enable application configuration sec_firewall_os.control no boolean false Enable application subsystem service control sec_firewall_os.provision no boolean false Enable firewall rules provisioning End State \u00b6 Use end-state parameters to define the target state after role execution. Parameters should be declared in host_vars or group_vars as they are intended to be permanent. sec_firewall_os_application : name : type : version : installed : sec_firewall_os_subsystem : enabled : status : sec_firewall_os_rules : - id : zone : service : port : allow : Parameter Required? Type Default Purpose / Value sec_firewall_os_application no dictionary Set application package end state sec_firewall_os_application.name no string \"firewall_manager\" Select application package name sec_firewall_os_application.type no string \"distro\" Select application package type sec_firewall_os_application.version no string \"latest\" Select application package version sec_firewall_os_application.installed no boolean true Set application package end state sec_firewall_os_subsystem no dictionary Set application subsystem end state sec_firewall_os_subsystem.enabled no boolean false Enable the subsystem? sec_firewall_os_subsystem.status no string \"stopped\" Set the service state sec_firewall_os_rules no list List of firewall rules sec_firewall_os_rules.0.id yes string Short name to identify the rule from others sec_firewall_os_rules.0.zone yes string Apply the rule to this zone sec_firewall_os_rules.0.service no string Set the target service sec_firewall_os_rules.0.port no string Set the target port sec_firewall_os_rules.0.allow yes boolean Set the rule to allow or deny traffic Deployment \u00b6 OS Compatibility \u00b6 CentOS8 RedHat8 AlmaLinux8 OracleLinux8 Fedora33 Fedora35 Ubuntu20 Ubuntu21 Debian10 Debian11 Dependencies \u00b6 Ansible Collections: ansible.posix firewalld serdigital64.system sys_package sys_repository Python Modules firewalld Prerequisites \u00b6 The Ansible engine must be already installed and configured for privileged access and remote execution. In addition the following prerequisites can be automatically solved when running the playbook by setting the role action: resolve_prereq: true Package manager for the target application is installed and enabled. Installation Procedure \u00b6 Manually install Ansible Collections from the Ansible Galaxy repository: ansible-galaxy collection install --upgrade serdigital64.security Automatic installation is also available by deploying A:Platform64 Contributing \u00b6 Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details. Author \u00b6 SerDigital64 License \u00b6 GPL-3.0-or-later","title":"sec_firewall_os"},{"location":"roles/sec_firewall_os/#ansible-role-serdigital64securitysec_firewall_os","text":"","title":"Ansible Role: serdigital64.security.sec_firewall_os"},{"location":"roles/sec_firewall_os/#purpose","text":"Manage provisioning of Operating System native Firewall Supported features in the current version: Deploy application. Packages are defined in the variable sec_firewall_os_profiles . Configure application subsystem. Services are defined in the variable sec_firewall_os_subsystems . Provision Firewall rules: firewalld The sec_firewall_os Ansible-Role is part of the A:Platform64 project and is available in the security Ansible-Collection.","title":"Purpose"},{"location":"roles/sec_firewall_os/#usage","text":"The following example is an Ansible Playbook that includes all the supported features: use this link if viewing the doc on github --- - name : \"Security / Firewall / OS / Usage example\" hosts : \"localhost\" gather_facts : true tasks : - name : \"Example: Install, setup and start os firewall\" vars : sec_firewall_os : resolve_prereq : true deploy : true setup : true provision : true control : true sec_firewall_os_subsystem : enabled : true status : \"started\" sec_firewall_os_rules : - id : \"ssh_allow\" zone : \"public\" service : \"ssh\" allow : true ansible.builtin.include_role : name : \"serdigital64.security.sec_firewall_os\" ... The playbook can be run by executing: # Set ANSIBLE_COLLECTIONS_PATHS to the default install location. Change as needed. ANSIBLE_COLLECTIONS_PATHS = \" ${ HOME } /.ansible/collections\" ansible-playbook \" ${ ANSIBLE_COLLECTIONS_PATHS } /ansible_collections/serdigital64/security/playbooks/sec_firewall_os.yml\"","title":"Usage"},{"location":"roles/sec_firewall_os/#role-parameters","text":"","title":"Role Parameters"},{"location":"roles/sec_firewall_os/#actions","text":"Use action-parameters to control what tasks are enabled for the role to execute. Parameters should be declared as task level vars as they are intented to be dynamic. sec_firewall_os : resolve_prereq : deploy : setup : control : provision : Parameter Required? Type Default Purpose / Value sec_firewall_os.resolve_prereq no boolean false Enable automatic resolution of prequisites sec_firewall_os.deploy no boolean false Enable installation of application packages sec_firewall_os.setup no boolean false Enable application configuration sec_firewall_os.control no boolean false Enable application subsystem service control sec_firewall_os.provision no boolean false Enable firewall rules provisioning","title":"Actions"},{"location":"roles/sec_firewall_os/#end-state","text":"Use end-state parameters to define the target state after role execution. Parameters should be declared in host_vars or group_vars as they are intended to be permanent. sec_firewall_os_application : name : type : version : installed : sec_firewall_os_subsystem : enabled : status : sec_firewall_os_rules : - id : zone : service : port : allow : Parameter Required? Type Default Purpose / Value sec_firewall_os_application no dictionary Set application package end state sec_firewall_os_application.name no string \"firewall_manager\" Select application package name sec_firewall_os_application.type no string \"distro\" Select application package type sec_firewall_os_application.version no string \"latest\" Select application package version sec_firewall_os_application.installed no boolean true Set application package end state sec_firewall_os_subsystem no dictionary Set application subsystem end state sec_firewall_os_subsystem.enabled no boolean false Enable the subsystem? sec_firewall_os_subsystem.status no string \"stopped\" Set the service state sec_firewall_os_rules no list List of firewall rules sec_firewall_os_rules.0.id yes string Short name to identify the rule from others sec_firewall_os_rules.0.zone yes string Apply the rule to this zone sec_firewall_os_rules.0.service no string Set the target service sec_firewall_os_rules.0.port no string Set the target port sec_firewall_os_rules.0.allow yes boolean Set the rule to allow or deny traffic","title":"End State"},{"location":"roles/sec_firewall_os/#deployment","text":"","title":"Deployment"},{"location":"roles/sec_firewall_os/#os-compatibility","text":"CentOS8 RedHat8 AlmaLinux8 OracleLinux8 Fedora33 Fedora35 Ubuntu20 Ubuntu21 Debian10 Debian11","title":"OS Compatibility"},{"location":"roles/sec_firewall_os/#dependencies","text":"Ansible Collections: ansible.posix firewalld serdigital64.system sys_package sys_repository Python Modules firewalld","title":"Dependencies"},{"location":"roles/sec_firewall_os/#prerequisites","text":"The Ansible engine must be already installed and configured for privileged access and remote execution. In addition the following prerequisites can be automatically solved when running the playbook by setting the role action: resolve_prereq: true Package manager for the target application is installed and enabled.","title":"Prerequisites"},{"location":"roles/sec_firewall_os/#installation-procedure","text":"Manually install Ansible Collections from the Ansible Galaxy repository: ansible-galaxy collection install --upgrade serdigital64.security Automatic installation is also available by deploying A:Platform64","title":"Installation Procedure"},{"location":"roles/sec_firewall_os/#contributing","text":"Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details.","title":"Contributing"},{"location":"roles/sec_firewall_os/#author","text":"SerDigital64","title":"Author"},{"location":"roles/sec_firewall_os/#license","text":"GPL-3.0-or-later","title":"License"},{"location":"roles/sec_key_ssh/","text":"Ansible Role: serdigital64.security.sec_key_ssh \u00b6 Purpose \u00b6 Manage SSH Keys provisioning. Supported features in the current version: Create private/public key pairs Install public key from file or string to remote user@host Register remote host as known The sec_key_ssh Ansible-Role is part of the A:Platform64 project and is available in the security Ansible-Collection. Usage \u00b6 The following example is an Ansible Playbook that includes all the supported features: use this link if viewing the doc on github --- - name : \"Security / Key / SSH / Usage example\" hosts : \"localhost\" gather_facts : true vars : test_user : \"{{ lookup('env', 'USER') }}\" test_group : \"{{ test_user }}\" test_home : \"/home/{{ test_user }}\" test_repo : \"/home/{{ test_user }}/keys\" test_host : \"localhost\" pre_tasks : - name : \"Create key path\" ansible.builtin.file : state : \"directory\" mode : \"0700\" path : \"{{ test_repo }}\" tasks : - name : \"Example: Create OpenSSH RSA private/public key pair\" vars : sec_key_ssh : setup : true sec_key_ssh_pairs : - file : \"rsa-4096b\" path : \"{{ test_repo }}\" owner : \"{{ test_user }}\" group : \"{{ test_group }}\" type : \"rsa\" size : \"4096\" ansible.builtin.include_role : name : \"serdigital64.security.sec_key_ssh\" - name : \"Example: Register host in known_hosts file\" vars : sec_key_ssh : setup : true sec_key_ssh_knownhosts : - file : \"{{ test_repo }}/known_hosts\" owner : \"{{ test_user }}\" group : \"{{ test_group }}\" hash : false hosts : - \"{{ test_host }}\" ansible.builtin.include_role : name : \"serdigital64.security.sec_key_ssh\" ... The playbook can be run by executing: # Set ANSIBLE_COLLECTIONS_PATHS to the default location. Change as needed. ANSIBLE_COLLECTIONS_PATHS = \" ${ HOME } /.ansible/collections\" ansible-playbook \" ${ ANSIBLE_COLLECTIONS_PATHS } /ansible_collections/serdigital64/security/playbooks/sec_key_ssh.yml\" Role Parameters \u00b6 Actions \u00b6 Use action-parameters to control what tasks are enabled for the role to execute. Parameters should be declared as task level vars as they are intented to be dynamic. sec_key_ssh : setup : Parameter Required? Type Default Purpose / Value sec_key_ssh.setup no boolean false Enable SSH key setup tasks End State \u00b6 Use end-state parameters to define the target state after role execution. Parameters should be declared in host_vars or group_vars as they are intended to be permanent. sec_key_ssh_pairs : - file : path : owner : group : type : size : sec_key_ssh_remotes : - key_file : key_string : host : user : sec_key_ssh_knownhosts : - file : owner : group : hash : hosts : Parameter Required? Type Default Purpose / Value sec_key_ssh_pairs no list Define list of ssh key pairs sec_key_ssh_pairs.0.file yes string Private key file name. Public file will add the .pub extension sec_key_ssh_pairs.0.path yes string Full path where the key pair will be written to sec_key_ssh_pairs.0.owner yes string Key pair owner sec_key_ssh_pairs.0.group yes string Key pair group owner sec_key_ssh_pairs.0.type no string Key pair type. Valid format as in ssh-keygen sec_key_ssh_pairs.0.size no string Key pair size sec_key_ssh_remotes no list Define list of remote hosts where public keys will be installed to sec_key_ssh_remotes.0.key_file yes string Full path to the public key file in the source host sec_key_ssh_remotes.0.key_string yes string Public key content. If set ignore key_file sec_key_ssh_remotes.0.host yes string Host name where the key will be installed to sec_key_ssh_remotes.0.user yes string To what user the key will be installed to sec_key_ssh_knownhosts no list Define list of hosts to register as known sec_key_ssh_knownhosts.0.file yes string Full path to the known_hosts file sec_key_ssh_knownhosts.0.owner yes string Known_hosts file owner sec_key_ssh_knownhosts.0.group yes string Known_hosts file group owner sec_key_ssh_knownhosts.0.hash no bolean false Hash the hostname before registering? sec_key_ssh_knownhosts.0.hosts yes list List of hosts to register in the known_hosts file. Use FQDNs Deployment \u00b6 OS Compatibility \u00b6 CentOS8 RedHat8 AlmaLinux8 OracleLinux8 Ubuntu20 Ubuntu21 Fedora33 Fedora35 Debian10 Debian11 Dependencies \u00b6 Ansible Collections: community.crypto openssh_keypair ansible.posix authorized_key Prerequisites \u00b6 The Ansible engine must be already installed and configured for privileged access and remote execution. In addition the following prerequisites must be met: Packages: OpenSSH Client Installation Procedure \u00b6 Manually install Ansible Collections from the Ansible Galaxy repository: ansible-galaxy collection install --upgrade serdigital64.security Automatic installation is also available by deploying A:Platform64 Contributing \u00b6 Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details. Author \u00b6 SerDigital64 License \u00b6 GPL-3.0-or-later","title":"sec_key_ssh"},{"location":"roles/sec_key_ssh/#ansible-role-serdigital64securitysec_key_ssh","text":"","title":"Ansible Role: serdigital64.security.sec_key_ssh"},{"location":"roles/sec_key_ssh/#purpose","text":"Manage SSH Keys provisioning. Supported features in the current version: Create private/public key pairs Install public key from file or string to remote user@host Register remote host as known The sec_key_ssh Ansible-Role is part of the A:Platform64 project and is available in the security Ansible-Collection.","title":"Purpose"},{"location":"roles/sec_key_ssh/#usage","text":"The following example is an Ansible Playbook that includes all the supported features: use this link if viewing the doc on github --- - name : \"Security / Key / SSH / Usage example\" hosts : \"localhost\" gather_facts : true vars : test_user : \"{{ lookup('env', 'USER') }}\" test_group : \"{{ test_user }}\" test_home : \"/home/{{ test_user }}\" test_repo : \"/home/{{ test_user }}/keys\" test_host : \"localhost\" pre_tasks : - name : \"Create key path\" ansible.builtin.file : state : \"directory\" mode : \"0700\" path : \"{{ test_repo }}\" tasks : - name : \"Example: Create OpenSSH RSA private/public key pair\" vars : sec_key_ssh : setup : true sec_key_ssh_pairs : - file : \"rsa-4096b\" path : \"{{ test_repo }}\" owner : \"{{ test_user }}\" group : \"{{ test_group }}\" type : \"rsa\" size : \"4096\" ansible.builtin.include_role : name : \"serdigital64.security.sec_key_ssh\" - name : \"Example: Register host in known_hosts file\" vars : sec_key_ssh : setup : true sec_key_ssh_knownhosts : - file : \"{{ test_repo }}/known_hosts\" owner : \"{{ test_user }}\" group : \"{{ test_group }}\" hash : false hosts : - \"{{ test_host }}\" ansible.builtin.include_role : name : \"serdigital64.security.sec_key_ssh\" ... The playbook can be run by executing: # Set ANSIBLE_COLLECTIONS_PATHS to the default location. Change as needed. ANSIBLE_COLLECTIONS_PATHS = \" ${ HOME } /.ansible/collections\" ansible-playbook \" ${ ANSIBLE_COLLECTIONS_PATHS } /ansible_collections/serdigital64/security/playbooks/sec_key_ssh.yml\"","title":"Usage"},{"location":"roles/sec_key_ssh/#role-parameters","text":"","title":"Role Parameters"},{"location":"roles/sec_key_ssh/#actions","text":"Use action-parameters to control what tasks are enabled for the role to execute. Parameters should be declared as task level vars as they are intented to be dynamic. sec_key_ssh : setup : Parameter Required? Type Default Purpose / Value sec_key_ssh.setup no boolean false Enable SSH key setup tasks","title":"Actions"},{"location":"roles/sec_key_ssh/#end-state","text":"Use end-state parameters to define the target state after role execution. Parameters should be declared in host_vars or group_vars as they are intended to be permanent. sec_key_ssh_pairs : - file : path : owner : group : type : size : sec_key_ssh_remotes : - key_file : key_string : host : user : sec_key_ssh_knownhosts : - file : owner : group : hash : hosts : Parameter Required? Type Default Purpose / Value sec_key_ssh_pairs no list Define list of ssh key pairs sec_key_ssh_pairs.0.file yes string Private key file name. Public file will add the .pub extension sec_key_ssh_pairs.0.path yes string Full path where the key pair will be written to sec_key_ssh_pairs.0.owner yes string Key pair owner sec_key_ssh_pairs.0.group yes string Key pair group owner sec_key_ssh_pairs.0.type no string Key pair type. Valid format as in ssh-keygen sec_key_ssh_pairs.0.size no string Key pair size sec_key_ssh_remotes no list Define list of remote hosts where public keys will be installed to sec_key_ssh_remotes.0.key_file yes string Full path to the public key file in the source host sec_key_ssh_remotes.0.key_string yes string Public key content. If set ignore key_file sec_key_ssh_remotes.0.host yes string Host name where the key will be installed to sec_key_ssh_remotes.0.user yes string To what user the key will be installed to sec_key_ssh_knownhosts no list Define list of hosts to register as known sec_key_ssh_knownhosts.0.file yes string Full path to the known_hosts file sec_key_ssh_knownhosts.0.owner yes string Known_hosts file owner sec_key_ssh_knownhosts.0.group yes string Known_hosts file group owner sec_key_ssh_knownhosts.0.hash no bolean false Hash the hostname before registering? sec_key_ssh_knownhosts.0.hosts yes list List of hosts to register in the known_hosts file. Use FQDNs","title":"End State"},{"location":"roles/sec_key_ssh/#deployment","text":"","title":"Deployment"},{"location":"roles/sec_key_ssh/#os-compatibility","text":"CentOS8 RedHat8 AlmaLinux8 OracleLinux8 Ubuntu20 Ubuntu21 Fedora33 Fedora35 Debian10 Debian11","title":"OS Compatibility"},{"location":"roles/sec_key_ssh/#dependencies","text":"Ansible Collections: community.crypto openssh_keypair ansible.posix authorized_key","title":"Dependencies"},{"location":"roles/sec_key_ssh/#prerequisites","text":"The Ansible engine must be already installed and configured for privileged access and remote execution. In addition the following prerequisites must be met: Packages: OpenSSH Client","title":"Prerequisites"},{"location":"roles/sec_key_ssh/#installation-procedure","text":"Manually install Ansible Collections from the Ansible Galaxy repository: ansible-galaxy collection install --upgrade serdigital64.security Automatic installation is also available by deploying A:Platform64","title":"Installation Procedure"},{"location":"roles/sec_key_ssh/#contributing","text":"Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details.","title":"Contributing"},{"location":"roles/sec_key_ssh/#author","text":"SerDigital64","title":"Author"},{"location":"roles/sec_key_ssh/#license","text":"GPL-3.0-or-later","title":"License"},{"location":"roles/sec_openssh_client/","text":"Ansible Role: serdigital64.security.sec_openssh_client \u00b6 Purpose \u00b6 Manage provisioning of OpenSSH client. Supported features in the current version: Deploy application. Packages are defined in the variable sec_openssh_client_profiles . The sec_openssh_client Ansible-Role is part of the A:Platform64 project and is available in the security Ansible-Collection. Usage \u00b6 The following example is an Ansible Playbook that includes all the supported features: use this link if viewing the doc on github --- - name : \"Security / OpenSSH / Client / Usage example\" hosts : \"localhost\" gather_facts : true tasks : - name : \"Example: Install distro native OpenSSH client package\" vars : sec_openssh_client : resolve_prereq : true deploy : true ansible.builtin.include_role : name : \"serdigital64.security.sec_openssh_client\" ... The playbook can be run by executing: # Set ANSIBLE_COLLECTIONS_PATHS to the default install location. Change as needed. ANSIBLE_COLLECTIONS_PATHS = \" ${ HOME } /.ansible/collections\" ansible-playbook \" ${ ANSIBLE_COLLECTIONS_PATHS } /ansible_collections/serdigital64/security/playbooks/sec_openssh_client.yml\" Role Parameters \u00b6 Actions \u00b6 Use action-parameters to control what tasks are enabled for the role to execute. Parameters should be declared as task level vars as they are intented to be dynamic. sec_openssh_client : resolve_prereq : deploy : Parameter Required? Type Default Purpose / Value sec_openssh_client.resolve_prereq no boolean false Enable automatic resolution of prequisites sec_openssh_client.deploy no boolean false Enable installation of application package End State \u00b6 Use end-state parameters to define the target state after role execution. Parameters should be declared in host_vars or group_vars as they are intended to be permanent. sec_openssh_client_application : name : type : version : installed : Parameter Required? Type Default Purpose / Value sec_openssh_client_application no dictionary Set application package end state sec_openssh_client_application.name no string \"openssh_client\" Select application package name sec_openssh_client_application.type no string \"distro\" Select application package type sec_openssh_client_application.version no string \"latest\" Select application package version sec_openssh_client_application.installed no boolean true Set application package end state Deployment \u00b6 OS Compatibility \u00b6 CentOS8 RedHat8 AlmaLinux8 OracleLinux8 Ubuntu20 Ubuntu21 Fedora33 Fedora35 Debian10 Debian11 Dependencies \u00b6 Ansible Collections: serdigital64.backup bkp_archive serdigital64.system sys_package sys_repository Prerequisites \u00b6 The Ansible engine must be already installed and configured for privileged access and remote execution. In addition the following prerequisites can be automatically solved when running the playbook by setting the role action: resolve_prereq: true Package manager for the target application is installed and enabled. Installation Procedure \u00b6 Manually install Ansible Collections from the Ansible Galaxy repository: ansible-galaxy collection install --upgrade serdigital64.security Automatic installation is also available by deploying A:Platform64 Contributing \u00b6 Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details. Author \u00b6 SerDigital64 License \u00b6 GPL-3.0-or-later","title":"sec_openssh_client"},{"location":"roles/sec_openssh_client/#ansible-role-serdigital64securitysec_openssh_client","text":"","title":"Ansible Role: serdigital64.security.sec_openssh_client"},{"location":"roles/sec_openssh_client/#purpose","text":"Manage provisioning of OpenSSH client. Supported features in the current version: Deploy application. Packages are defined in the variable sec_openssh_client_profiles . The sec_openssh_client Ansible-Role is part of the A:Platform64 project and is available in the security Ansible-Collection.","title":"Purpose"},{"location":"roles/sec_openssh_client/#usage","text":"The following example is an Ansible Playbook that includes all the supported features: use this link if viewing the doc on github --- - name : \"Security / OpenSSH / Client / Usage example\" hosts : \"localhost\" gather_facts : true tasks : - name : \"Example: Install distro native OpenSSH client package\" vars : sec_openssh_client : resolve_prereq : true deploy : true ansible.builtin.include_role : name : \"serdigital64.security.sec_openssh_client\" ... The playbook can be run by executing: # Set ANSIBLE_COLLECTIONS_PATHS to the default install location. Change as needed. ANSIBLE_COLLECTIONS_PATHS = \" ${ HOME } /.ansible/collections\" ansible-playbook \" ${ ANSIBLE_COLLECTIONS_PATHS } /ansible_collections/serdigital64/security/playbooks/sec_openssh_client.yml\"","title":"Usage"},{"location":"roles/sec_openssh_client/#role-parameters","text":"","title":"Role Parameters"},{"location":"roles/sec_openssh_client/#actions","text":"Use action-parameters to control what tasks are enabled for the role to execute. Parameters should be declared as task level vars as they are intented to be dynamic. sec_openssh_client : resolve_prereq : deploy : Parameter Required? Type Default Purpose / Value sec_openssh_client.resolve_prereq no boolean false Enable automatic resolution of prequisites sec_openssh_client.deploy no boolean false Enable installation of application package","title":"Actions"},{"location":"roles/sec_openssh_client/#end-state","text":"Use end-state parameters to define the target state after role execution. Parameters should be declared in host_vars or group_vars as they are intended to be permanent. sec_openssh_client_application : name : type : version : installed : Parameter Required? Type Default Purpose / Value sec_openssh_client_application no dictionary Set application package end state sec_openssh_client_application.name no string \"openssh_client\" Select application package name sec_openssh_client_application.type no string \"distro\" Select application package type sec_openssh_client_application.version no string \"latest\" Select application package version sec_openssh_client_application.installed no boolean true Set application package end state","title":"End State"},{"location":"roles/sec_openssh_client/#deployment","text":"","title":"Deployment"},{"location":"roles/sec_openssh_client/#os-compatibility","text":"CentOS8 RedHat8 AlmaLinux8 OracleLinux8 Ubuntu20 Ubuntu21 Fedora33 Fedora35 Debian10 Debian11","title":"OS Compatibility"},{"location":"roles/sec_openssh_client/#dependencies","text":"Ansible Collections: serdigital64.backup bkp_archive serdigital64.system sys_package sys_repository","title":"Dependencies"},{"location":"roles/sec_openssh_client/#prerequisites","text":"The Ansible engine must be already installed and configured for privileged access and remote execution. In addition the following prerequisites can be automatically solved when running the playbook by setting the role action: resolve_prereq: true Package manager for the target application is installed and enabled.","title":"Prerequisites"},{"location":"roles/sec_openssh_client/#installation-procedure","text":"Manually install Ansible Collections from the Ansible Galaxy repository: ansible-galaxy collection install --upgrade serdigital64.security Automatic installation is also available by deploying A:Platform64","title":"Installation Procedure"},{"location":"roles/sec_openssh_client/#contributing","text":"Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details.","title":"Contributing"},{"location":"roles/sec_openssh_client/#author","text":"SerDigital64","title":"Author"},{"location":"roles/sec_openssh_client/#license","text":"GPL-3.0-or-later","title":"License"},{"location":"roles/sec_openssh_server/","text":"Ansible Role: serdigital64.security.sec_openssh_server \u00b6 Purpose \u00b6 Manage provisioning of OpenSSH server. Supported features in the current version: Deploy application. Packages are defined in the variable sec_openssh_server_profiles . The sec_openssh_server Ansible-Role is part of the A:Platform64 project and is available in the security Ansible-Collection. Usage \u00b6 The following example is an Ansible Playbook that includes all the supported features: use this link if viewing the doc on github --- - name : \"Security / OpenSSH / Server / Usage example\" hosts : \"localhost\" gather_facts : true tasks : - name : \"Example: Install OpenSSH server and xAuth\" vars : sec_openssh_server : resolve_prereq : true deploy : true sec_openssh_server_options : xauth : true ansible.builtin.include_role : name : \"serdigital64.security.sec_openssh_server\" ... The playbook can be run by executing: # Set ANSIBLE_COLLECTIONS_PATHS to the default install location. Change as needed. ANSIBLE_COLLECTIONS_PATHS = \" ${ HOME } /.ansible/collections\" ansible-playbook \" ${ ANSIBLE_COLLECTIONS_PATHS } /ansible_collections/serdigital64/security/playbooks/sec_openssh_server.yml\" Role Parameters \u00b6 Actions \u00b6 Use action-parameters to control what tasks are enabled for the role to execute. Parameters should be declared as task level vars as they are intented to be dynamic. sec_openssh_server : resolve_prereq : deploy : Parameter Required? Type Default Purpose / Value sec_openssh_server.resolve_prereq no boolean false Enable automatic resolution of prequisites sec_openssh_server.deploy no boolean false Enable installation of application package End State \u00b6 Use end-state parameters to define the target state after role execution. Parameters should be declared in host_vars or group_vars as they are intended to be permanent. sec_openssh_server_application : name : type : version : installed : sec_openssh_server_options : xauth : Parameter Required? Type Default Purpose / Value sec_openssh_server_application no dictionary Set application package end state sec_openssh_server_application.name no string \"openssh_server\" Select application package name sec_openssh_server_application.type no string \"distro\" Select application package type sec_openssh_server_application.version no string \"latest\" Select application package version sec_openssh_server_application.installed no boolean true Set application package end state sec_openssh_server_options no dictionary Select optional components sec_openssh_server_options.xauth no boolean false Enable XAuth support Deployment \u00b6 OS Compatibility \u00b6 CentOS8 RedHat8 AlmaLinux8 OracleLinux8 Ubuntu20 Ubuntu21 Fedora33 Fedora35 Debian10 Debian11 Dependencies \u00b6 Ansible Collections: serdigital64.backup bkp_archive serdigital64.system sys_package sys_repository Prerequisites \u00b6 The Ansible engine must be already installed and configured for privileged access and remote execution. In addition the following prerequisites can be automatically solved when running the playbook by setting the role action: resolve_prereq: true Package manager for the target application is installed and enabled. Installation Procedure \u00b6 Manually install Ansible Collections from the Ansible Galaxy repository: ansible-galaxy collection install --upgrade serdigital64.security Automatic installation is also available by deploying A:Platform64 Contributing \u00b6 Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details. Author \u00b6 SerDigital64 License \u00b6 GPL-3.0-or-later","title":"sec_openssh_server"},{"location":"roles/sec_openssh_server/#ansible-role-serdigital64securitysec_openssh_server","text":"","title":"Ansible Role: serdigital64.security.sec_openssh_server"},{"location":"roles/sec_openssh_server/#purpose","text":"Manage provisioning of OpenSSH server. Supported features in the current version: Deploy application. Packages are defined in the variable sec_openssh_server_profiles . The sec_openssh_server Ansible-Role is part of the A:Platform64 project and is available in the security Ansible-Collection.","title":"Purpose"},{"location":"roles/sec_openssh_server/#usage","text":"The following example is an Ansible Playbook that includes all the supported features: use this link if viewing the doc on github --- - name : \"Security / OpenSSH / Server / Usage example\" hosts : \"localhost\" gather_facts : true tasks : - name : \"Example: Install OpenSSH server and xAuth\" vars : sec_openssh_server : resolve_prereq : true deploy : true sec_openssh_server_options : xauth : true ansible.builtin.include_role : name : \"serdigital64.security.sec_openssh_server\" ... The playbook can be run by executing: # Set ANSIBLE_COLLECTIONS_PATHS to the default install location. Change as needed. ANSIBLE_COLLECTIONS_PATHS = \" ${ HOME } /.ansible/collections\" ansible-playbook \" ${ ANSIBLE_COLLECTIONS_PATHS } /ansible_collections/serdigital64/security/playbooks/sec_openssh_server.yml\"","title":"Usage"},{"location":"roles/sec_openssh_server/#role-parameters","text":"","title":"Role Parameters"},{"location":"roles/sec_openssh_server/#actions","text":"Use action-parameters to control what tasks are enabled for the role to execute. Parameters should be declared as task level vars as they are intented to be dynamic. sec_openssh_server : resolve_prereq : deploy : Parameter Required? Type Default Purpose / Value sec_openssh_server.resolve_prereq no boolean false Enable automatic resolution of prequisites sec_openssh_server.deploy no boolean false Enable installation of application package","title":"Actions"},{"location":"roles/sec_openssh_server/#end-state","text":"Use end-state parameters to define the target state after role execution. Parameters should be declared in host_vars or group_vars as they are intended to be permanent. sec_openssh_server_application : name : type : version : installed : sec_openssh_server_options : xauth : Parameter Required? Type Default Purpose / Value sec_openssh_server_application no dictionary Set application package end state sec_openssh_server_application.name no string \"openssh_server\" Select application package name sec_openssh_server_application.type no string \"distro\" Select application package type sec_openssh_server_application.version no string \"latest\" Select application package version sec_openssh_server_application.installed no boolean true Set application package end state sec_openssh_server_options no dictionary Select optional components sec_openssh_server_options.xauth no boolean false Enable XAuth support","title":"End State"},{"location":"roles/sec_openssh_server/#deployment","text":"","title":"Deployment"},{"location":"roles/sec_openssh_server/#os-compatibility","text":"CentOS8 RedHat8 AlmaLinux8 OracleLinux8 Ubuntu20 Ubuntu21 Fedora33 Fedora35 Debian10 Debian11","title":"OS Compatibility"},{"location":"roles/sec_openssh_server/#dependencies","text":"Ansible Collections: serdigital64.backup bkp_archive serdigital64.system sys_package sys_repository","title":"Dependencies"},{"location":"roles/sec_openssh_server/#prerequisites","text":"The Ansible engine must be already installed and configured for privileged access and remote execution. In addition the following prerequisites can be automatically solved when running the playbook by setting the role action: resolve_prereq: true Package manager for the target application is installed and enabled.","title":"Prerequisites"},{"location":"roles/sec_openssh_server/#installation-procedure","text":"Manually install Ansible Collections from the Ansible Galaxy repository: ansible-galaxy collection install --upgrade serdigital64.security Automatic installation is also available by deploying A:Platform64","title":"Installation Procedure"},{"location":"roles/sec_openssh_server/#contributing","text":"Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details.","title":"Contributing"},{"location":"roles/sec_openssh_server/#author","text":"SerDigital64","title":"Author"},{"location":"roles/sec_openssh_server/#license","text":"GPL-3.0-or-later","title":"License"},{"location":"roles/stg_autofs/","text":"Ansible Role: serdigital64.storage.stg_autofs \u00b6 Purpose \u00b6 Manage the AutoFS service Supported features in the current version: Prepare environment for application deployment: Create shared root path for mount points Deploy service. Packages are defined in the variable stg_autofs_profiles . Control service subsystem services. Services are defined in the variable stg_autofs_subsystems . Configure service subsystem server. Provision service components. Add autofs maps The stg_autofs Ansible-Role is part of the A:Platform64 project and is available in the storage Ansible-Collection. Usage \u00b6 The following example is an Ansible Playbook that includes all the supported features: use this link if viewing the doc on github --- - name : \"Storage / AutoFS / Usage example\" hosts : \"localhost\" gather_facts : true tasks : - name : \"Example: install AutoFS, configure service and provision map\" vars : stg_autofs : resolve_prereq : true deploy : true setup : true control : true provision : true stg_autofs_maps : - name : \"test\" mount : \"test\" shares : - source : \"test_source\" target : \"test_target\" options : \"ro\" ansible.builtin.include_role : name : \"serdigital64.storage.stg_autofs\" ... The playbook can be run by executing: # Set ANSIBLE_COLLECTIONS_PATHS to the default location. Change as needed. ANSIBLE_COLLECTIONS_PATHS = \" ${ HOME } /.ansible/collections\" ansible-playbook \" ${ ANSIBLE_COLLECTIONS_PATHS } /ansible_collections/serdigital64/storage/playbooks/stg_autofs.yml\" Role Parameters \u00b6 Actions \u00b6 Use action-parameters to control what tasks are enabled for the role to execute. Parameters should be declared as task level vars as they are intented to be dynamic. stg_autofs : resolve_prereq : prepare : deploy : setup : control : provision : Parameter Required? Type Default Purpose / Value stg_autofs.resolve_prereq no boolean false Enable automatic resolution of prequisites stg_autofs.prepare no boolean false Enable environment preparation stg_autofs.deploy no boolean false Enable installation of service packages stg_autofs.setup no boolean false Enable service configuration stg_autofs.control no boolean false Enable service subsystem service control stg_autofs.provision no boolean false Enable provisioning of service components End State \u00b6 Use end-state parameters to define the target state after role execution. Parameters should be declared in host_vars or group_vars as they are intended to be permanent. stg_autofs_service : name : type : version : installed : stg_autofs_subsystem : enabled : status : stg_autofs_server_options : root : timeout : logging : stg_autofs_maps : - name : mount : shares : - source : target : options : Parameter Required? Type Default Purpose / Value stg_autofs_service yes(deploy) dictionary Set service package end state stg_autofs_service.name yes(deploy) string \"autofs\" Select service package name stg_autofs_service.type yes(deploy) string \"distro\" Select service package type stg_autofs_service.version yes(deploy) string \"latest\" Select service package version stg_autofs_service.installed yes(deploy) boolean true Set service package end state stg_autofs_subsystem yes(control) dictionary Set service subsystem end state stg_autofs_subsystem.enabled yes(control) boolean false Enable the subsystem? stg_autofs_subsystem.status yes(control) string \"stopped\" Set the service state stg_autofs_server_options no dictionary Set subsystem server options stg_autofs_server_options.root no string \"/autofs\" Base paths where map mount points will be created stg_autofs_server_options.logging no string \"none\" Logging level. Valid values defined in the variable stg_autofs_logging stg_autofs_server_options.timeout no string \"100\" Set autofs.timeout stg_autofs_maps yes(provision) list Provision autofs maps stg_autofs_maps.0.name yes(provision) string Map name stg_autofs_maps.0.mount yes(provision) string Directory where shares will be created. Relative tostg_autofs_server_options.root stg_autofs_maps.0.shares yes(provision) list List of shares to be added to the map stg_autofs_maps.0.shares.0.source yes(provision) string Source share to mount stg_autofs_maps.0.shares.0.target yes(provision) string Target directory to monitor stg_autofs_maps.0.shares.0.options yes(provision) string Share specific mount options Deployment \u00b6 OS Compatibility \u00b6 The operating system compatibility list is defined in the variable: stg_autofs_platforms Dependencies \u00b6 Ansible Collections: serdigital64.backup bkp_archive serdigital64.system sys_package sys_repository Prerequisites \u00b6 The Ansible engine must be already installed and configured for privileged access and remote execution. In addition the following prerequisites can be automatically solved when running the playbook by setting the role action: resolve_prereq: true Package manager for the target service is installed and enabled. Installation Procedure \u00b6 Manually install Ansible Collections from the Ansible Galaxy repository: ansible-galaxy collection install serdigital64.storage Automatic installation is also available by deploying A:Platform64 Contributing \u00b6 Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details. Author \u00b6 SerDigital64 License \u00b6 GPL-3.0-or-later","title":"stg_autofs"},{"location":"roles/stg_autofs/#ansible-role-serdigital64storagestg_autofs","text":"","title":"Ansible Role: serdigital64.storage.stg_autofs"},{"location":"roles/stg_autofs/#purpose","text":"Manage the AutoFS service Supported features in the current version: Prepare environment for application deployment: Create shared root path for mount points Deploy service. Packages are defined in the variable stg_autofs_profiles . Control service subsystem services. Services are defined in the variable stg_autofs_subsystems . Configure service subsystem server. Provision service components. Add autofs maps The stg_autofs Ansible-Role is part of the A:Platform64 project and is available in the storage Ansible-Collection.","title":"Purpose"},{"location":"roles/stg_autofs/#usage","text":"The following example is an Ansible Playbook that includes all the supported features: use this link if viewing the doc on github --- - name : \"Storage / AutoFS / Usage example\" hosts : \"localhost\" gather_facts : true tasks : - name : \"Example: install AutoFS, configure service and provision map\" vars : stg_autofs : resolve_prereq : true deploy : true setup : true control : true provision : true stg_autofs_maps : - name : \"test\" mount : \"test\" shares : - source : \"test_source\" target : \"test_target\" options : \"ro\" ansible.builtin.include_role : name : \"serdigital64.storage.stg_autofs\" ... The playbook can be run by executing: # Set ANSIBLE_COLLECTIONS_PATHS to the default location. Change as needed. ANSIBLE_COLLECTIONS_PATHS = \" ${ HOME } /.ansible/collections\" ansible-playbook \" ${ ANSIBLE_COLLECTIONS_PATHS } /ansible_collections/serdigital64/storage/playbooks/stg_autofs.yml\"","title":"Usage"},{"location":"roles/stg_autofs/#role-parameters","text":"","title":"Role Parameters"},{"location":"roles/stg_autofs/#actions","text":"Use action-parameters to control what tasks are enabled for the role to execute. Parameters should be declared as task level vars as they are intented to be dynamic. stg_autofs : resolve_prereq : prepare : deploy : setup : control : provision : Parameter Required? Type Default Purpose / Value stg_autofs.resolve_prereq no boolean false Enable automatic resolution of prequisites stg_autofs.prepare no boolean false Enable environment preparation stg_autofs.deploy no boolean false Enable installation of service packages stg_autofs.setup no boolean false Enable service configuration stg_autofs.control no boolean false Enable service subsystem service control stg_autofs.provision no boolean false Enable provisioning of service components","title":"Actions"},{"location":"roles/stg_autofs/#end-state","text":"Use end-state parameters to define the target state after role execution. Parameters should be declared in host_vars or group_vars as they are intended to be permanent. stg_autofs_service : name : type : version : installed : stg_autofs_subsystem : enabled : status : stg_autofs_server_options : root : timeout : logging : stg_autofs_maps : - name : mount : shares : - source : target : options : Parameter Required? Type Default Purpose / Value stg_autofs_service yes(deploy) dictionary Set service package end state stg_autofs_service.name yes(deploy) string \"autofs\" Select service package name stg_autofs_service.type yes(deploy) string \"distro\" Select service package type stg_autofs_service.version yes(deploy) string \"latest\" Select service package version stg_autofs_service.installed yes(deploy) boolean true Set service package end state stg_autofs_subsystem yes(control) dictionary Set service subsystem end state stg_autofs_subsystem.enabled yes(control) boolean false Enable the subsystem? stg_autofs_subsystem.status yes(control) string \"stopped\" Set the service state stg_autofs_server_options no dictionary Set subsystem server options stg_autofs_server_options.root no string \"/autofs\" Base paths where map mount points will be created stg_autofs_server_options.logging no string \"none\" Logging level. Valid values defined in the variable stg_autofs_logging stg_autofs_server_options.timeout no string \"100\" Set autofs.timeout stg_autofs_maps yes(provision) list Provision autofs maps stg_autofs_maps.0.name yes(provision) string Map name stg_autofs_maps.0.mount yes(provision) string Directory where shares will be created. Relative tostg_autofs_server_options.root stg_autofs_maps.0.shares yes(provision) list List of shares to be added to the map stg_autofs_maps.0.shares.0.source yes(provision) string Source share to mount stg_autofs_maps.0.shares.0.target yes(provision) string Target directory to monitor stg_autofs_maps.0.shares.0.options yes(provision) string Share specific mount options","title":"End State"},{"location":"roles/stg_autofs/#deployment","text":"","title":"Deployment"},{"location":"roles/stg_autofs/#os-compatibility","text":"The operating system compatibility list is defined in the variable: stg_autofs_platforms","title":"OS Compatibility"},{"location":"roles/stg_autofs/#dependencies","text":"Ansible Collections: serdigital64.backup bkp_archive serdigital64.system sys_package sys_repository","title":"Dependencies"},{"location":"roles/stg_autofs/#prerequisites","text":"The Ansible engine must be already installed and configured for privileged access and remote execution. In addition the following prerequisites can be automatically solved when running the playbook by setting the role action: resolve_prereq: true Package manager for the target service is installed and enabled.","title":"Prerequisites"},{"location":"roles/stg_autofs/#installation-procedure","text":"Manually install Ansible Collections from the Ansible Galaxy repository: ansible-galaxy collection install serdigital64.storage Automatic installation is also available by deploying A:Platform64","title":"Installation Procedure"},{"location":"roles/stg_autofs/#contributing","text":"Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details.","title":"Contributing"},{"location":"roles/stg_autofs/#author","text":"SerDigital64","title":"Author"},{"location":"roles/stg_autofs/#license","text":"GPL-3.0-or-later","title":"License"},{"location":"roles/stg_nfs_client/","text":"Ansible Role: serdigital64.storage.stg_nfs_client \u00b6 Purpose \u00b6 Manage the Linux NFS client Supported features in the current version: Prepare environment: Create main mount point path Deploy service. Packages are defined in the variable stg_nfs_client_profiles . Provision mounts: Create mount point Add entry to local fstab Set mount state (mounted,unmounted) The stg_nfs_client Ansible-Role is part of the A:Platform64 project and is available in the storage Ansible-Collection. Usage \u00b6 The following example is an Ansible Playbook that includes all the supported features: use this link if viewing the doc on github --- - name : \"Storage / NFS / Client / Usage example\" hosts : \"localhost\" gather_facts : true # Warning: in order for the playbook to run adjust the import definition to use an up&running NFS server tasks : - name : \"Example: install nfs, configure and mount remote shares\" vars : stg_nfs_client : resolve_prereq : true prepare : true deploy : true provision : true stg_nfs_client_imports : - name : \"test-share\" mount : \"test-share\" server : \"nfs-serverx\" share : \"remote-share\" options : \"ro\" mounted : \"true\" ansible.builtin.include_role : name : \"serdigital64.storage.stg_nfs_client\" ... The playbook can be run by executing: # Set ANSIBLE_COLLECTIONS_PATHS to the default location. Change as needed. ANSIBLE_COLLECTIONS_PATHS = \" ${ HOME } /.ansible/collections\" ansible-playbook \" ${ ANSIBLE_COLLECTIONS_PATHS } /ansible_collections/serdigital64/storage/playbooks/stg_nfs_client.yml\" Role Parameters \u00b6 Actions \u00b6 Use action-parameters to control what tasks are enabled for the role to execute. Parameters should be declared as task level vars as they are intented to be dynamic. stg_nfs_client : resolve_prereq : prepare : deploy : provision : Parameter Required? Type Default Purpose / Value stg_nfs_client.resolve_prereq no boolean false Enable automatic resolution of prequisites stg_nfs_client.prepare no boolean false Enable environment preparation stg_nfs_client.deploy no boolean false Enable installation of application packages stg_nfs_client.provision no boolean false Enable provisioning of application components End State \u00b6 Use end-state parameters to define the target state after role execution. Parameters should be declared in host_vars or group_vars as they are intended to be permanent. stg_nfs_client_application : name : type : version : installed : stg_nfs_client_paths : shares_root : stg_nfs_client_imports : - name : mount : server : share : options : owner : group : mode : mounted : Parameter Required? Type Default Purpose / Value stg_nfs_client_application yes(deploy) dictionary Set application package end state stg_nfs_client_application.name yes string \"nfs_client\" Select application package name stg_nfs_client_application.type yes string \"distro\" Select application package type stg_nfs_client_application.version yes string \"latest\" Select application package version stg_nfs_client_application.installed yes boolean true Set application package end state stg_nfs_client_paths yes(prepare) dictionary Set paths stg_nfs_client_paths.shares_root yes string \"/srv/nfs-client\" Location where mounts will be created stg_nfs_client_imports yes(provision) list stg_nfs_client_imports.0.name no string Share name stg_nfs_client_imports.0.mount yes string Local path where the share will be mounted. Relative to the root_path stg_nfs_client_imports.0.server yes string FQDN of the server exporting the share stg_nfs_client_imports.0.share yes string Remote share path stg_nfs_client_imports.0.options yes string Local mount options stg_nfs_client_imports.0.owner no string \"root\" Mount path owner stg_nfs_client_imports.0.group no string \"root\" Mount path group stg_nfs_client_imports.0.mode no string \"755 Mount path mode stg_nfs_client_imports.0.mounted no boolean true Mount the share? Deployment \u00b6 OS Compatibility \u00b6 The operating system compatibility list is defined in the variable: stg_nfs_client_platforms Dependencies \u00b6 Ansible Collections: serdigital64.backup bkp_archive serdigital64.system sys_package sys_repository ansible.posix mount Prerequisites \u00b6 The Ansible engine must be already installed and configured for privileged access and remote execution. In addition the following prerequisites can be automatically solved when running the playbook by setting the role action: resolve_prereq: true Package manager for the target application is installed and enabled. Installation Procedure \u00b6 Manually install Ansible Collections from the Ansible Galaxy repository: ansible-galaxy collection install serdigital64.storage Automatic installation is also available by deploying A:Platform64 Contributing \u00b6 Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details. Author \u00b6 SerDigital64 License \u00b6 GPL-3.0-or-later","title":"stg_nfs_client"},{"location":"roles/stg_nfs_client/#ansible-role-serdigital64storagestg_nfs_client","text":"","title":"Ansible Role: serdigital64.storage.stg_nfs_client"},{"location":"roles/stg_nfs_client/#purpose","text":"Manage the Linux NFS client Supported features in the current version: Prepare environment: Create main mount point path Deploy service. Packages are defined in the variable stg_nfs_client_profiles . Provision mounts: Create mount point Add entry to local fstab Set mount state (mounted,unmounted) The stg_nfs_client Ansible-Role is part of the A:Platform64 project and is available in the storage Ansible-Collection.","title":"Purpose"},{"location":"roles/stg_nfs_client/#usage","text":"The following example is an Ansible Playbook that includes all the supported features: use this link if viewing the doc on github --- - name : \"Storage / NFS / Client / Usage example\" hosts : \"localhost\" gather_facts : true # Warning: in order for the playbook to run adjust the import definition to use an up&running NFS server tasks : - name : \"Example: install nfs, configure and mount remote shares\" vars : stg_nfs_client : resolve_prereq : true prepare : true deploy : true provision : true stg_nfs_client_imports : - name : \"test-share\" mount : \"test-share\" server : \"nfs-serverx\" share : \"remote-share\" options : \"ro\" mounted : \"true\" ansible.builtin.include_role : name : \"serdigital64.storage.stg_nfs_client\" ... The playbook can be run by executing: # Set ANSIBLE_COLLECTIONS_PATHS to the default location. Change as needed. ANSIBLE_COLLECTIONS_PATHS = \" ${ HOME } /.ansible/collections\" ansible-playbook \" ${ ANSIBLE_COLLECTIONS_PATHS } /ansible_collections/serdigital64/storage/playbooks/stg_nfs_client.yml\"","title":"Usage"},{"location":"roles/stg_nfs_client/#role-parameters","text":"","title":"Role Parameters"},{"location":"roles/stg_nfs_client/#actions","text":"Use action-parameters to control what tasks are enabled for the role to execute. Parameters should be declared as task level vars as they are intented to be dynamic. stg_nfs_client : resolve_prereq : prepare : deploy : provision : Parameter Required? Type Default Purpose / Value stg_nfs_client.resolve_prereq no boolean false Enable automatic resolution of prequisites stg_nfs_client.prepare no boolean false Enable environment preparation stg_nfs_client.deploy no boolean false Enable installation of application packages stg_nfs_client.provision no boolean false Enable provisioning of application components","title":"Actions"},{"location":"roles/stg_nfs_client/#end-state","text":"Use end-state parameters to define the target state after role execution. Parameters should be declared in host_vars or group_vars as they are intended to be permanent. stg_nfs_client_application : name : type : version : installed : stg_nfs_client_paths : shares_root : stg_nfs_client_imports : - name : mount : server : share : options : owner : group : mode : mounted : Parameter Required? Type Default Purpose / Value stg_nfs_client_application yes(deploy) dictionary Set application package end state stg_nfs_client_application.name yes string \"nfs_client\" Select application package name stg_nfs_client_application.type yes string \"distro\" Select application package type stg_nfs_client_application.version yes string \"latest\" Select application package version stg_nfs_client_application.installed yes boolean true Set application package end state stg_nfs_client_paths yes(prepare) dictionary Set paths stg_nfs_client_paths.shares_root yes string \"/srv/nfs-client\" Location where mounts will be created stg_nfs_client_imports yes(provision) list stg_nfs_client_imports.0.name no string Share name stg_nfs_client_imports.0.mount yes string Local path where the share will be mounted. Relative to the root_path stg_nfs_client_imports.0.server yes string FQDN of the server exporting the share stg_nfs_client_imports.0.share yes string Remote share path stg_nfs_client_imports.0.options yes string Local mount options stg_nfs_client_imports.0.owner no string \"root\" Mount path owner stg_nfs_client_imports.0.group no string \"root\" Mount path group stg_nfs_client_imports.0.mode no string \"755 Mount path mode stg_nfs_client_imports.0.mounted no boolean true Mount the share?","title":"End State"},{"location":"roles/stg_nfs_client/#deployment","text":"","title":"Deployment"},{"location":"roles/stg_nfs_client/#os-compatibility","text":"The operating system compatibility list is defined in the variable: stg_nfs_client_platforms","title":"OS Compatibility"},{"location":"roles/stg_nfs_client/#dependencies","text":"Ansible Collections: serdigital64.backup bkp_archive serdigital64.system sys_package sys_repository ansible.posix mount","title":"Dependencies"},{"location":"roles/stg_nfs_client/#prerequisites","text":"The Ansible engine must be already installed and configured for privileged access and remote execution. In addition the following prerequisites can be automatically solved when running the playbook by setting the role action: resolve_prereq: true Package manager for the target application is installed and enabled.","title":"Prerequisites"},{"location":"roles/stg_nfs_client/#installation-procedure","text":"Manually install Ansible Collections from the Ansible Galaxy repository: ansible-galaxy collection install serdigital64.storage Automatic installation is also available by deploying A:Platform64","title":"Installation Procedure"},{"location":"roles/stg_nfs_client/#contributing","text":"Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details.","title":"Contributing"},{"location":"roles/stg_nfs_client/#author","text":"SerDigital64","title":"Author"},{"location":"roles/stg_nfs_client/#license","text":"GPL-3.0-or-later","title":"License"},{"location":"roles/stg_nfs_server/","text":"Ansible Role: serdigital64.storage.stg_nfs_server \u00b6 Purpose \u00b6 Manage the Linux NFS server Supported features in the current version: Deploy application. Packages are defined in the variable stg_nfs_server_profiles . Control application subsystem services. Services are defined in the variable stg_nfs_server_subsystems . Configure application subsystem server. Configure OS level firewall rules. Rules are defined in the varible stg_nfs_server_firewall_rules Provision application components: Add/Remove shares from the NFS exports list The stg_nfs_server Ansible-Role is part of the A:Platform64 project and is available in the storage Ansible-Collection. Usage \u00b6 The following example is an Ansible Playbook that includes all the supported features: use this link if viewing the doc on github --- - name : \"Storage / NFS / Server / Usage example\" hosts : \"localhost\" gather_facts : true tasks : - name : \"Example: install nfs, configure and export share\" vars : stg_nfs_server : resolve_prereq : true deploy : true setup : true provision : true stg_nfs_server_exports : - path : \"/mnt\" options : \"ro\" enabled : true ansible.builtin.include_role : name : \"serdigital64.storage.stg_nfs_server\" ... The playbook can be run by executing: # Set ANSIBLE_COLLECTIONS_PATHS to the default location. Change as needed. ANSIBLE_COLLECTIONS_PATHS = \" ${ HOME } /.ansible/collections\" ansible-playbook \" ${ ANSIBLE_COLLECTIONS_PATHS } /ansible_collections/serdigital64/storage/playbooks/stg_nfs_server.yml\" Role Parameters \u00b6 Actions \u00b6 Use action-parameters to control what tasks are enabled for the role to execute. Parameters should be declared as task level vars as they are intented to be dynamic. stg_nfs_server : resolve_prereq : deploy : setup : control : provision : Parameter Required? Type Default Purpose / Value stg_nfs_server.resolve_prereq no boolean false Enable automatic resolution of prequisites stg_nfs_server.deploy no boolean false Enable installation of application packages stg_nfs_server.setup no boolean false Enable application configuration stg_nfs_server.control no boolean false Enable application subsystem service control stg_nfs_server.provision no boolean false Enable provisioning of application components End State \u00b6 Use end-state parameters to define the target state after role execution. Parameters should be declared in host_vars or group_vars as they are intended to be permanent. stg_nfs_server_application : name : type : version : installed : stg_nfs_server_subsystem : enabled : status : stg_nfs_server_firewall : zone : stg_nfs_server_exports : - path : options : enabled : Parameter Required? Type Default Purpose / Value stg_nfs_server_application yes(deploy) dictionary Set application package end state stg_nfs_server_application.name yes string \"nfs_server\" Select application package name stg_nfs_server_application.type yes string \"distro\" Select application package type stg_nfs_server_application.version yes string \"latest\" Select application package version stg_nfs_server_application.installed yes boolean true Set application package end state stg_nfs_server_subsystem yes(control,setup) dictionary Set application subsystem end state stg_nfs_server_subsystem.enabled yes boolean false Enable the subsystem? stg_nfs_server_subsystem.status yes string \"stopped\" Set the service state stg_nfs_server_firewall yes(control,setup) dictionary OS Firewall options stg_nfs_server_firewall.zone yes string \"public\" Name of the target zone stg_nfs_server_exports yes(provision) dictionary List of NFS shares to export stg_nfs_server_exports.0.path yes string Full path stg_nfs_server_exports.0.options yes string NFS export optionss stg_nfs_server_exports.0.enabled yes boolean Enable the export? Deployment \u00b6 OS Compatibility \u00b6 The operating system compatibility list is defined in the variable: stg_nfs_server_platforms Dependencies \u00b6 Ansible Collections: serdigital64.backup bkp_archive serdigital64.system sys_package sys_repository serdigital64.security sec_firewall_os Prerequisites \u00b6 The Ansible engine must be already installed and configured for privileged access and remote execution. In addition the following prerequisites can be automatically solved when running the playbook by setting the role action: resolve_prereq: true Package manager for the target application is installed and enabled. Installation Procedure \u00b6 Manually install Ansible Collections from the Ansible Galaxy repository: ansible-galaxy collection install serdigital64.storage Automatic installation is also available by deploying A:Platform64 Contributing \u00b6 Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details. Author \u00b6 SerDigital64 License \u00b6 GPL-3.0-or-later","title":"stg_nfs_server"},{"location":"roles/stg_nfs_server/#ansible-role-serdigital64storagestg_nfs_server","text":"","title":"Ansible Role: serdigital64.storage.stg_nfs_server"},{"location":"roles/stg_nfs_server/#purpose","text":"Manage the Linux NFS server Supported features in the current version: Deploy application. Packages are defined in the variable stg_nfs_server_profiles . Control application subsystem services. Services are defined in the variable stg_nfs_server_subsystems . Configure application subsystem server. Configure OS level firewall rules. Rules are defined in the varible stg_nfs_server_firewall_rules Provision application components: Add/Remove shares from the NFS exports list The stg_nfs_server Ansible-Role is part of the A:Platform64 project and is available in the storage Ansible-Collection.","title":"Purpose"},{"location":"roles/stg_nfs_server/#usage","text":"The following example is an Ansible Playbook that includes all the supported features: use this link if viewing the doc on github --- - name : \"Storage / NFS / Server / Usage example\" hosts : \"localhost\" gather_facts : true tasks : - name : \"Example: install nfs, configure and export share\" vars : stg_nfs_server : resolve_prereq : true deploy : true setup : true provision : true stg_nfs_server_exports : - path : \"/mnt\" options : \"ro\" enabled : true ansible.builtin.include_role : name : \"serdigital64.storage.stg_nfs_server\" ... The playbook can be run by executing: # Set ANSIBLE_COLLECTIONS_PATHS to the default location. Change as needed. ANSIBLE_COLLECTIONS_PATHS = \" ${ HOME } /.ansible/collections\" ansible-playbook \" ${ ANSIBLE_COLLECTIONS_PATHS } /ansible_collections/serdigital64/storage/playbooks/stg_nfs_server.yml\"","title":"Usage"},{"location":"roles/stg_nfs_server/#role-parameters","text":"","title":"Role Parameters"},{"location":"roles/stg_nfs_server/#actions","text":"Use action-parameters to control what tasks are enabled for the role to execute. Parameters should be declared as task level vars as they are intented to be dynamic. stg_nfs_server : resolve_prereq : deploy : setup : control : provision : Parameter Required? Type Default Purpose / Value stg_nfs_server.resolve_prereq no boolean false Enable automatic resolution of prequisites stg_nfs_server.deploy no boolean false Enable installation of application packages stg_nfs_server.setup no boolean false Enable application configuration stg_nfs_server.control no boolean false Enable application subsystem service control stg_nfs_server.provision no boolean false Enable provisioning of application components","title":"Actions"},{"location":"roles/stg_nfs_server/#end-state","text":"Use end-state parameters to define the target state after role execution. Parameters should be declared in host_vars or group_vars as they are intended to be permanent. stg_nfs_server_application : name : type : version : installed : stg_nfs_server_subsystem : enabled : status : stg_nfs_server_firewall : zone : stg_nfs_server_exports : - path : options : enabled : Parameter Required? Type Default Purpose / Value stg_nfs_server_application yes(deploy) dictionary Set application package end state stg_nfs_server_application.name yes string \"nfs_server\" Select application package name stg_nfs_server_application.type yes string \"distro\" Select application package type stg_nfs_server_application.version yes string \"latest\" Select application package version stg_nfs_server_application.installed yes boolean true Set application package end state stg_nfs_server_subsystem yes(control,setup) dictionary Set application subsystem end state stg_nfs_server_subsystem.enabled yes boolean false Enable the subsystem? stg_nfs_server_subsystem.status yes string \"stopped\" Set the service state stg_nfs_server_firewall yes(control,setup) dictionary OS Firewall options stg_nfs_server_firewall.zone yes string \"public\" Name of the target zone stg_nfs_server_exports yes(provision) dictionary List of NFS shares to export stg_nfs_server_exports.0.path yes string Full path stg_nfs_server_exports.0.options yes string NFS export optionss stg_nfs_server_exports.0.enabled yes boolean Enable the export?","title":"End State"},{"location":"roles/stg_nfs_server/#deployment","text":"","title":"Deployment"},{"location":"roles/stg_nfs_server/#os-compatibility","text":"The operating system compatibility list is defined in the variable: stg_nfs_server_platforms","title":"OS Compatibility"},{"location":"roles/stg_nfs_server/#dependencies","text":"Ansible Collections: serdigital64.backup bkp_archive serdigital64.system sys_package sys_repository serdigital64.security sec_firewall_os","title":"Dependencies"},{"location":"roles/stg_nfs_server/#prerequisites","text":"The Ansible engine must be already installed and configured for privileged access and remote execution. In addition the following prerequisites can be automatically solved when running the playbook by setting the role action: resolve_prereq: true Package manager for the target application is installed and enabled.","title":"Prerequisites"},{"location":"roles/stg_nfs_server/#installation-procedure","text":"Manually install Ansible Collections from the Ansible Galaxy repository: ansible-galaxy collection install serdigital64.storage Automatic installation is also available by deploying A:Platform64","title":"Installation Procedure"},{"location":"roles/stg_nfs_server/#contributing","text":"Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details.","title":"Contributing"},{"location":"roles/stg_nfs_server/#author","text":"SerDigital64","title":"Author"},{"location":"roles/stg_nfs_server/#license","text":"GPL-3.0-or-later","title":"License"},{"location":"roles/stg_repository/","text":"Ansible Role: serdigital64.storage.stg_repository \u00b6 Purpose \u00b6 Manage file repositories provisioning. File repositories are simple directory structures that are created as resources for other roles to consume such as NFS servers, GIT servers, Samba servers, etc. Supported features in the current version: Provision repositories: Create repository owners Users Groups Create repository location Create directory Set ownership Set access permissions The stg_repository Ansible-Role is part of the A:Platform64 project and is available in the storage Ansible-Collection. Usage \u00b6 The following example is an Ansible Playbook that includes all the supported features: use this link if viewing the doc on github --- - name : \"Storage / Repository / Usage example\" hosts : \"localhost\" gather_facts : true vars : test_stg_repositories_resource : base : path : \"/srv/fs\" user : \"root\" group : \"root\" mode : \"0755\" test1 : path : \"/srv/fs/test1\" user : \"test1\" group : \"group1\" mode : \"0750\" test2 : path : \"/srv/fs/test2\" user : \"test2\" group : \"group2\" mode : \"0750\" test_stg_repositories_users : - name : \"test1\" uid : \"10000\" group : \"test1\" shell : \"/bin/false\" groups : - \"group1\" - name : \"test2\" uid : \"10001\" group : \"test2\" shell : \"/bin/false\" groups : - \"group2\" test_stg_repositories_groups : - name : \"group1\" gid : \"9000\" - name : \"group2\" gid : \"9001\" tasks : - name : \"Example: create owning group and user, create repository\" vars : stg_nfs_reposittory : prepare : true provision : true stg_repositories_users : \"{{ test_stg_repositories_users }}\" stg_repositories_groups : \"{{ test_stg_repositories_groups }}\" stg_repositories_resource : \"{{ test_stg_repositories_resource }}\" ansible.builtin.include_role : name : \"serdigital64.storage.stg_nfs_reposittory\" ... The playbook can be run by executing: # Set ANSIBLE_COLLECTIONS_PATHS to the default location. Change as needed. ANSIBLE_COLLECTIONS_PATHS = \" ${ HOME } /.ansible/collections\" ansible-playbook \" ${ ANSIBLE_COLLECTIONS_PATHS } /ansible_collections/serdigital64/storage/playbooks/stg_repository.yml\" Role Parameters \u00b6 Actions \u00b6 Use action-parameters to control what tasks are enabled for the role to execute. Parameters should be declared as task level vars as they are intented to be dynamic. stg_repository : prepare : provision : Parameter Required? Type Default Purpose / Value stg_repository.prepare no boolean false Enable creationg of owners stg_repository.provision no boolean false Enable provisioning of repositories End State \u00b6 Use end-state parameters to define the target state after role execution. Parameters should be declared in host_vars or group_vars as they are intended to be permanent. stg_repositories_resources : <SHARE> : path : user : group : mode : stg_repositories_users : - name : uid : group : shell : groups : - stg_repositories_groups : - name : gid : Parameter Required? Type Default Purpose / Value stg_repositories_resources yes(provision) dictionary Repositories catalog stg_repositories_resources. yes dictionary Repository definition stg_repositories_resources. .path yes string Full path stg_repositories_resources. .user yes string Owning user stg_repositories_resources. .group yes string Owning group stg_repositories_resources. .mode yes string Directory permissions (octal) stg_repositories_users no list Owning users catalog stg_repositories_users.0 no list Owning user definition stg_repositories_users.0.name yes string Login name stg_repositories_users.0.uid no string User ID stg_repositories_users.0.group no string Primary group name stg_repositories_users.0.shell no string Full path to the shell stg_repositories_users.0.groups no list List of secondary groups stg_repositories_users.0.groups.0.name no string Group name stg_repositories_groups no list Owning groups catalog stg_repositories_groups.0 no list Group definition stg_repositories_groups.0.name yes string Name stg_repositories_groups.0.gid no string Group ID Deployment \u00b6 OS Compatibility \u00b6 The operating system compatibility list is defined in the variable: stg_repository_platforms Dependencies \u00b6 Ansible Collections: serdigital64.system sys_user Prerequisites \u00b6 The Ansible engine must be already installed and configured for privileged access and remote execution. In addition the following prerequisites can be automatically solved when running the playbook by setting the role action: resolve_prereq: true Package manager for the target application is installed and enabled. Installation Procedure \u00b6 Manually install Ansible Collections from the Ansible Galaxy repository: ansible-galaxy collection install serdigital64.storage Automatic installation is also available by deploying A:Platform64 Contributing \u00b6 Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details. Author \u00b6 SerDigital64 License \u00b6 GPL-3.0-or-later","title":"stg_repository"},{"location":"roles/stg_repository/#ansible-role-serdigital64storagestg_repository","text":"","title":"Ansible Role: serdigital64.storage.stg_repository"},{"location":"roles/stg_repository/#purpose","text":"Manage file repositories provisioning. File repositories are simple directory structures that are created as resources for other roles to consume such as NFS servers, GIT servers, Samba servers, etc. Supported features in the current version: Provision repositories: Create repository owners Users Groups Create repository location Create directory Set ownership Set access permissions The stg_repository Ansible-Role is part of the A:Platform64 project and is available in the storage Ansible-Collection.","title":"Purpose"},{"location":"roles/stg_repository/#usage","text":"The following example is an Ansible Playbook that includes all the supported features: use this link if viewing the doc on github --- - name : \"Storage / Repository / Usage example\" hosts : \"localhost\" gather_facts : true vars : test_stg_repositories_resource : base : path : \"/srv/fs\" user : \"root\" group : \"root\" mode : \"0755\" test1 : path : \"/srv/fs/test1\" user : \"test1\" group : \"group1\" mode : \"0750\" test2 : path : \"/srv/fs/test2\" user : \"test2\" group : \"group2\" mode : \"0750\" test_stg_repositories_users : - name : \"test1\" uid : \"10000\" group : \"test1\" shell : \"/bin/false\" groups : - \"group1\" - name : \"test2\" uid : \"10001\" group : \"test2\" shell : \"/bin/false\" groups : - \"group2\" test_stg_repositories_groups : - name : \"group1\" gid : \"9000\" - name : \"group2\" gid : \"9001\" tasks : - name : \"Example: create owning group and user, create repository\" vars : stg_nfs_reposittory : prepare : true provision : true stg_repositories_users : \"{{ test_stg_repositories_users }}\" stg_repositories_groups : \"{{ test_stg_repositories_groups }}\" stg_repositories_resource : \"{{ test_stg_repositories_resource }}\" ansible.builtin.include_role : name : \"serdigital64.storage.stg_nfs_reposittory\" ... The playbook can be run by executing: # Set ANSIBLE_COLLECTIONS_PATHS to the default location. Change as needed. ANSIBLE_COLLECTIONS_PATHS = \" ${ HOME } /.ansible/collections\" ansible-playbook \" ${ ANSIBLE_COLLECTIONS_PATHS } /ansible_collections/serdigital64/storage/playbooks/stg_repository.yml\"","title":"Usage"},{"location":"roles/stg_repository/#role-parameters","text":"","title":"Role Parameters"},{"location":"roles/stg_repository/#actions","text":"Use action-parameters to control what tasks are enabled for the role to execute. Parameters should be declared as task level vars as they are intented to be dynamic. stg_repository : prepare : provision : Parameter Required? Type Default Purpose / Value stg_repository.prepare no boolean false Enable creationg of owners stg_repository.provision no boolean false Enable provisioning of repositories","title":"Actions"},{"location":"roles/stg_repository/#end-state","text":"Use end-state parameters to define the target state after role execution. Parameters should be declared in host_vars or group_vars as they are intended to be permanent. stg_repositories_resources : <SHARE> : path : user : group : mode : stg_repositories_users : - name : uid : group : shell : groups : - stg_repositories_groups : - name : gid : Parameter Required? Type Default Purpose / Value stg_repositories_resources yes(provision) dictionary Repositories catalog stg_repositories_resources. yes dictionary Repository definition stg_repositories_resources. .path yes string Full path stg_repositories_resources. .user yes string Owning user stg_repositories_resources. .group yes string Owning group stg_repositories_resources. .mode yes string Directory permissions (octal) stg_repositories_users no list Owning users catalog stg_repositories_users.0 no list Owning user definition stg_repositories_users.0.name yes string Login name stg_repositories_users.0.uid no string User ID stg_repositories_users.0.group no string Primary group name stg_repositories_users.0.shell no string Full path to the shell stg_repositories_users.0.groups no list List of secondary groups stg_repositories_users.0.groups.0.name no string Group name stg_repositories_groups no list Owning groups catalog stg_repositories_groups.0 no list Group definition stg_repositories_groups.0.name yes string Name stg_repositories_groups.0.gid no string Group ID","title":"End State"},{"location":"roles/stg_repository/#deployment","text":"","title":"Deployment"},{"location":"roles/stg_repository/#os-compatibility","text":"The operating system compatibility list is defined in the variable: stg_repository_platforms","title":"OS Compatibility"},{"location":"roles/stg_repository/#dependencies","text":"Ansible Collections: serdigital64.system sys_user","title":"Dependencies"},{"location":"roles/stg_repository/#prerequisites","text":"The Ansible engine must be already installed and configured for privileged access and remote execution. In addition the following prerequisites can be automatically solved when running the playbook by setting the role action: resolve_prereq: true Package manager for the target application is installed and enabled.","title":"Prerequisites"},{"location":"roles/stg_repository/#installation-procedure","text":"Manually install Ansible Collections from the Ansible Galaxy repository: ansible-galaxy collection install serdigital64.storage Automatic installation is also available by deploying A:Platform64","title":"Installation Procedure"},{"location":"roles/stg_repository/#contributing","text":"Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details.","title":"Contributing"},{"location":"roles/stg_repository/#author","text":"SerDigital64","title":"Author"},{"location":"roles/stg_repository/#license","text":"GPL-3.0-or-later","title":"License"},{"location":"roles/sys_dconf/","text":"Ansible Role: serdigital64.system.sys_dconf \u00b6 Purpose \u00b6 Manage provisioning of the DConf service. Supported features in the current version: Prepare environment for application deployment. Deploy application. Packages are defined in the variable sys_dconf_profiles . Configure application: Create user profile definition Provision default local DBs for the user profile The sys_dconf Ansible-Role is part of the A:Platform64 project and is available in the system Ansible-Collection. Usage \u00b6 The following example is an Ansible Playbook that includes all the supported features: use this link if viewing the doc on github --- - name : \"System / DConf / Usage example\" hosts : \"localhost\" gather_facts : true vars : test_source : {{ \"/dev/null\" }} # Replace this path with a valid dconf dump file tasks : - name : \"Example: Install dconf and configure default user profiles\" vars : sys_dconf : resolve_prereq : true prepare : true setup : true deploy : true provision : true sys_dconf_db_local : - source : \"{{ test_source }}\" name : \"test_db\" ansible.builtin.include_role : name : \"serdigital64.system.sys_dconf\" ... The playbook can be run by executing: # Set ANSIBLE_COLLECTIONS_PATHS to the default location. Change as needed. ANSIBLE_COLLECTIONS_PATHS = \" ${ HOME } /.ansible/collections\" ansible-playbook \" ${ ANSIBLE_COLLECTIONS_PATHS } /ansible_collections/serdigital64/system/playbooks/sys_dconf.yml\" Role Parameters \u00b6 Actions \u00b6 Use action-parameters to control what tasks are enabled for the role to execute. Parameters should be declared as task level vars as they are intented to be dynamic. sys_dconf : resolve_prereq : prepare : deploy : setup : provision : sys_dconf_db_local : - source : name : Parameter Required? Type Default Purpose / Value sys_dconf.resolve_prereq no boolean false Enable automatic resolution of prequisites sys_dconf.prepare no boolean false Enable environment preparation sys_dconf.deploy no boolean false Enable installation of application packages sys_dconf.setup no boolean false Enable application configuration sys_dconf.provision no boolean false Enable provisioning of application components sys_dconf_db_local yes(provision) list List of local dbs sys_dconf_db_local.0.source yes string Full path to the source db sys_dconf_db_local.0.name yes string DB name End State \u00b6 Use end-state parameters to define the target state after role execution. Parameters should be declared in host_vars or group_vars as they are intended to be permanent. Parameter Required? Type Default Purpose / Value Deployment \u00b6 OS Compatibility \u00b6 The operating system compatibility list is defined in the variable: sys_dconf_platforms Dependencies \u00b6 Ansible Collections: serdigital64.backup bkp_archive serdigital64.system sys_package sys_repository Prerequisites \u00b6 The Ansible engine must be already installed and configured for privileged access and remote execution. In addition the following prerequisites can be automatically solved when running the playbook by setting the role action: resolve_prereq: true Package manager for the target application is installed and enabled. Installation Procedure \u00b6 Manually install Ansible Collections from the Ansible Galaxy repository: ansible-galaxy collection install serdigital64.system Automatic installation is also available by deploying A:Platform64 Contributing \u00b6 Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details. Author \u00b6 SerDigital64 License \u00b6 GPL-3.0-or-later","title":"sys_dconf"},{"location":"roles/sys_dconf/#ansible-role-serdigital64systemsys_dconf","text":"","title":"Ansible Role: serdigital64.system.sys_dconf"},{"location":"roles/sys_dconf/#purpose","text":"Manage provisioning of the DConf service. Supported features in the current version: Prepare environment for application deployment. Deploy application. Packages are defined in the variable sys_dconf_profiles . Configure application: Create user profile definition Provision default local DBs for the user profile The sys_dconf Ansible-Role is part of the A:Platform64 project and is available in the system Ansible-Collection.","title":"Purpose"},{"location":"roles/sys_dconf/#usage","text":"The following example is an Ansible Playbook that includes all the supported features: use this link if viewing the doc on github --- - name : \"System / DConf / Usage example\" hosts : \"localhost\" gather_facts : true vars : test_source : {{ \"/dev/null\" }} # Replace this path with a valid dconf dump file tasks : - name : \"Example: Install dconf and configure default user profiles\" vars : sys_dconf : resolve_prereq : true prepare : true setup : true deploy : true provision : true sys_dconf_db_local : - source : \"{{ test_source }}\" name : \"test_db\" ansible.builtin.include_role : name : \"serdigital64.system.sys_dconf\" ... The playbook can be run by executing: # Set ANSIBLE_COLLECTIONS_PATHS to the default location. Change as needed. ANSIBLE_COLLECTIONS_PATHS = \" ${ HOME } /.ansible/collections\" ansible-playbook \" ${ ANSIBLE_COLLECTIONS_PATHS } /ansible_collections/serdigital64/system/playbooks/sys_dconf.yml\"","title":"Usage"},{"location":"roles/sys_dconf/#role-parameters","text":"","title":"Role Parameters"},{"location":"roles/sys_dconf/#actions","text":"Use action-parameters to control what tasks are enabled for the role to execute. Parameters should be declared as task level vars as they are intented to be dynamic. sys_dconf : resolve_prereq : prepare : deploy : setup : provision : sys_dconf_db_local : - source : name : Parameter Required? Type Default Purpose / Value sys_dconf.resolve_prereq no boolean false Enable automatic resolution of prequisites sys_dconf.prepare no boolean false Enable environment preparation sys_dconf.deploy no boolean false Enable installation of application packages sys_dconf.setup no boolean false Enable application configuration sys_dconf.provision no boolean false Enable provisioning of application components sys_dconf_db_local yes(provision) list List of local dbs sys_dconf_db_local.0.source yes string Full path to the source db sys_dconf_db_local.0.name yes string DB name","title":"Actions"},{"location":"roles/sys_dconf/#end-state","text":"Use end-state parameters to define the target state after role execution. Parameters should be declared in host_vars or group_vars as they are intended to be permanent. Parameter Required? Type Default Purpose / Value","title":"End State"},{"location":"roles/sys_dconf/#deployment","text":"","title":"Deployment"},{"location":"roles/sys_dconf/#os-compatibility","text":"The operating system compatibility list is defined in the variable: sys_dconf_platforms","title":"OS Compatibility"},{"location":"roles/sys_dconf/#dependencies","text":"Ansible Collections: serdigital64.backup bkp_archive serdigital64.system sys_package sys_repository","title":"Dependencies"},{"location":"roles/sys_dconf/#prerequisites","text":"The Ansible engine must be already installed and configured for privileged access and remote execution. In addition the following prerequisites can be automatically solved when running the playbook by setting the role action: resolve_prereq: true Package manager for the target application is installed and enabled.","title":"Prerequisites"},{"location":"roles/sys_dconf/#installation-procedure","text":"Manually install Ansible Collections from the Ansible Galaxy repository: ansible-galaxy collection install serdigital64.system Automatic installation is also available by deploying A:Platform64","title":"Installation Procedure"},{"location":"roles/sys_dconf/#contributing","text":"Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details.","title":"Contributing"},{"location":"roles/sys_dconf/#author","text":"SerDigital64","title":"Author"},{"location":"roles/sys_dconf/#license","text":"GPL-3.0-or-later","title":"License"},{"location":"roles/sys_fonts/","text":"Ansible Role: serdigital64.system.sys_fonts \u00b6 Purpose \u00b6 Manage optional OS fonts provisioning Supported features in the current version: Prepare environment for application deployment. Deploy font configuration tools. Packages are defined in the variable sys_fonts_profiles . Deploy fonts. Packages are defined in the variable sys_fonts_profiles . Meslo URW The sys_fonts Ansible-Role is part of the A:Platform64 project and is available in the system Ansible-Collection. Usage \u00b6 The following example is an Ansible Playbook that includes all the supported features: use this link if viewing the doc on github --- - name : \"System / Fonts / Usage example\" hosts : \"localhost\" gather_facts : true tasks : - name : \"Example: Install external fonts Meslo and URW\" vars : sys_fonts : resolve_prereq : true deploy : true sys_fonts_catalog : urw : true meslo : true ansible.builtin.include_role : name : \"serdigital64.system.sys_fonts\" ... The playbook can be run by executing: # Set ANSIBLE_COLLECTIONS_PATHS to the default install location. Change as needed. ANSIBLE_COLLECTIONS_PATHS = \" ${ HOME } /.ansible/collections\" ansible-playbook \" ${ ANSIBLE_COLLECTIONS_PATHS } /ansible_collections/serdigital64/system/playbooks/sys_fonts.yml\" Role Parameters \u00b6 Actions \u00b6 Use action-parameters to control what tasks are enabled for the role to execute. Parameters should be declared as task level vars as they are intented to be dynamic. sys_fonts : resolve_prereq : prepare : deploy : Parameter Required? Type Default Purpose / Value sys_fonts.resolve_prereq no boolean false Enable automatic resolution of prequisites sys_fonts.prepare no boolean false Enable environment preparation sys_fonts.deploy no boolean false Enable installation of application packages End State \u00b6 Use end-state parameters to define the target state after role execution. Parameters should be declared in host_vars or group_vars as they are intended to be permanent. sys_fonts_catalog : urw : meslo : Parameter Required? Type Default Purpose / Value sys_fonts_catalog no dictionary Define catalog options sys_fonts_catalog.urw no bool true Install the font? sys_fonts_catalog.meslo no bool true Install the font? Deployment \u00b6 OS Compatibility \u00b6 The operating system compatibility list is defined in the variable: sys_fonts_platforms Dependencies \u00b6 Ansible Collections: serdigital64.backup bkp_archive serdigital64.system sys_package sys_repository Prerequisites \u00b6 The Ansible engine must be already installed and configured for privileged access and remote execution. In addition the following prerequisites can be automatically solved when running the playbook by setting the role action: resolve_prereq: true Package manager for the target application is installed and enabled. Installation Procedure \u00b6 Manually install Ansible Collections from the Ansible Galaxy repository: ansible-galaxy collection install --upgrade serdigital64.system Automatic installation is also available by deploying A:Platform64 Contributing \u00b6 Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details. Author \u00b6 SerDigital64 License \u00b6 GPL-3.0-or-later","title":"sys_fonts"},{"location":"roles/sys_fonts/#ansible-role-serdigital64systemsys_fonts","text":"","title":"Ansible Role: serdigital64.system.sys_fonts"},{"location":"roles/sys_fonts/#purpose","text":"Manage optional OS fonts provisioning Supported features in the current version: Prepare environment for application deployment. Deploy font configuration tools. Packages are defined in the variable sys_fonts_profiles . Deploy fonts. Packages are defined in the variable sys_fonts_profiles . Meslo URW The sys_fonts Ansible-Role is part of the A:Platform64 project and is available in the system Ansible-Collection.","title":"Purpose"},{"location":"roles/sys_fonts/#usage","text":"The following example is an Ansible Playbook that includes all the supported features: use this link if viewing the doc on github --- - name : \"System / Fonts / Usage example\" hosts : \"localhost\" gather_facts : true tasks : - name : \"Example: Install external fonts Meslo and URW\" vars : sys_fonts : resolve_prereq : true deploy : true sys_fonts_catalog : urw : true meslo : true ansible.builtin.include_role : name : \"serdigital64.system.sys_fonts\" ... The playbook can be run by executing: # Set ANSIBLE_COLLECTIONS_PATHS to the default install location. Change as needed. ANSIBLE_COLLECTIONS_PATHS = \" ${ HOME } /.ansible/collections\" ansible-playbook \" ${ ANSIBLE_COLLECTIONS_PATHS } /ansible_collections/serdigital64/system/playbooks/sys_fonts.yml\"","title":"Usage"},{"location":"roles/sys_fonts/#role-parameters","text":"","title":"Role Parameters"},{"location":"roles/sys_fonts/#actions","text":"Use action-parameters to control what tasks are enabled for the role to execute. Parameters should be declared as task level vars as they are intented to be dynamic. sys_fonts : resolve_prereq : prepare : deploy : Parameter Required? Type Default Purpose / Value sys_fonts.resolve_prereq no boolean false Enable automatic resolution of prequisites sys_fonts.prepare no boolean false Enable environment preparation sys_fonts.deploy no boolean false Enable installation of application packages","title":"Actions"},{"location":"roles/sys_fonts/#end-state","text":"Use end-state parameters to define the target state after role execution. Parameters should be declared in host_vars or group_vars as they are intended to be permanent. sys_fonts_catalog : urw : meslo : Parameter Required? Type Default Purpose / Value sys_fonts_catalog no dictionary Define catalog options sys_fonts_catalog.urw no bool true Install the font? sys_fonts_catalog.meslo no bool true Install the font?","title":"End State"},{"location":"roles/sys_fonts/#deployment","text":"","title":"Deployment"},{"location":"roles/sys_fonts/#os-compatibility","text":"The operating system compatibility list is defined in the variable: sys_fonts_platforms","title":"OS Compatibility"},{"location":"roles/sys_fonts/#dependencies","text":"Ansible Collections: serdigital64.backup bkp_archive serdigital64.system sys_package sys_repository","title":"Dependencies"},{"location":"roles/sys_fonts/#prerequisites","text":"The Ansible engine must be already installed and configured for privileged access and remote execution. In addition the following prerequisites can be automatically solved when running the playbook by setting the role action: resolve_prereq: true Package manager for the target application is installed and enabled.","title":"Prerequisites"},{"location":"roles/sys_fonts/#installation-procedure","text":"Manually install Ansible Collections from the Ansible Galaxy repository: ansible-galaxy collection install --upgrade serdigital64.system Automatic installation is also available by deploying A:Platform64","title":"Installation Procedure"},{"location":"roles/sys_fonts/#contributing","text":"Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details.","title":"Contributing"},{"location":"roles/sys_fonts/#author","text":"SerDigital64","title":"Author"},{"location":"roles/sys_fonts/#license","text":"GPL-3.0-or-later","title":"License"},{"location":"roles/sys_gui_cinnamon/","text":"Ansible Role: serdigital64.system.sys_gui_cinnamon \u00b6 Purpose \u00b6 Manage provisioning of the Cinnamon desktop environment Supported features in the current version: Prepare environment for application deployment. Deploy application. Packages are defined in the variable sys_gui_cinnamon_profiles . Provision application components: Create user default configuration. Available sets are defined in the variable sys_gui_cinnamon_dconf_catalog : desktop (theme, panel) nemo Deploy to system-wide DConf as local db The sys_gui_cinnamon Ansible-Role is part of the A:Platform64 project and is available in the system Ansible-Collection. Usage \u00b6 The following example is an Ansible Playbook that includes all the supported features: use this link if viewing the doc on github --- - name : \"System / GUI / Cinnamon / Usage example\" hosts : \"localhost\" gather_facts : true tasks : - name : \"Example: Install Cinnamon desktop manager and deploy default user configuration\" vars : sys_gui_cinnamon : resolve_prereq : true prepare : true deploy : true provision : true ansible.builtin.include_role : name : \"serdigital64.system.sys_gui_cinnamon\" ... The playbook can be run by executing: # Set ANSIBLE_COLLECTIONS_PATHS to the default location. Change as needed. ANSIBLE_COLLECTIONS_PATHS = \" ${ HOME } /.ansible/collections\" ansible-playbook \" ${ ANSIBLE_COLLECTIONS_PATHS } /ansible_collections/serdigital64/system/playbooks/sys_gui_cinnamon.yml\" Role Parameters \u00b6 Actions \u00b6 Use action-parameters to control what tasks are enabled for the role to execute. Parameters should be declared as task level vars as they are intented to be dynamic. sys_gui_cinnamon : resolve_prereq : prepare : deploy : provision : Parameter Required? Type Default Purpose / Value sys_gui_cinnamon.resolve_prereq no boolean false Enable automatic resolution of prequisites sys_gui_cinnamon.prepare no boolean false Enable environment preparation sys_gui_cinnamon.deploy no boolean false Enable installation of application packages sys_gui_cinnamon.provision no boolean false Enable provisioning of application components End State \u00b6 Use end-state parameters to define the target state after role execution. Parameters should be declared in host_vars or group_vars as they are intended to be permanent. sys_gui_cinnamon_dconf : desktop : nemo : Parameter Required? Type Default Purpose / Value sys_gui_cinnamon_dconf yes(provision) dictionary Define user options sys_gui_cinnamon_dconf.desktop yes string \"desktop_adapta_nokto_v1\" Desktop configuration set sys_gui_cinnamon_dconf.nemo yes string \"nemo_v1\" Nemo configuration set name Deployment \u00b6 OS Compatibility \u00b6 The operating system compatibility list is defined in the variable: sys_gui_cinnamon_platforms Dependencies \u00b6 Ansible Collections: serdigital64.backup bkp_archive serdigital64.system sys_package sys_repository sys_dconf Prerequisites \u00b6 The Ansible engine must be already installed and configured for privileged access and remote execution. In addition the following prerequisites can be automatically solved when running the playbook by setting the role action: resolve_prereq: true Package manager for the target application is installed and enabled. Installation Procedure \u00b6 Manually install Ansible Collections from the Ansible Galaxy repository: ansible-galaxy collection install serdigital64.system Automatic installation is also available by deploying A:Platform64 Contributing \u00b6 Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details. Author \u00b6 SerDigital64 License \u00b6 GPL-3.0-or-later","title":"sys_gui_cinnamon"},{"location":"roles/sys_gui_cinnamon/#ansible-role-serdigital64systemsys_gui_cinnamon","text":"","title":"Ansible Role: serdigital64.system.sys_gui_cinnamon"},{"location":"roles/sys_gui_cinnamon/#purpose","text":"Manage provisioning of the Cinnamon desktop environment Supported features in the current version: Prepare environment for application deployment. Deploy application. Packages are defined in the variable sys_gui_cinnamon_profiles . Provision application components: Create user default configuration. Available sets are defined in the variable sys_gui_cinnamon_dconf_catalog : desktop (theme, panel) nemo Deploy to system-wide DConf as local db The sys_gui_cinnamon Ansible-Role is part of the A:Platform64 project and is available in the system Ansible-Collection.","title":"Purpose"},{"location":"roles/sys_gui_cinnamon/#usage","text":"The following example is an Ansible Playbook that includes all the supported features: use this link if viewing the doc on github --- - name : \"System / GUI / Cinnamon / Usage example\" hosts : \"localhost\" gather_facts : true tasks : - name : \"Example: Install Cinnamon desktop manager and deploy default user configuration\" vars : sys_gui_cinnamon : resolve_prereq : true prepare : true deploy : true provision : true ansible.builtin.include_role : name : \"serdigital64.system.sys_gui_cinnamon\" ... The playbook can be run by executing: # Set ANSIBLE_COLLECTIONS_PATHS to the default location. Change as needed. ANSIBLE_COLLECTIONS_PATHS = \" ${ HOME } /.ansible/collections\" ansible-playbook \" ${ ANSIBLE_COLLECTIONS_PATHS } /ansible_collections/serdigital64/system/playbooks/sys_gui_cinnamon.yml\"","title":"Usage"},{"location":"roles/sys_gui_cinnamon/#role-parameters","text":"","title":"Role Parameters"},{"location":"roles/sys_gui_cinnamon/#actions","text":"Use action-parameters to control what tasks are enabled for the role to execute. Parameters should be declared as task level vars as they are intented to be dynamic. sys_gui_cinnamon : resolve_prereq : prepare : deploy : provision : Parameter Required? Type Default Purpose / Value sys_gui_cinnamon.resolve_prereq no boolean false Enable automatic resolution of prequisites sys_gui_cinnamon.prepare no boolean false Enable environment preparation sys_gui_cinnamon.deploy no boolean false Enable installation of application packages sys_gui_cinnamon.provision no boolean false Enable provisioning of application components","title":"Actions"},{"location":"roles/sys_gui_cinnamon/#end-state","text":"Use end-state parameters to define the target state after role execution. Parameters should be declared in host_vars or group_vars as they are intended to be permanent. sys_gui_cinnamon_dconf : desktop : nemo : Parameter Required? Type Default Purpose / Value sys_gui_cinnamon_dconf yes(provision) dictionary Define user options sys_gui_cinnamon_dconf.desktop yes string \"desktop_adapta_nokto_v1\" Desktop configuration set sys_gui_cinnamon_dconf.nemo yes string \"nemo_v1\" Nemo configuration set name","title":"End State"},{"location":"roles/sys_gui_cinnamon/#deployment","text":"","title":"Deployment"},{"location":"roles/sys_gui_cinnamon/#os-compatibility","text":"The operating system compatibility list is defined in the variable: sys_gui_cinnamon_platforms","title":"OS Compatibility"},{"location":"roles/sys_gui_cinnamon/#dependencies","text":"Ansible Collections: serdigital64.backup bkp_archive serdigital64.system sys_package sys_repository sys_dconf","title":"Dependencies"},{"location":"roles/sys_gui_cinnamon/#prerequisites","text":"The Ansible engine must be already installed and configured for privileged access and remote execution. In addition the following prerequisites can be automatically solved when running the playbook by setting the role action: resolve_prereq: true Package manager for the target application is installed and enabled.","title":"Prerequisites"},{"location":"roles/sys_gui_cinnamon/#installation-procedure","text":"Manually install Ansible Collections from the Ansible Galaxy repository: ansible-galaxy collection install serdigital64.system Automatic installation is also available by deploying A:Platform64","title":"Installation Procedure"},{"location":"roles/sys_gui_cinnamon/#contributing","text":"Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details.","title":"Contributing"},{"location":"roles/sys_gui_cinnamon/#author","text":"SerDigital64","title":"Author"},{"location":"roles/sys_gui_cinnamon/#license","text":"GPL-3.0-or-later","title":"License"},{"location":"roles/sys_kernel/","text":"Ansible Role: serdigital64.system.sys_kernel \u00b6 Purpose \u00b6 Manage OS Kernel configuration. Supported features in the current version: Provision sysctl tool Control Kernel subsystem tunables: network filesystem The sys_kernel Ansible-Role is part of the A:Platform64 project and is available in the system Ansible-Collection. Usage \u00b6 The following example is an Ansible Playbook that includes all the supported features: use this link if viewing the doc on github --- - name : \"System / Kernel / Usage example\" hosts : \"localhost\" gather_facts : true tasks : - name : \"Example: Enable IPv4 Forwarding\" vars : sys_kernel : resolve_prereq : true deploy : true setup : true sys_kernel_tunables : net : ipv4 : ip_forward : true ansible.builtin.include_role : name : \"serdigital64.system.sys_kernel\" ... The playbook can be run by executing: # Set ANSIBLE_COLLECTIONS_PATHS to the default install location. Change as needed. ANSIBLE_COLLECTIONS_PATHS = \" ${ HOME } /.ansible/collections\" ansible-playbook \" ${ ANSIBLE_COLLECTIONS_PATHS } /ansible_collections/serdigital64/system/playbooks/sys_kernel.yml\" Role Parameters \u00b6 Actions \u00b6 Use action-parameters to control what tasks are enabled for the role to execute. Parameters should be declared as task level vars as they are intented to be dynamic. sys_kernel : resolve_prereq : deploy : setup : Parameter Required? Type Default Purpose / Value sys_kernel.resolve_prereq no boolean false Enable automatic resolution of prequisites sys_kernel.deploy no boolean false Enable installation of application packages sys_kernel.setup no boolean false Enable application configuration End State \u00b6 Use end-state parameters to define the target state after role execution. Parameters should be declared in host_vars or group_vars as they are intended to be permanent. sys_kernel_tunables : net : ipv4 : ip_forward : fs : file_max : inotify : max_queued_events : max_user_instances : max_user_watches : Parameter Required? Type Default Purpose / Value sys_kernel_tunables no dictionary Set kernel tunables sys_kernel_tunables.net no dictionary Tune network subsystem sys_kernel_tunables.net.ipv4 no dictionary Set IPv4 tunables sys_kernel_tunables.net.ipv4.ip_forwad no boolean Set tunable sys_kernel_tunables.fs no dictionary Tune filesystem subsystem sys_kernel_tunables.fs.file_max no string Set tunable sys_kernel_tunables.fs.inotify no dictionary Set inotify tunables sys_kernel_tunables.fs.inotify.max_queued_events no string Set tunable sys_kernel_tunables.fs.inotify.max_user_instances no string Set tunable sys_kernel_tunables.fs.inotify.max_user_watches no string Set tunable Deployment \u00b6 OS Compatibility \u00b6 The operating system compatibility list is defined in the variable: sys_kernel_platforms Dependencies \u00b6 Ansible Collections: serdigital64.backup bkp_archive serdigital64.system sys_package sys_repository ansible.posix sysctl Prerequisites \u00b6 The Ansible engine must be already installed and configured for privileged access and remote execution. In addition the following prerequisites can be automatically solved when running the playbook by setting the role action: resolve_prereq: true Package manager for the target application is installed and enabled. Installation Procedure \u00b6 Manually install Ansible Collections from the Ansible Galaxy repository: ansible-galaxy collection install --upgrade serdigital64.system Automatic installation is also available by deploying A:Platform64 Contributing \u00b6 Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details. Author \u00b6 SerDigital64 License \u00b6 GPL-3.0-or-later","title":"sys_kernel"},{"location":"roles/sys_kernel/#ansible-role-serdigital64systemsys_kernel","text":"","title":"Ansible Role: serdigital64.system.sys_kernel"},{"location":"roles/sys_kernel/#purpose","text":"Manage OS Kernel configuration. Supported features in the current version: Provision sysctl tool Control Kernel subsystem tunables: network filesystem The sys_kernel Ansible-Role is part of the A:Platform64 project and is available in the system Ansible-Collection.","title":"Purpose"},{"location":"roles/sys_kernel/#usage","text":"The following example is an Ansible Playbook that includes all the supported features: use this link if viewing the doc on github --- - name : \"System / Kernel / Usage example\" hosts : \"localhost\" gather_facts : true tasks : - name : \"Example: Enable IPv4 Forwarding\" vars : sys_kernel : resolve_prereq : true deploy : true setup : true sys_kernel_tunables : net : ipv4 : ip_forward : true ansible.builtin.include_role : name : \"serdigital64.system.sys_kernel\" ... The playbook can be run by executing: # Set ANSIBLE_COLLECTIONS_PATHS to the default install location. Change as needed. ANSIBLE_COLLECTIONS_PATHS = \" ${ HOME } /.ansible/collections\" ansible-playbook \" ${ ANSIBLE_COLLECTIONS_PATHS } /ansible_collections/serdigital64/system/playbooks/sys_kernel.yml\"","title":"Usage"},{"location":"roles/sys_kernel/#role-parameters","text":"","title":"Role Parameters"},{"location":"roles/sys_kernel/#actions","text":"Use action-parameters to control what tasks are enabled for the role to execute. Parameters should be declared as task level vars as they are intented to be dynamic. sys_kernel : resolve_prereq : deploy : setup : Parameter Required? Type Default Purpose / Value sys_kernel.resolve_prereq no boolean false Enable automatic resolution of prequisites sys_kernel.deploy no boolean false Enable installation of application packages sys_kernel.setup no boolean false Enable application configuration","title":"Actions"},{"location":"roles/sys_kernel/#end-state","text":"Use end-state parameters to define the target state after role execution. Parameters should be declared in host_vars or group_vars as they are intended to be permanent. sys_kernel_tunables : net : ipv4 : ip_forward : fs : file_max : inotify : max_queued_events : max_user_instances : max_user_watches : Parameter Required? Type Default Purpose / Value sys_kernel_tunables no dictionary Set kernel tunables sys_kernel_tunables.net no dictionary Tune network subsystem sys_kernel_tunables.net.ipv4 no dictionary Set IPv4 tunables sys_kernel_tunables.net.ipv4.ip_forwad no boolean Set tunable sys_kernel_tunables.fs no dictionary Tune filesystem subsystem sys_kernel_tunables.fs.file_max no string Set tunable sys_kernel_tunables.fs.inotify no dictionary Set inotify tunables sys_kernel_tunables.fs.inotify.max_queued_events no string Set tunable sys_kernel_tunables.fs.inotify.max_user_instances no string Set tunable sys_kernel_tunables.fs.inotify.max_user_watches no string Set tunable","title":"End State"},{"location":"roles/sys_kernel/#deployment","text":"","title":"Deployment"},{"location":"roles/sys_kernel/#os-compatibility","text":"The operating system compatibility list is defined in the variable: sys_kernel_platforms","title":"OS Compatibility"},{"location":"roles/sys_kernel/#dependencies","text":"Ansible Collections: serdigital64.backup bkp_archive serdigital64.system sys_package sys_repository ansible.posix sysctl","title":"Dependencies"},{"location":"roles/sys_kernel/#prerequisites","text":"The Ansible engine must be already installed and configured for privileged access and remote execution. In addition the following prerequisites can be automatically solved when running the playbook by setting the role action: resolve_prereq: true Package manager for the target application is installed and enabled.","title":"Prerequisites"},{"location":"roles/sys_kernel/#installation-procedure","text":"Manually install Ansible Collections from the Ansible Galaxy repository: ansible-galaxy collection install --upgrade serdigital64.system Automatic installation is also available by deploying A:Platform64","title":"Installation Procedure"},{"location":"roles/sys_kernel/#contributing","text":"Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details.","title":"Contributing"},{"location":"roles/sys_kernel/#author","text":"SerDigital64","title":"Author"},{"location":"roles/sys_kernel/#license","text":"GPL-3.0-or-later","title":"License"},{"location":"roles/sys_mc/","text":"Ansible Role: serdigital64.system.sys_mc \u00b6 Purpose \u00b6 Manage provisioning of the Midnight Commander tool Supported features in the current version: Deploy application. Packages are defined in the variable sys_mc_profiles . Setup application: Create default user configuration The sys_mc Ansible-Role is part of the A:Platform64 project and is available in the system Ansible-Collection. Usage \u00b6 The following example is an Ansible Playbook that includes all the supported features: use this link if viewing the doc on github --- - name : \"System / MC / Usage example\" hosts : \"localhost\" gather_facts : true vars : target_user : \"{{ lookup('env','USER') }}\" target_users : - name : \"{{ target_user }}\" group : \"{{ target_user }}\" home : \"/home/{{ target_user }}\" tasks : - name : \"Example: Install MC tool and deploy default user configuration\" vars : sys_mc : resolve_prereq : true deploy : true setup : true sys_mc_users : \"{{ target_users }}\" ansible.builtin.include_role : name : \"serdigital64.system.sys_mc\" ... The playbook can be run by executing: # Set ANSIBLE_COLLECTIONS_PATHS to the default location. Change as needed. ANSIBLE_COLLECTIONS_PATHS = \" ${ HOME } /.ansible/collections\" ansible-playbook \" ${ ANSIBLE_COLLECTIONS_PATHS } /ansible_collections/serdigital64/system/playbooks/sys_mc.yml\" Role Parameters \u00b6 Actions \u00b6 Use action-parameters to control what tasks are enabled for the role to execute. Parameters should be declared as task level vars as they are intented to be dynamic. sys_mc : resolve_prereq : deploy : setup : Parameter Required? Type Default Purpose / Value sys_mc.resolve_prereq no boolean false Enable automatic resolution of prequisites sys_mc.deploy no boolean false Enable installation of application packages sys_mc.setup no boolean false Enable application configuration End State \u00b6 Use end-state parameters to define the target state after role execution. Parameters should be declared in host_vars or group_vars as they are intended to be permanent. sys_mc_application : name : type : version : installed : sys_mc_actions : setup : overwrite : sys_mc_users : - name : group : home : Parameter Required? Type Default Purpose / Value sys_mc_application yes(deploy) dictionary Set application package end state sys_mc_application.name yes(deploy) string \"mc\" Select application package name sys_mc_application.type yes(deploy) string \"distro\"\\|\"brew\" Select application package type sys_mc_application.version yes(deploy) string \"latest\" Select application package version sys_mc_application.installed yes(deploy) boolean true Set application package end state sys_mc_actions no dictionary Set action options sys_mc_actions.setup no dictionary Set setup action options sys_mc_actions.setup.overwrite no boolean false Overwrite user configurations? sys_mc_users yes(setup) list List of users that will use MC sys_mc_users.0.name yes(setup) string User login name sys_mc_users.0.group yes(setup) string User primary group sys_mc_users.0.home yes(setup) string Home directory Deployment \u00b6 OS Compatibility \u00b6 The operating system compatibility list is defined in the variable: sys_mc_platforms Dependencies \u00b6 Ansible Collections: serdigital64.backup bkp_archive serdigital64.system sys_package sys_repository Prerequisites \u00b6 The Ansible engine must be already installed and configured for privileged access and remote execution. In addition the following prerequisites can be automatically solved when running the playbook by setting the role action: resolve_prereq: true Package manager for the target application is installed and enabled. Installation Procedure \u00b6 Manually install Ansible Collections from the Ansible Galaxy repository: ansible-galaxy collection install serdigital64.system Automatic installation is also available by deploying A:Platform64 Contributing \u00b6 Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details. Author \u00b6 SerDigital64 License \u00b6 GPL-3.0-or-later","title":"sys_mc"},{"location":"roles/sys_mc/#ansible-role-serdigital64systemsys_mc","text":"","title":"Ansible Role: serdigital64.system.sys_mc"},{"location":"roles/sys_mc/#purpose","text":"Manage provisioning of the Midnight Commander tool Supported features in the current version: Deploy application. Packages are defined in the variable sys_mc_profiles . Setup application: Create default user configuration The sys_mc Ansible-Role is part of the A:Platform64 project and is available in the system Ansible-Collection.","title":"Purpose"},{"location":"roles/sys_mc/#usage","text":"The following example is an Ansible Playbook that includes all the supported features: use this link if viewing the doc on github --- - name : \"System / MC / Usage example\" hosts : \"localhost\" gather_facts : true vars : target_user : \"{{ lookup('env','USER') }}\" target_users : - name : \"{{ target_user }}\" group : \"{{ target_user }}\" home : \"/home/{{ target_user }}\" tasks : - name : \"Example: Install MC tool and deploy default user configuration\" vars : sys_mc : resolve_prereq : true deploy : true setup : true sys_mc_users : \"{{ target_users }}\" ansible.builtin.include_role : name : \"serdigital64.system.sys_mc\" ... The playbook can be run by executing: # Set ANSIBLE_COLLECTIONS_PATHS to the default location. Change as needed. ANSIBLE_COLLECTIONS_PATHS = \" ${ HOME } /.ansible/collections\" ansible-playbook \" ${ ANSIBLE_COLLECTIONS_PATHS } /ansible_collections/serdigital64/system/playbooks/sys_mc.yml\"","title":"Usage"},{"location":"roles/sys_mc/#role-parameters","text":"","title":"Role Parameters"},{"location":"roles/sys_mc/#actions","text":"Use action-parameters to control what tasks are enabled for the role to execute. Parameters should be declared as task level vars as they are intented to be dynamic. sys_mc : resolve_prereq : deploy : setup : Parameter Required? Type Default Purpose / Value sys_mc.resolve_prereq no boolean false Enable automatic resolution of prequisites sys_mc.deploy no boolean false Enable installation of application packages sys_mc.setup no boolean false Enable application configuration","title":"Actions"},{"location":"roles/sys_mc/#end-state","text":"Use end-state parameters to define the target state after role execution. Parameters should be declared in host_vars or group_vars as they are intended to be permanent. sys_mc_application : name : type : version : installed : sys_mc_actions : setup : overwrite : sys_mc_users : - name : group : home : Parameter Required? Type Default Purpose / Value sys_mc_application yes(deploy) dictionary Set application package end state sys_mc_application.name yes(deploy) string \"mc\" Select application package name sys_mc_application.type yes(deploy) string \"distro\"\\|\"brew\" Select application package type sys_mc_application.version yes(deploy) string \"latest\" Select application package version sys_mc_application.installed yes(deploy) boolean true Set application package end state sys_mc_actions no dictionary Set action options sys_mc_actions.setup no dictionary Set setup action options sys_mc_actions.setup.overwrite no boolean false Overwrite user configurations? sys_mc_users yes(setup) list List of users that will use MC sys_mc_users.0.name yes(setup) string User login name sys_mc_users.0.group yes(setup) string User primary group sys_mc_users.0.home yes(setup) string Home directory","title":"End State"},{"location":"roles/sys_mc/#deployment","text":"","title":"Deployment"},{"location":"roles/sys_mc/#os-compatibility","text":"The operating system compatibility list is defined in the variable: sys_mc_platforms","title":"OS Compatibility"},{"location":"roles/sys_mc/#dependencies","text":"Ansible Collections: serdigital64.backup bkp_archive serdigital64.system sys_package sys_repository","title":"Dependencies"},{"location":"roles/sys_mc/#prerequisites","text":"The Ansible engine must be already installed and configured for privileged access and remote execution. In addition the following prerequisites can be automatically solved when running the playbook by setting the role action: resolve_prereq: true Package manager for the target application is installed and enabled.","title":"Prerequisites"},{"location":"roles/sys_mc/#installation-procedure","text":"Manually install Ansible Collections from the Ansible Galaxy repository: ansible-galaxy collection install serdigital64.system Automatic installation is also available by deploying A:Platform64","title":"Installation Procedure"},{"location":"roles/sys_mc/#contributing","text":"Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details.","title":"Contributing"},{"location":"roles/sys_mc/#author","text":"SerDigital64","title":"Author"},{"location":"roles/sys_mc/#license","text":"GPL-3.0-or-later","title":"License"},{"location":"roles/sys_package/","text":"Ansible Role: serdigital64.system.sys_package \u00b6 Purpose \u00b6 Manage application package provisioning. Supported features in the current version: Download package file to local repository. Extract package file contents to staging area. Promote content from staging to install destination. Execute script/command in staging area. Cleanup files after package uninstallation. Supported package types (defined in the variable sys_package_flavours ): Type Description binary Compressed archive brew Homebrew package deb Debian OS family package distro OS specific package flatpak Flatpak package git GIT repository pip Python module rpm Redhat OS familty package snap Snap package Package specific actions: PIP Create dedicated venv location Create user and group owners Create loader script that will activate the venv and call the app CLI In order to allow homogeneous package profile definitions use the variable sys_package_profiles.T.V.supported to flag packages that are not available in the target platform. This will skip the package deploy without generating execution errors. The sys_package Ansible-Role is part of the A:Platform64 project and is available in the system Ansible-Collection. Usage \u00b6 The following example is an Ansible Playbook that includes all the supported features: use this link if viewing the doc on github --- - name : \"System / Package / Usage example\" hosts : \"localhost\" gather_facts : true vars : test_install : \"/tmp/test_install64\" test_user : \"testusr64\" test_group : \"testgrp64\" test_install_pip : \"/tmp/test_install64_pip\" tasks : - name : \"Example: Install binary package IBM Cloud CLI from the IBM site\" vars : sys_package : resolve_prereq : true prepare : true provision : true sys_package_application : name : \"ibmcloud\" type : \"binary\" version : \"v2_0_0\" installed : true sys_package_profiles : binary : v2_0_0 : origin : \"https://download.clis.cloud.ibm.com/ibm-cloud-cli/2.0.0/binaries\" packages : - file : \"IBM_Cloud_CLI_2.0.0_linux_amd64.tgz\" uncompress : true paths : - target : \"{{ test_install }}/ibm\" owner : \"root\" mode : \"0755\" promotion : - target : \"{{ test_install }}/ibm\" source : \"IBM_Cloud_CLI/ibmcloud\" mode : \"0755\" owner : \"root\" ansible.builtin.include_role : name : \"serdigital64.system.sys_package\" - name : \"Example: Install LSOF application from distro repository\" vars : sys_package : resolve_prereq : true prepare : true provision : true sys_package_application : name : \"lsof\" type : \"distro\" version : \"latest\" installed : true sys_package_profiles : distro : latest : packages : - name : \"lsof\" ansible.builtin.include_role : name : \"serdigital64.system.sys_package\" - name : \"Example: Install FLATPAK DOSBox from FlatHub\" vars : sys_package : resolve_prereq : true prepare : true provision : true sys_package_application : name : \"DOSBox\" type : \"flatpak\" version : \"latest\" installed : true sys_package_profiles : flatpak : latest : origin : \"flathub\" packages : - name : \"com.dosbox.DOSBox\" ansible.builtin.include_role : name : \"serdigital64.system.sys_package\" - name : \"Example: Install RPM Azure-CLI from the Microsoft site\" vars : sys_package : resolve_prereq : true prepare : true provision : true sys_package_application : name : \"azure-cli\" type : \"rpm\" version : \"latest\" installed : true sys_package_profiles : rpm : latest : origin : \"https://packages.microsoft.com/yumrepos/azure-cli\" packages : - file : \"azure-cli-2.21.0-1.el7.x86_64.rpm\" name : \"azure-cli\" ansible.builtin.include_role : name : \"serdigital64.system.sys_package\" when : - ansible_distribution == 'CentOS' or ansible_distribution == 'OracleLinux' or ansible_distribution == 'Fedora' - name : \"Example: Install SNAP ASCIInema from SnapCraft\" vars : sys_package : resolve_prereq : true prepare : true provision : true sys_package_application : name : \"asciinema\" type : \"snap\" version : \"latest\" installed : true sys_package_profiles : snap : latest : packages : - name : \"asciinema\" snap : classic : true ansible.builtin.include_role : name : \"serdigital64.system.sys_package\" - name : \"Example: Install DEB RClone from RCLone site\" vars : sys_package : resolve_prereq : true prepare : true provision : true sys_package_application : type : \"deb\" version : \"v1_54_1\" name : \"rclone\" installed : true sys_package_profiles : deb : v1_54_1 : origin : \"https://downloads.rclone.org/v1.54.1\" packages : - file : \"rclone-v1.54.1-linux-amd64.deb\" ansible.builtin.include_role : name : \"serdigital64.system.sys_package\" when : - ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu' - name : \"Example: Install DEB RClone from RCLone site\" vars : sys_package : resolve_prereq : true prepare : true provision : true sys_package_application : type : \"pip\" version : \"latest\" name : \"mkdocs\" installed : true sys_package_profiles : pip : latest : packages : - name : \"mkdocs\" options : pip : owner : \"{{ test_user }}\" group : \"{{ test_group }}\" path : \"{{ test_install_pip }}\" cli : \"mkdocs\" ansible.builtin.include_role : name : \"serdigital64.system.sys_package\" ... The playbook can be run by executing: # Set ANSIBLE_COLLECTIONS_PATHS to the default location. Change as needed. ANSIBLE_COLLECTIONS_PATHS = \" ${ HOME } /.ansible/collections\" ansible-playbook \" ${ ANSIBLE_COLLECTIONS_PATHS } /ansible_collections/serdigital64/system/playbooks/sys_package.yml\" Role Parameters \u00b6 Actions \u00b6 Use action-parameters to control what tasks are enabled for the role to execute. Parameters should be declared as task level vars as they are intented to be dynamic. sys_package : resolve_prereq : prepare : provision : sys_package_application : name : type : version : installed : sys_package_profiles : T : V : supported : origin : packages : - name : file : uncompress : snap : classic : git : branch : referer : options : brew : cask : pip : owner : group : path : cli : system : python : paths : - target : owner : group : mode : promotion : - source : target : owner : group : mode : script : cleanup : Parameter Required? Type Default Purpose / Value sys_package.resolve_prereq no boolean false Enable automatic resolution of prequisites sys_package.prepare no boolean false Enable preparation of the runtime environment sys_package.provision no boolean false Enable installation/uninstallation of packages sys_package_application yes dictionary Required when provision == true . Define target application from profile list sys_package_application.name yes string Select application package name sys_package_application.type yes string Select application package type sys_package_application.version yes string Select application package version sys_package_application.installed yes boolean Set application end state sys_package_profiles yes dictionary Required when provision == true . Define application details sys_package_profiles.T yes dictionary Define application details for the package type T . Replace T with a valid type sys_package_profiles.T.V yes dictionary Define application details for the version V . Replace V with latest or version vX_Y_Z sys_package_profiles.T.V.supported no boolean true Is the application available for the target platform? sys_package_profiles.T.V.origin yes string (binary,deb,flatpak,git,rpm,brew) Repository URL or name from where the file package will be downloaded sys_package_profiles.T.V.packages yes list List of application packages to be installed sys_package_profiles.T.V.packages.0.name yes string (brew,flatpak,snap,rpm,deb,distro,pip) Package name as found in the package repository or package file sys_package_profiles.T.V.packages.0.file yes string (binary,deb,git,rpm) Package file name as found in the origin sys_package_profiles.T.V.packages.0.referer no string Set the HTTP Header Referer field. Value: URL. Used for sites that will not allow direct URL download sys_package_profiles.T.V.packages.0.uncompress no boolean (binary) Uncompress the package file before installing sys_package_profiles.T.V.packages.0.snap no dictionary (snap) Snap options sys_package_profiles.T.V.packages.0.snap.classic no boolean (snap) Set the classic flag when installing the snap package sys_package_profiles.T.V.packages.0.git no dictionary (git) GIT options sys_package_profiles.T.V.packages.0.git.branch no string (git) Set the target branch. sys_package_profiles.T.V.options yes dictionary (pip) Global package options sys_package_profiles.T.V.options.brew no dictionary (brew) Homebrew options sys_package_profiles.T.V.options.brew.cask no boolean (brew) The package is a cask sys_package_profiles.T.V.options.pip yes dictionary (pip) PIP options sys_package_profiles.T.V.options.pip.owner no string \"root\" (pip) Destination path owner sys_package_profiles.T.V.options.pip.group no string \"root\" (pip) Destination path group owner sys_package_profiles.T.V.options.pip.path yes string (pip) Destination path where the Python modules and venv will be installed to sys_package_profiles.T.V.options.pip.cli yes string (pip) CLI (python app) name to call the module directly from the shell sys_package_profiles.T.V.options.pip.system no boolean false (pip) Enable \u2013system-site-packages venv creation option sys_package_profiles.T.V.options.pip.python no string (pip) Full path to the Python interpreter. Default is OS dependant sys_package_profiles.T.V.paths no list (binary,git) List of paths to be created before promotion sys_package_profiles.T.V.paths.0.target yes string Full path where files will be promoted (copied) to sys_package_profiles.T.V.paths.0.mode no string Target's permissions (octal) sys_package_profiles.T.V.paths.0.owner no string Target's owner: user name sys_package_profiles.T.V.paths.0.group no string Target's Owner: group sys_package_profiles.T.V.promotion no dictionary (binary,git) List of files that will be promoted (copied) after the package file is opened sys_package_profiles.T.V.promotion.0.source yes string Relative path to the source file that will be promoted sys_package_profiles.T.V.promotion.0.target yes string Full path to the destination where the file will be promoted (copied) to sys_package_profiles.T.V.promotion.0.mode no string Target's permissions (octal) sys_package_profiles.T.V.promotion.0.owner no string Target's owner: user name sys_package_profiles.T.V.promotion.0.group no string Target's Owner: group sys_package_profiles.T.V.script no list (binary) Script or command to run after the application package is opened in staging sys_package_profiles.T.V.script.0 yes string Path to the script or command. Relative to the installation base sys_package_profiles.T.V.script.N no string Parameter definition. Add as many lines as parameters. Same format as ansible.builtin.command.argv sys_package_profiles.T.V.cleanup no list List of full path files that must be removed after the application is uninstalled. End State \u00b6 Use end-state parameters to define the target state after role execution. Parameters should be declared in host_vars or group_vars as they are intended to be permanent. sys_package_paths : root_var : Parameter Required? Type Default Purpose / Value sys_package_paths yes(prepare) dictionary Set paths sys_package_paths.root_var yes string \"/var/opt/sys_package\" Path for storing variable data Deployment \u00b6 OS Compatibility \u00b6 The operating system compatibility list is defined in the variable: sys_package_platforms Dependencies \u00b6 Ansible Collections: community.general snap flatpak homebrew serdigital64.backup bkp_archive serdigital64.system sys_repository sys_user Prerequisites \u00b6 The Ansible engine must be already installed and configured for privileged access and remote execution. In addition the following prerequisites can be automatically solved when running the playbook by setting the role action: resolve_prereq: true Package manager for the target application is installed and enabled. Installation Procedure \u00b6 Manually install Ansible Collections from the Ansible Galaxy repository: ansible-galaxy collection install --upgrade serdigital64.system Automatic installation is also available by deploying A:Platform64 Contributing \u00b6 Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details. Author \u00b6 SerDigital64 License \u00b6 GPL-3.0-or-later","title":"sys_package"},{"location":"roles/sys_package/#ansible-role-serdigital64systemsys_package","text":"","title":"Ansible Role: serdigital64.system.sys_package"},{"location":"roles/sys_package/#purpose","text":"Manage application package provisioning. Supported features in the current version: Download package file to local repository. Extract package file contents to staging area. Promote content from staging to install destination. Execute script/command in staging area. Cleanup files after package uninstallation. Supported package types (defined in the variable sys_package_flavours ): Type Description binary Compressed archive brew Homebrew package deb Debian OS family package distro OS specific package flatpak Flatpak package git GIT repository pip Python module rpm Redhat OS familty package snap Snap package Package specific actions: PIP Create dedicated venv location Create user and group owners Create loader script that will activate the venv and call the app CLI In order to allow homogeneous package profile definitions use the variable sys_package_profiles.T.V.supported to flag packages that are not available in the target platform. This will skip the package deploy without generating execution errors. The sys_package Ansible-Role is part of the A:Platform64 project and is available in the system Ansible-Collection.","title":"Purpose"},{"location":"roles/sys_package/#usage","text":"The following example is an Ansible Playbook that includes all the supported features: use this link if viewing the doc on github --- - name : \"System / Package / Usage example\" hosts : \"localhost\" gather_facts : true vars : test_install : \"/tmp/test_install64\" test_user : \"testusr64\" test_group : \"testgrp64\" test_install_pip : \"/tmp/test_install64_pip\" tasks : - name : \"Example: Install binary package IBM Cloud CLI from the IBM site\" vars : sys_package : resolve_prereq : true prepare : true provision : true sys_package_application : name : \"ibmcloud\" type : \"binary\" version : \"v2_0_0\" installed : true sys_package_profiles : binary : v2_0_0 : origin : \"https://download.clis.cloud.ibm.com/ibm-cloud-cli/2.0.0/binaries\" packages : - file : \"IBM_Cloud_CLI_2.0.0_linux_amd64.tgz\" uncompress : true paths : - target : \"{{ test_install }}/ibm\" owner : \"root\" mode : \"0755\" promotion : - target : \"{{ test_install }}/ibm\" source : \"IBM_Cloud_CLI/ibmcloud\" mode : \"0755\" owner : \"root\" ansible.builtin.include_role : name : \"serdigital64.system.sys_package\" - name : \"Example: Install LSOF application from distro repository\" vars : sys_package : resolve_prereq : true prepare : true provision : true sys_package_application : name : \"lsof\" type : \"distro\" version : \"latest\" installed : true sys_package_profiles : distro : latest : packages : - name : \"lsof\" ansible.builtin.include_role : name : \"serdigital64.system.sys_package\" - name : \"Example: Install FLATPAK DOSBox from FlatHub\" vars : sys_package : resolve_prereq : true prepare : true provision : true sys_package_application : name : \"DOSBox\" type : \"flatpak\" version : \"latest\" installed : true sys_package_profiles : flatpak : latest : origin : \"flathub\" packages : - name : \"com.dosbox.DOSBox\" ansible.builtin.include_role : name : \"serdigital64.system.sys_package\" - name : \"Example: Install RPM Azure-CLI from the Microsoft site\" vars : sys_package : resolve_prereq : true prepare : true provision : true sys_package_application : name : \"azure-cli\" type : \"rpm\" version : \"latest\" installed : true sys_package_profiles : rpm : latest : origin : \"https://packages.microsoft.com/yumrepos/azure-cli\" packages : - file : \"azure-cli-2.21.0-1.el7.x86_64.rpm\" name : \"azure-cli\" ansible.builtin.include_role : name : \"serdigital64.system.sys_package\" when : - ansible_distribution == 'CentOS' or ansible_distribution == 'OracleLinux' or ansible_distribution == 'Fedora' - name : \"Example: Install SNAP ASCIInema from SnapCraft\" vars : sys_package : resolve_prereq : true prepare : true provision : true sys_package_application : name : \"asciinema\" type : \"snap\" version : \"latest\" installed : true sys_package_profiles : snap : latest : packages : - name : \"asciinema\" snap : classic : true ansible.builtin.include_role : name : \"serdigital64.system.sys_package\" - name : \"Example: Install DEB RClone from RCLone site\" vars : sys_package : resolve_prereq : true prepare : true provision : true sys_package_application : type : \"deb\" version : \"v1_54_1\" name : \"rclone\" installed : true sys_package_profiles : deb : v1_54_1 : origin : \"https://downloads.rclone.org/v1.54.1\" packages : - file : \"rclone-v1.54.1-linux-amd64.deb\" ansible.builtin.include_role : name : \"serdigital64.system.sys_package\" when : - ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu' - name : \"Example: Install DEB RClone from RCLone site\" vars : sys_package : resolve_prereq : true prepare : true provision : true sys_package_application : type : \"pip\" version : \"latest\" name : \"mkdocs\" installed : true sys_package_profiles : pip : latest : packages : - name : \"mkdocs\" options : pip : owner : \"{{ test_user }}\" group : \"{{ test_group }}\" path : \"{{ test_install_pip }}\" cli : \"mkdocs\" ansible.builtin.include_role : name : \"serdigital64.system.sys_package\" ... The playbook can be run by executing: # Set ANSIBLE_COLLECTIONS_PATHS to the default location. Change as needed. ANSIBLE_COLLECTIONS_PATHS = \" ${ HOME } /.ansible/collections\" ansible-playbook \" ${ ANSIBLE_COLLECTIONS_PATHS } /ansible_collections/serdigital64/system/playbooks/sys_package.yml\"","title":"Usage"},{"location":"roles/sys_package/#role-parameters","text":"","title":"Role Parameters"},{"location":"roles/sys_package/#actions","text":"Use action-parameters to control what tasks are enabled for the role to execute. Parameters should be declared as task level vars as they are intented to be dynamic. sys_package : resolve_prereq : prepare : provision : sys_package_application : name : type : version : installed : sys_package_profiles : T : V : supported : origin : packages : - name : file : uncompress : snap : classic : git : branch : referer : options : brew : cask : pip : owner : group : path : cli : system : python : paths : - target : owner : group : mode : promotion : - source : target : owner : group : mode : script : cleanup : Parameter Required? Type Default Purpose / Value sys_package.resolve_prereq no boolean false Enable automatic resolution of prequisites sys_package.prepare no boolean false Enable preparation of the runtime environment sys_package.provision no boolean false Enable installation/uninstallation of packages sys_package_application yes dictionary Required when provision == true . Define target application from profile list sys_package_application.name yes string Select application package name sys_package_application.type yes string Select application package type sys_package_application.version yes string Select application package version sys_package_application.installed yes boolean Set application end state sys_package_profiles yes dictionary Required when provision == true . Define application details sys_package_profiles.T yes dictionary Define application details for the package type T . Replace T with a valid type sys_package_profiles.T.V yes dictionary Define application details for the version V . Replace V with latest or version vX_Y_Z sys_package_profiles.T.V.supported no boolean true Is the application available for the target platform? sys_package_profiles.T.V.origin yes string (binary,deb,flatpak,git,rpm,brew) Repository URL or name from where the file package will be downloaded sys_package_profiles.T.V.packages yes list List of application packages to be installed sys_package_profiles.T.V.packages.0.name yes string (brew,flatpak,snap,rpm,deb,distro,pip) Package name as found in the package repository or package file sys_package_profiles.T.V.packages.0.file yes string (binary,deb,git,rpm) Package file name as found in the origin sys_package_profiles.T.V.packages.0.referer no string Set the HTTP Header Referer field. Value: URL. Used for sites that will not allow direct URL download sys_package_profiles.T.V.packages.0.uncompress no boolean (binary) Uncompress the package file before installing sys_package_profiles.T.V.packages.0.snap no dictionary (snap) Snap options sys_package_profiles.T.V.packages.0.snap.classic no boolean (snap) Set the classic flag when installing the snap package sys_package_profiles.T.V.packages.0.git no dictionary (git) GIT options sys_package_profiles.T.V.packages.0.git.branch no string (git) Set the target branch. sys_package_profiles.T.V.options yes dictionary (pip) Global package options sys_package_profiles.T.V.options.brew no dictionary (brew) Homebrew options sys_package_profiles.T.V.options.brew.cask no boolean (brew) The package is a cask sys_package_profiles.T.V.options.pip yes dictionary (pip) PIP options sys_package_profiles.T.V.options.pip.owner no string \"root\" (pip) Destination path owner sys_package_profiles.T.V.options.pip.group no string \"root\" (pip) Destination path group owner sys_package_profiles.T.V.options.pip.path yes string (pip) Destination path where the Python modules and venv will be installed to sys_package_profiles.T.V.options.pip.cli yes string (pip) CLI (python app) name to call the module directly from the shell sys_package_profiles.T.V.options.pip.system no boolean false (pip) Enable \u2013system-site-packages venv creation option sys_package_profiles.T.V.options.pip.python no string (pip) Full path to the Python interpreter. Default is OS dependant sys_package_profiles.T.V.paths no list (binary,git) List of paths to be created before promotion sys_package_profiles.T.V.paths.0.target yes string Full path where files will be promoted (copied) to sys_package_profiles.T.V.paths.0.mode no string Target's permissions (octal) sys_package_profiles.T.V.paths.0.owner no string Target's owner: user name sys_package_profiles.T.V.paths.0.group no string Target's Owner: group sys_package_profiles.T.V.promotion no dictionary (binary,git) List of files that will be promoted (copied) after the package file is opened sys_package_profiles.T.V.promotion.0.source yes string Relative path to the source file that will be promoted sys_package_profiles.T.V.promotion.0.target yes string Full path to the destination where the file will be promoted (copied) to sys_package_profiles.T.V.promotion.0.mode no string Target's permissions (octal) sys_package_profiles.T.V.promotion.0.owner no string Target's owner: user name sys_package_profiles.T.V.promotion.0.group no string Target's Owner: group sys_package_profiles.T.V.script no list (binary) Script or command to run after the application package is opened in staging sys_package_profiles.T.V.script.0 yes string Path to the script or command. Relative to the installation base sys_package_profiles.T.V.script.N no string Parameter definition. Add as many lines as parameters. Same format as ansible.builtin.command.argv sys_package_profiles.T.V.cleanup no list List of full path files that must be removed after the application is uninstalled.","title":"Actions"},{"location":"roles/sys_package/#end-state","text":"Use end-state parameters to define the target state after role execution. Parameters should be declared in host_vars or group_vars as they are intended to be permanent. sys_package_paths : root_var : Parameter Required? Type Default Purpose / Value sys_package_paths yes(prepare) dictionary Set paths sys_package_paths.root_var yes string \"/var/opt/sys_package\" Path for storing variable data","title":"End State"},{"location":"roles/sys_package/#deployment","text":"","title":"Deployment"},{"location":"roles/sys_package/#os-compatibility","text":"The operating system compatibility list is defined in the variable: sys_package_platforms","title":"OS Compatibility"},{"location":"roles/sys_package/#dependencies","text":"Ansible Collections: community.general snap flatpak homebrew serdigital64.backup bkp_archive serdigital64.system sys_repository sys_user","title":"Dependencies"},{"location":"roles/sys_package/#prerequisites","text":"The Ansible engine must be already installed and configured for privileged access and remote execution. In addition the following prerequisites can be automatically solved when running the playbook by setting the role action: resolve_prereq: true Package manager for the target application is installed and enabled.","title":"Prerequisites"},{"location":"roles/sys_package/#installation-procedure","text":"Manually install Ansible Collections from the Ansible Galaxy repository: ansible-galaxy collection install --upgrade serdigital64.system Automatic installation is also available by deploying A:Platform64","title":"Installation Procedure"},{"location":"roles/sys_package/#contributing","text":"Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details.","title":"Contributing"},{"location":"roles/sys_package/#author","text":"SerDigital64","title":"Author"},{"location":"roles/sys_package/#license","text":"GPL-3.0-or-later","title":"License"},{"location":"roles/sys_repository/","text":"Ansible Role: serdigital64.system.sys_repository \u00b6 Purpose \u00b6 Manage application package repositories. Features available in the current version: Install repository management tools flatpak: distro native CLI and service snap: distro native CLI and service git: distro native CLI pip: distro native pip brew: shared CLI using dedicated regular user Add remote repositories. yum apt flatpak brew Manage availability of installed repositories. Predefined optional repositories are declared in the variable sys_repository_sources . distro yum apt brew Prepare repository for usage distro: update cache Supported repositories types as defined in the variable sys_repository_flavours : Type Description apt Repository for DEB packages brew Repository for BREW packages distro OS native repository flatpak Repository for FLATPAK packages git Git based repository pip Repository for Python modules snap Repository for SNAP packages yum Repository for RPM packages The sys_repository Ansible-Role is part of the A:Platform64 project and is available in the system Ansible-Collection. Usage \u00b6 The following example is an Ansible Playbook that includes all the supported features: use this link if viewing the doc on github --- - name : \"System / Repository / Usage example\" hosts : \"localhost\" gather_facts : true tasks : - name : \"Example: Install GIT tools\" vars : sys_repository : prepare : true deploy : true sys_repository_managers : git : true ansible.builtin.include_role : name : \"serdigital64.system.sys_repository\" - name : \"Example: Install PIP tools\" vars : sys_repository : prepare : true deploy : true sys_repository_managers : pip : true ansible.builtin.include_role : name : \"serdigital64.system.sys_repository\" - name : \"Example: Install the Snap package manager\" vars : sys_repository : prepare : true deploy : true provision : true sys_repository_managers : snap : true ansible.builtin.include_role : name : \"serdigital64.system.sys_repository\" when : - ansible_distribution == 'CentOS' or ansible_distribution == 'OracleLinux' or ansible_distribution == 'Fedora' - name : \"Example: Install the FlatPak package manager\" vars : sys_repository : prepare : true deploy : true provision : true sys_repository_managers : flatpak : true ansible.builtin.include_role : name : \"serdigital64.system.sys_repository\" when : - ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu' - name : \"Example: Install the Centos8 provided repository for Ansible\" vars : sys_repository : prepare : true deploy : true provision : true sys_repository_catalog_distro : ansible-29 : true sys_repository_custom_distro : - name : \"ansible-29\" package : \"centos-release-ansible-29\" ansible.builtin.include_role : name : \"serdigital64.system.sys_repository\" when : - ansible_distribution == 'CentOS' - name : \"Example: Install the external YUM repository for AWS CLI\" vars : sys_repository : prepare : true deploy : true provision : true sys_repository_catalog_yum : azure_cli : true sys_repository_custom_yum : - name : \"azure_cli\" description : \"Azure CLI official RPM Repository\" url : \"https://packages.microsoft.com/yumrepos/azure-cli\" gpgkey : \"https://packages.microsoft.com/keys/microsoft.asc\" ansible.builtin.include_role : name : \"serdigital64.system.sys_repository\" when : - ansible_distribution == 'CentOS' or ansible_distribution == 'OracleLinux' or ansible_distribution == 'Fedora' - name : \"Example: Install the external APT repository for AWS CLI\" vars : sys_repository : prepare : true deploy : true provision : true sys_repository_catalog_apt : azure_cli : true sys_repository_custom_apt : - name : \"azure_cli\" suite : \"focal\" component : \"main\" url : \"https://packages.microsoft.com/repos/azure-cli\" pgpkey : \"https://packages.microsoft.com/keys/microsoft.asc\" ansible.builtin.include_role : name : \"serdigital64.system.sys_repository\" when : - ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu' - name : \"Example: Install the Homebrew package manager\" vars : sys_repository : prepare : true deploy : true sys_repository_managers : brew : true ansible.builtin.include_role : name : \"serdigital64.system.sys_repository\" ... The playbook can be run by executing: # Set ANSIBLE_COLLECTIONS_PATHS to the default location. Change as needed. ANSIBLE_COLLECTIONS_PATHS = \" ${ HOME } /.ansible/collections\" ansible-playbook \" ${ ANSIBLE_COLLECTIONS_PATHS } /ansible_collections/serdigital64/system/playbooks/sys_repository.yml\" Role Parameters \u00b6 Actions \u00b6 Use action-parameters to control what tasks are enabled for the role to execute. Parameters should be declared as task level vars as they are intented to be dynamic. sys_repository : prepare : deploy : setup : provision : Parameter Required? Type Default Purpose / Value sys_repository.prepare no boolean false Enable preparation of the runtime environment sys_repository.deploy no boolean false Enable installation of application packages used by the role sys_repository.setup no boolean false Enable repository availability control. YUM based distros only sys_repository.provision no boolean false Enable installation of new repositories End State \u00b6 Use end-state parameters to define the target state after role execution. Parameters should be declared in host_vars or group_vars as they are intended to be permanent. sys_repository_managers : brew : flatpak : git : pip : snap : sys_repository_catalog_distro : NAME : sys_repository_catalog_flatpak : NAME : sys_repository_catalog_apt : NAME : sys_repository_catalog_yum : NAME : sys_repository_catalog_brew : NAME : sys_repository_custom_distro : - name : package : sys_repository_custom_flatpak : - name : url : sys_repository_custom_brew : - name : source : sys_repository_custom_yum : - name : description : url : gpgkey : sslcacert : sys_repository_custom_apt : - name : suite : component : url : gpgkey : pgpkey : Parameter Required? Type Default Purpose / Value sys_repository_managers.brew no boolean false Enable/Disable Homebrew repository sys_repository_managers.flatpak no boolean false Enable/Disable FlatHub repository sys_repository_managers.snap no boolean false Enable/Disable Snap repository sys_repository_managers.git no boolean false Enable/Disable GIT repositories sys_repository_managers.pip no boolean false Enable/Disable Python modules repository sys_repository_catalog_distro no dictionary Define installed distro native repositories state. sys_repository_catalog_distro.NAME no boolean Is the repository enabled?. Replace NAME with the repository name sys_repository_catalog_flatpak no dictionary Define installed flatpak repositories state. sys_repository_catalog_flatpak.NAME no boolean Is the repository enabled?. Replace NAME with the repository name sys_repository_catalog_apt no dictionary Define installed apt repositories state. sys_repository_catalog_apt.NAME no boolean Is the repository enabled?. Replace NAME with the repository name sys_repository_catalog_yum no dictionary Define installed yum repositories state. sys_repository_catalog_yum.NAME no boolean Is the repository enabled?. Replace NAME with the repository name sys_repository_catalog_brew no dictionary Define installed yum repositories state. sys_repository_catalog_brew.NAME no boolean Is the repository enabled?. Replace NAME with the repository name sys_repository_custom_distro no list Define optional distro native repositories sys_repository_custom_distro.0.name yes string Define repository name sys_repository_custom_distro.0.package yes string Define package name sys_repository_custom_flatpak yes list Define optional flatpak repositories sys_repository_custom_flatpak.0.name yes string Define repository name sys_repository_custom_flatpak.0.url yes string Define repository location sys_repository_custom_brew no list Define optional flatpak repositories sys_repository_custom_brew.0.name yes string Define repository name sys_repository_custom_brew.0.source yes string Define repository source sys_repository_custom_yum no list Define optional yum repositories sys_repository_custom_yum.0.name yes string Set repository short name sys_repository_custom_yum.0.description yes string Describe content sys_repository_custom_yum.0.url yes string Define repository source sys_repository_custom_yum.0.gpgkey no string Define gpgkey source sys_repository_custom_yum.0.sslcacert no string Define sslcert source sys_repository_custom_apt no list Define optional apt repositories sys_repository_custom_apt.0.name yes string Set repository short name sys_repository_custom_apt.0.suite yes string Set suite attribute sys_repository_custom_apt.0.component no string Set component attribute sys_repository_custom_apt.0.url yes string Define repository source sys_repository_custom_apt.0.gpgkey no string Define gpgkey source sys_repository_custom_apt.0.pgpkey no string Define pgpkey source Deployment \u00b6 OS Compatibility \u00b6 The operating system compatibility list is defined in the variable: sys_repository_platforms Dependencies \u00b6 Ansible Collections: serdigital64.system sys_user sys_sudo serdigital64.devops dops_git_client serdigital64-development dev_python Prerequisites \u00b6 The Ansible engine must be already installed and configured for privileged access and remote execution. Installation Procedure \u00b6 Manually install Ansible Collections from the Ansible Galaxy repository: ansible-galaxy collection install --upgrade serdigital64.system Automatic installation is also available by deploying A:Platform64 Contributing \u00b6 Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details. Author \u00b6 SerDigital64 License \u00b6 GPL-3.0-or-later","title":"sys_repository"},{"location":"roles/sys_repository/#ansible-role-serdigital64systemsys_repository","text":"","title":"Ansible Role: serdigital64.system.sys_repository"},{"location":"roles/sys_repository/#purpose","text":"Manage application package repositories. Features available in the current version: Install repository management tools flatpak: distro native CLI and service snap: distro native CLI and service git: distro native CLI pip: distro native pip brew: shared CLI using dedicated regular user Add remote repositories. yum apt flatpak brew Manage availability of installed repositories. Predefined optional repositories are declared in the variable sys_repository_sources . distro yum apt brew Prepare repository for usage distro: update cache Supported repositories types as defined in the variable sys_repository_flavours : Type Description apt Repository for DEB packages brew Repository for BREW packages distro OS native repository flatpak Repository for FLATPAK packages git Git based repository pip Repository for Python modules snap Repository for SNAP packages yum Repository for RPM packages The sys_repository Ansible-Role is part of the A:Platform64 project and is available in the system Ansible-Collection.","title":"Purpose"},{"location":"roles/sys_repository/#usage","text":"The following example is an Ansible Playbook that includes all the supported features: use this link if viewing the doc on github --- - name : \"System / Repository / Usage example\" hosts : \"localhost\" gather_facts : true tasks : - name : \"Example: Install GIT tools\" vars : sys_repository : prepare : true deploy : true sys_repository_managers : git : true ansible.builtin.include_role : name : \"serdigital64.system.sys_repository\" - name : \"Example: Install PIP tools\" vars : sys_repository : prepare : true deploy : true sys_repository_managers : pip : true ansible.builtin.include_role : name : \"serdigital64.system.sys_repository\" - name : \"Example: Install the Snap package manager\" vars : sys_repository : prepare : true deploy : true provision : true sys_repository_managers : snap : true ansible.builtin.include_role : name : \"serdigital64.system.sys_repository\" when : - ansible_distribution == 'CentOS' or ansible_distribution == 'OracleLinux' or ansible_distribution == 'Fedora' - name : \"Example: Install the FlatPak package manager\" vars : sys_repository : prepare : true deploy : true provision : true sys_repository_managers : flatpak : true ansible.builtin.include_role : name : \"serdigital64.system.sys_repository\" when : - ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu' - name : \"Example: Install the Centos8 provided repository for Ansible\" vars : sys_repository : prepare : true deploy : true provision : true sys_repository_catalog_distro : ansible-29 : true sys_repository_custom_distro : - name : \"ansible-29\" package : \"centos-release-ansible-29\" ansible.builtin.include_role : name : \"serdigital64.system.sys_repository\" when : - ansible_distribution == 'CentOS' - name : \"Example: Install the external YUM repository for AWS CLI\" vars : sys_repository : prepare : true deploy : true provision : true sys_repository_catalog_yum : azure_cli : true sys_repository_custom_yum : - name : \"azure_cli\" description : \"Azure CLI official RPM Repository\" url : \"https://packages.microsoft.com/yumrepos/azure-cli\" gpgkey : \"https://packages.microsoft.com/keys/microsoft.asc\" ansible.builtin.include_role : name : \"serdigital64.system.sys_repository\" when : - ansible_distribution == 'CentOS' or ansible_distribution == 'OracleLinux' or ansible_distribution == 'Fedora' - name : \"Example: Install the external APT repository for AWS CLI\" vars : sys_repository : prepare : true deploy : true provision : true sys_repository_catalog_apt : azure_cli : true sys_repository_custom_apt : - name : \"azure_cli\" suite : \"focal\" component : \"main\" url : \"https://packages.microsoft.com/repos/azure-cli\" pgpkey : \"https://packages.microsoft.com/keys/microsoft.asc\" ansible.builtin.include_role : name : \"serdigital64.system.sys_repository\" when : - ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu' - name : \"Example: Install the Homebrew package manager\" vars : sys_repository : prepare : true deploy : true sys_repository_managers : brew : true ansible.builtin.include_role : name : \"serdigital64.system.sys_repository\" ... The playbook can be run by executing: # Set ANSIBLE_COLLECTIONS_PATHS to the default location. Change as needed. ANSIBLE_COLLECTIONS_PATHS = \" ${ HOME } /.ansible/collections\" ansible-playbook \" ${ ANSIBLE_COLLECTIONS_PATHS } /ansible_collections/serdigital64/system/playbooks/sys_repository.yml\"","title":"Usage"},{"location":"roles/sys_repository/#role-parameters","text":"","title":"Role Parameters"},{"location":"roles/sys_repository/#actions","text":"Use action-parameters to control what tasks are enabled for the role to execute. Parameters should be declared as task level vars as they are intented to be dynamic. sys_repository : prepare : deploy : setup : provision : Parameter Required? Type Default Purpose / Value sys_repository.prepare no boolean false Enable preparation of the runtime environment sys_repository.deploy no boolean false Enable installation of application packages used by the role sys_repository.setup no boolean false Enable repository availability control. YUM based distros only sys_repository.provision no boolean false Enable installation of new repositories","title":"Actions"},{"location":"roles/sys_repository/#end-state","text":"Use end-state parameters to define the target state after role execution. Parameters should be declared in host_vars or group_vars as they are intended to be permanent. sys_repository_managers : brew : flatpak : git : pip : snap : sys_repository_catalog_distro : NAME : sys_repository_catalog_flatpak : NAME : sys_repository_catalog_apt : NAME : sys_repository_catalog_yum : NAME : sys_repository_catalog_brew : NAME : sys_repository_custom_distro : - name : package : sys_repository_custom_flatpak : - name : url : sys_repository_custom_brew : - name : source : sys_repository_custom_yum : - name : description : url : gpgkey : sslcacert : sys_repository_custom_apt : - name : suite : component : url : gpgkey : pgpkey : Parameter Required? Type Default Purpose / Value sys_repository_managers.brew no boolean false Enable/Disable Homebrew repository sys_repository_managers.flatpak no boolean false Enable/Disable FlatHub repository sys_repository_managers.snap no boolean false Enable/Disable Snap repository sys_repository_managers.git no boolean false Enable/Disable GIT repositories sys_repository_managers.pip no boolean false Enable/Disable Python modules repository sys_repository_catalog_distro no dictionary Define installed distro native repositories state. sys_repository_catalog_distro.NAME no boolean Is the repository enabled?. Replace NAME with the repository name sys_repository_catalog_flatpak no dictionary Define installed flatpak repositories state. sys_repository_catalog_flatpak.NAME no boolean Is the repository enabled?. Replace NAME with the repository name sys_repository_catalog_apt no dictionary Define installed apt repositories state. sys_repository_catalog_apt.NAME no boolean Is the repository enabled?. Replace NAME with the repository name sys_repository_catalog_yum no dictionary Define installed yum repositories state. sys_repository_catalog_yum.NAME no boolean Is the repository enabled?. Replace NAME with the repository name sys_repository_catalog_brew no dictionary Define installed yum repositories state. sys_repository_catalog_brew.NAME no boolean Is the repository enabled?. Replace NAME with the repository name sys_repository_custom_distro no list Define optional distro native repositories sys_repository_custom_distro.0.name yes string Define repository name sys_repository_custom_distro.0.package yes string Define package name sys_repository_custom_flatpak yes list Define optional flatpak repositories sys_repository_custom_flatpak.0.name yes string Define repository name sys_repository_custom_flatpak.0.url yes string Define repository location sys_repository_custom_brew no list Define optional flatpak repositories sys_repository_custom_brew.0.name yes string Define repository name sys_repository_custom_brew.0.source yes string Define repository source sys_repository_custom_yum no list Define optional yum repositories sys_repository_custom_yum.0.name yes string Set repository short name sys_repository_custom_yum.0.description yes string Describe content sys_repository_custom_yum.0.url yes string Define repository source sys_repository_custom_yum.0.gpgkey no string Define gpgkey source sys_repository_custom_yum.0.sslcacert no string Define sslcert source sys_repository_custom_apt no list Define optional apt repositories sys_repository_custom_apt.0.name yes string Set repository short name sys_repository_custom_apt.0.suite yes string Set suite attribute sys_repository_custom_apt.0.component no string Set component attribute sys_repository_custom_apt.0.url yes string Define repository source sys_repository_custom_apt.0.gpgkey no string Define gpgkey source sys_repository_custom_apt.0.pgpkey no string Define pgpkey source","title":"End State"},{"location":"roles/sys_repository/#deployment","text":"","title":"Deployment"},{"location":"roles/sys_repository/#os-compatibility","text":"The operating system compatibility list is defined in the variable: sys_repository_platforms","title":"OS Compatibility"},{"location":"roles/sys_repository/#dependencies","text":"Ansible Collections: serdigital64.system sys_user sys_sudo serdigital64.devops dops_git_client serdigital64-development dev_python","title":"Dependencies"},{"location":"roles/sys_repository/#prerequisites","text":"The Ansible engine must be already installed and configured for privileged access and remote execution.","title":"Prerequisites"},{"location":"roles/sys_repository/#installation-procedure","text":"Manually install Ansible Collections from the Ansible Galaxy repository: ansible-galaxy collection install --upgrade serdigital64.system Automatic installation is also available by deploying A:Platform64","title":"Installation Procedure"},{"location":"roles/sys_repository/#contributing","text":"Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details.","title":"Contributing"},{"location":"roles/sys_repository/#author","text":"SerDigital64","title":"Author"},{"location":"roles/sys_repository/#license","text":"GPL-3.0-or-later","title":"License"},{"location":"roles/sys_shell/","text":"Ansible Role: serdigital64.system.sys_shell \u00b6 Purpose \u00b6 Manage Unix shells provisioning. Features available in the current version: Deploy application. Packages are defined in the variable sys_shell_profiles . Install shell plugins. Plugin catalog is defined in the variable sys_shell_plugins zsh Configure user profile for shell types: zsh bash Supported shells (defined in the variable sys_shell_flavour ): Tag Shell name csh C Shell zsh Z Shell bash Born Again Shell ksh Korn Shell The sys_shell Ansible-Role is part of the A:Platform64 project and is available in the system Ansible-Collection. Usage \u00b6 The following example is an Ansible Playbook that includes all the supported features: use this link if viewing the doc on github --- - name : \"System / Shell / Usage example\" hosts : \"localhost\" gather_facts : true vars : test_user : \"testusr64\" test_home : \"/home/testusr64\" pre_tasks : - name : \"Create test users\" vars : sys_user : setup : true sys_user_accounts : - name : \"{{ test_user }}\" home : \"{{ test_home }}\" ansible.builtin.include_role : name : \"serdigital64.system.sys_user\" tasks : - name : \"Example: Install unix shells bash, zsh, csh, ksh and plugins for zsh\" vars : sys_shell : resolve_prereq : true deploy : true sys_shell_catalog : bash : true csh : true ksh : true zsh : true ansible.builtin.include_role : name : \"serdigital64.system.sys_shell\" - name : \"Example: Add paths to PATH, add source script, and variable declarations to user's bash profile\" vars : sys_shell : setup : true sys_shell_catalog : bash : true sys_shell_users : - name : \"{{ test_user }}\" home : \"{{ test_home }}\" access : user : owner : \"{{ test_user }}\" group : owner : \"{{ test_user }}\" flavour : \"bash\" paths : - \"/tmp/test1\" - \"/tmp/test2\" include_system : true sources : - \"/tmp/test-source-script.sh\" variables : - name : \"VARIABLE1\" value : \"value1\" export : true - name : \"VARIABLE2\" value : \"value2\" export : true ansible.builtin.include_role : name : \"serdigital64.system.sys_shell\" ... The playbook can be run by executing: # Set ANSIBLE_COLLECTIONS_PATHS to the default location. Change as needed. ANSIBLE_COLLECTIONS_PATHS = \" ${ HOME } /.ansible/collections\" ansible-playbook \" ${ ANSIBLE_COLLECTIONS_PATHS } /ansible_collections/serdigital64/system/playbooks/sys_shell.yml\" Role Parameters \u00b6 Actions \u00b6 Use action-parameters to control what tasks are enabled for the role to execute. Parameters should be declared as task level vars as they are intented to be dynamic. sys_shell : resolve_prereq : deploy : setup : Parameter Required? Type Default Purpose / Value sys_shell.resolve_prereq no boolean false Enable automatic resolution of prequisites sys_shell.deploy no boolean false Enable installation of application packages sys_shell.setup no boolean false Enable user shell profile configuration End State \u00b6 Use end-state parameters to define the target state after role execution. Parameters should be declared in host_vars or group_vars as they are intended to be permanent. sys_shell_catalog : zsh : bash : ksh : csh : sys_shell_users : - name : flavour : access : user : owner : group : owner : mode : file : dir : home : paths : variables : - name : value : export : sources : include_system : sys_shell_actions : setup : overwrite : Parameter Required? Type Default Purpose / Value sys_shell_catalog no dictionary Define what unix shells will be available on the system sys_shell_catalog.zsh no boolean false Enable processing of the zsh shell sys_shell_catalog.bash no boolean false Enable processing of the bash shell sys_shell_catalog.csh no boolean false Enable processing of the csh shell sys_shell_catalog.ksh no boolean false Enable processing of the ksh shell sys_shell_user yes(setup) list Define the list of target users to setup sys_shell_user.name yes(setup) string Login name sys_shell_user.flavour yes(setup) string Profile shell type. Use the associated tag from the supported shell list sys_shell_user.access no dictionary Define access permissions for profile files sys_shell_user.access.user yes(setup) dictionary Define owning user sys_shell_user.access.user.owner yes(setup) string User name sys_shell_user.access.group yes(setup) dictionary Define owning group sys_shell_user.access.group.owner yes(setup) string Group name sys_shell_user.access.mode no dictionary Define file permissions sys_shell_user.access.mode.file no string Define permissions for files. Use octal notation sys_shell_user.access.mode.dir no string Define permissions for directories. Use octal notation sys_shell_user.home no string Full path to the user's home directory sys_shell_user.paths no list List of full paths to add to the PATH variable sys_shell_user.variables no list List of user defined variables to be added to the profile sys_shell_user.variables.0.name no string Variable name sys_shell_user.variables.0.value no string Variable value sys_shell_user.variables.0.export no boolean Export the variable? sys_shell_user.sources no list List of full path scripts to be included in the profile (source) sys_shell_user.include_system no boolean Include system wide profile? sys_shell_actions no dictionary Set action options sys_shell_actions.setup no dictionary Set setup action options sys_shell_actions.setup.overwrite no boolean false Overwrite user configurations? Deployment \u00b6 OS Compatibility \u00b6 The operating system compatibility list is defined in the variable: sys_shell_platforms Dependencies \u00b6 Ansible Collections: serdigital64.automation auto_ansible_node serdigital64.system sys_package sys_repository Prerequisites \u00b6 The Ansible engine must be already installed and configured for privileged access and remote execution. In addition the following prerequisites can be automatically solved when running the playbook by setting the role action: resolve_prereq: true Package manager for the target application is installed and enabled. Installation Procedure \u00b6 Manually install Ansible Collections from the Ansible Galaxy repository: ansible-galaxy collection install --upgrade serdigital64.system Automatic installation is also available by deploying A:Platform64 Contributing \u00b6 Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details. Author \u00b6 SerDigital64 License \u00b6 GPL-3.0-or-later","title":"sys_shell"},{"location":"roles/sys_shell/#ansible-role-serdigital64systemsys_shell","text":"","title":"Ansible Role: serdigital64.system.sys_shell"},{"location":"roles/sys_shell/#purpose","text":"Manage Unix shells provisioning. Features available in the current version: Deploy application. Packages are defined in the variable sys_shell_profiles . Install shell plugins. Plugin catalog is defined in the variable sys_shell_plugins zsh Configure user profile for shell types: zsh bash Supported shells (defined in the variable sys_shell_flavour ): Tag Shell name csh C Shell zsh Z Shell bash Born Again Shell ksh Korn Shell The sys_shell Ansible-Role is part of the A:Platform64 project and is available in the system Ansible-Collection.","title":"Purpose"},{"location":"roles/sys_shell/#usage","text":"The following example is an Ansible Playbook that includes all the supported features: use this link if viewing the doc on github --- - name : \"System / Shell / Usage example\" hosts : \"localhost\" gather_facts : true vars : test_user : \"testusr64\" test_home : \"/home/testusr64\" pre_tasks : - name : \"Create test users\" vars : sys_user : setup : true sys_user_accounts : - name : \"{{ test_user }}\" home : \"{{ test_home }}\" ansible.builtin.include_role : name : \"serdigital64.system.sys_user\" tasks : - name : \"Example: Install unix shells bash, zsh, csh, ksh and plugins for zsh\" vars : sys_shell : resolve_prereq : true deploy : true sys_shell_catalog : bash : true csh : true ksh : true zsh : true ansible.builtin.include_role : name : \"serdigital64.system.sys_shell\" - name : \"Example: Add paths to PATH, add source script, and variable declarations to user's bash profile\" vars : sys_shell : setup : true sys_shell_catalog : bash : true sys_shell_users : - name : \"{{ test_user }}\" home : \"{{ test_home }}\" access : user : owner : \"{{ test_user }}\" group : owner : \"{{ test_user }}\" flavour : \"bash\" paths : - \"/tmp/test1\" - \"/tmp/test2\" include_system : true sources : - \"/tmp/test-source-script.sh\" variables : - name : \"VARIABLE1\" value : \"value1\" export : true - name : \"VARIABLE2\" value : \"value2\" export : true ansible.builtin.include_role : name : \"serdigital64.system.sys_shell\" ... The playbook can be run by executing: # Set ANSIBLE_COLLECTIONS_PATHS to the default location. Change as needed. ANSIBLE_COLLECTIONS_PATHS = \" ${ HOME } /.ansible/collections\" ansible-playbook \" ${ ANSIBLE_COLLECTIONS_PATHS } /ansible_collections/serdigital64/system/playbooks/sys_shell.yml\"","title":"Usage"},{"location":"roles/sys_shell/#role-parameters","text":"","title":"Role Parameters"},{"location":"roles/sys_shell/#actions","text":"Use action-parameters to control what tasks are enabled for the role to execute. Parameters should be declared as task level vars as they are intented to be dynamic. sys_shell : resolve_prereq : deploy : setup : Parameter Required? Type Default Purpose / Value sys_shell.resolve_prereq no boolean false Enable automatic resolution of prequisites sys_shell.deploy no boolean false Enable installation of application packages sys_shell.setup no boolean false Enable user shell profile configuration","title":"Actions"},{"location":"roles/sys_shell/#end-state","text":"Use end-state parameters to define the target state after role execution. Parameters should be declared in host_vars or group_vars as they are intended to be permanent. sys_shell_catalog : zsh : bash : ksh : csh : sys_shell_users : - name : flavour : access : user : owner : group : owner : mode : file : dir : home : paths : variables : - name : value : export : sources : include_system : sys_shell_actions : setup : overwrite : Parameter Required? Type Default Purpose / Value sys_shell_catalog no dictionary Define what unix shells will be available on the system sys_shell_catalog.zsh no boolean false Enable processing of the zsh shell sys_shell_catalog.bash no boolean false Enable processing of the bash shell sys_shell_catalog.csh no boolean false Enable processing of the csh shell sys_shell_catalog.ksh no boolean false Enable processing of the ksh shell sys_shell_user yes(setup) list Define the list of target users to setup sys_shell_user.name yes(setup) string Login name sys_shell_user.flavour yes(setup) string Profile shell type. Use the associated tag from the supported shell list sys_shell_user.access no dictionary Define access permissions for profile files sys_shell_user.access.user yes(setup) dictionary Define owning user sys_shell_user.access.user.owner yes(setup) string User name sys_shell_user.access.group yes(setup) dictionary Define owning group sys_shell_user.access.group.owner yes(setup) string Group name sys_shell_user.access.mode no dictionary Define file permissions sys_shell_user.access.mode.file no string Define permissions for files. Use octal notation sys_shell_user.access.mode.dir no string Define permissions for directories. Use octal notation sys_shell_user.home no string Full path to the user's home directory sys_shell_user.paths no list List of full paths to add to the PATH variable sys_shell_user.variables no list List of user defined variables to be added to the profile sys_shell_user.variables.0.name no string Variable name sys_shell_user.variables.0.value no string Variable value sys_shell_user.variables.0.export no boolean Export the variable? sys_shell_user.sources no list List of full path scripts to be included in the profile (source) sys_shell_user.include_system no boolean Include system wide profile? sys_shell_actions no dictionary Set action options sys_shell_actions.setup no dictionary Set setup action options sys_shell_actions.setup.overwrite no boolean false Overwrite user configurations?","title":"End State"},{"location":"roles/sys_shell/#deployment","text":"","title":"Deployment"},{"location":"roles/sys_shell/#os-compatibility","text":"The operating system compatibility list is defined in the variable: sys_shell_platforms","title":"OS Compatibility"},{"location":"roles/sys_shell/#dependencies","text":"Ansible Collections: serdigital64.automation auto_ansible_node serdigital64.system sys_package sys_repository","title":"Dependencies"},{"location":"roles/sys_shell/#prerequisites","text":"The Ansible engine must be already installed and configured for privileged access and remote execution. In addition the following prerequisites can be automatically solved when running the playbook by setting the role action: resolve_prereq: true Package manager for the target application is installed and enabled.","title":"Prerequisites"},{"location":"roles/sys_shell/#installation-procedure","text":"Manually install Ansible Collections from the Ansible Galaxy repository: ansible-galaxy collection install --upgrade serdigital64.system Automatic installation is also available by deploying A:Platform64","title":"Installation Procedure"},{"location":"roles/sys_shell/#contributing","text":"Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details.","title":"Contributing"},{"location":"roles/sys_shell/#author","text":"SerDigital64","title":"Author"},{"location":"roles/sys_shell/#license","text":"GPL-3.0-or-later","title":"License"},{"location":"roles/sys_subsystem/","text":"Ansible Role: serdigital64.system.sys_subsystem \u00b6 Purpose \u00b6 Manage Linux subsystem configuration Supported features in the current version: Register custom subsystem Deploy subsystem optional tools. Packages are defined in the variable sys_subsystem_profiles . Supported subsystem managers: SystemD The sys_subsystem Ansible-Role is part of the A:Platform64 project and is available in the system Ansible-Collection. Usage \u00b6 The following example is an Ansible Playbook that includes all the supported features: use this link if viewing the doc on github --- - name : \"System / Subsystem / Usage example\" hosts : \"localhost\" gather_facts : true tasks : - name : \"Example: Deploy subsystem optional tools\" vars : sys_subsystem : resolve_prereq : true deploy : true ansible.builtin.include_role : name : \"serdigital64.system.sys_subsystem\" - name : \"Example: Add Prometheus server as a SystemD service\" vars : sys_subsystem : setup : true sys_subsystem_custom : - name : \"prometheusd\" description : \"Prometheus Server\" type : simple : true working_directory : \"/var/opt/prometheus/run\" user : \"promsrv\" exec_start : \"{{ '/opt/prometheus/bin/prometheus' + ' --config.file ' + '/opt/prometheus/etc/prometheus.yml' ' --storage.tsdb.path ' + '/var/opt/prometheus/db' }}\" restart : on_failure : true std_output : journal : true std_error : journal : true wanted_by : multi_user : true ansible.builtin.include_role : name : \"serdigital64.system.sys_subsystem\" ... The playbook can be run by executing: # Set ANSIBLE_COLLECTIONS_PATHS to the default location. Change as needed. ANSIBLE_COLLECTIONS_PATHS = \" ${ HOME } /.ansible/collections\" ansible-playbook \" ${ ANSIBLE_COLLECTIONS_PATHS } /ansible_collections/serdigital64/system/playbooks/sys_subsystem.yml\" Role Parameters \u00b6 Actions \u00b6 Use action-parameters to control what tasks are enabled for the role to execute. Parameters should be declared as task level vars as they are intented to be dynamic. sys_subsystem : resolve_prereq : deploy : setup : Parameter Required? Type Default Purpose / Value sys_subsystem.resolve_prereq no boolean false Enable automatic resolution of prequisites sys_subsystem.deploy no boolean false Enable installation of optional tools sys_subsystem.setup no boolean false Enable system services configuration End State \u00b6 Use end-state parameters to define the target state after role execution. Parameters should be declared in host_vars or group_vars as they are intended to be permanent. sys_subsystem_custom : - name : description : start_type : simple : working_directory : user : exec_start : restart : on_failure : std_output : none : journal : std_error : journal : wanted_by : multi_user : Parameter Required? Type Default Purpose / Value sys_subsystem_custom no list List of custom services sys_subsystem_custom.0.name yes string Service name sys_subsystem_custom.0.description no string \"Service {{ sys_subsystem_custom.0.name }}\" Service short description sys_subsystem_custom.0.start_type yes dictionary Define the process start-up type sys_subsystem_custom.0.start_type.simple no boolean SystemD type: simple sys_subsystem_custom.0.working_directory no string Working directory, full path sys_subsystem_custom.0.user no string 'root' User that will run the service sys_subsystem_custom.0.exec_start yes string Full path to the service program sys_subsystem_custom.0.restart no dictionary Define when to restart the service sys_subsystem_custom.0.on_failure no boolean SystemD Event: On Failure sys_subsystem_custom.0.std_output no dictionary Where to redireect stdoutput to sys_subsystem_custom.0.journal no boolean Use SystemD Journal sys_subsystem_custom.0.std_error no dictionary Where to redireect stderr to sys_subsystem_custom.0.journal no boolean Use SystemD Journal sys_subsystem_custom.0.wanted_by no string When to run the service sys_subsystem_custom.0.wanted_by.multi_user no boolean SystemD Target: multi user Deployment \u00b6 OS Compatibility \u00b6 The operating system compatibility list is defined in the variable: sys_subsystem_platforms Dependencies \u00b6 Ansible Collections: serdigital64.backup bkp_archive serdigital64.system sys_package sys_repository sys_package Prerequisites \u00b6 The Ansible engine must be already installed and configured for privileged access and remote execution. In addition the following prerequisites can be automatically solved when running the playbook by setting the role action: resolve_prereq: true Package manager for the target application is installed and enabled. Installation Procedure \u00b6 Manually install Ansible Collections from the Ansible Galaxy repository: ansible-galaxy collection install --upgrade serdigital64.system Automatic installation is also available by deploying A:Platform64 Contributing \u00b6 Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details. Author \u00b6 SerDigital64 License \u00b6 GPL-3.0-or-later","title":"sys_subsystem"},{"location":"roles/sys_subsystem/#ansible-role-serdigital64systemsys_subsystem","text":"","title":"Ansible Role: serdigital64.system.sys_subsystem"},{"location":"roles/sys_subsystem/#purpose","text":"Manage Linux subsystem configuration Supported features in the current version: Register custom subsystem Deploy subsystem optional tools. Packages are defined in the variable sys_subsystem_profiles . Supported subsystem managers: SystemD The sys_subsystem Ansible-Role is part of the A:Platform64 project and is available in the system Ansible-Collection.","title":"Purpose"},{"location":"roles/sys_subsystem/#usage","text":"The following example is an Ansible Playbook that includes all the supported features: use this link if viewing the doc on github --- - name : \"System / Subsystem / Usage example\" hosts : \"localhost\" gather_facts : true tasks : - name : \"Example: Deploy subsystem optional tools\" vars : sys_subsystem : resolve_prereq : true deploy : true ansible.builtin.include_role : name : \"serdigital64.system.sys_subsystem\" - name : \"Example: Add Prometheus server as a SystemD service\" vars : sys_subsystem : setup : true sys_subsystem_custom : - name : \"prometheusd\" description : \"Prometheus Server\" type : simple : true working_directory : \"/var/opt/prometheus/run\" user : \"promsrv\" exec_start : \"{{ '/opt/prometheus/bin/prometheus' + ' --config.file ' + '/opt/prometheus/etc/prometheus.yml' ' --storage.tsdb.path ' + '/var/opt/prometheus/db' }}\" restart : on_failure : true std_output : journal : true std_error : journal : true wanted_by : multi_user : true ansible.builtin.include_role : name : \"serdigital64.system.sys_subsystem\" ... The playbook can be run by executing: # Set ANSIBLE_COLLECTIONS_PATHS to the default location. Change as needed. ANSIBLE_COLLECTIONS_PATHS = \" ${ HOME } /.ansible/collections\" ansible-playbook \" ${ ANSIBLE_COLLECTIONS_PATHS } /ansible_collections/serdigital64/system/playbooks/sys_subsystem.yml\"","title":"Usage"},{"location":"roles/sys_subsystem/#role-parameters","text":"","title":"Role Parameters"},{"location":"roles/sys_subsystem/#actions","text":"Use action-parameters to control what tasks are enabled for the role to execute. Parameters should be declared as task level vars as they are intented to be dynamic. sys_subsystem : resolve_prereq : deploy : setup : Parameter Required? Type Default Purpose / Value sys_subsystem.resolve_prereq no boolean false Enable automatic resolution of prequisites sys_subsystem.deploy no boolean false Enable installation of optional tools sys_subsystem.setup no boolean false Enable system services configuration","title":"Actions"},{"location":"roles/sys_subsystem/#end-state","text":"Use end-state parameters to define the target state after role execution. Parameters should be declared in host_vars or group_vars as they are intended to be permanent. sys_subsystem_custom : - name : description : start_type : simple : working_directory : user : exec_start : restart : on_failure : std_output : none : journal : std_error : journal : wanted_by : multi_user : Parameter Required? Type Default Purpose / Value sys_subsystem_custom no list List of custom services sys_subsystem_custom.0.name yes string Service name sys_subsystem_custom.0.description no string \"Service {{ sys_subsystem_custom.0.name }}\" Service short description sys_subsystem_custom.0.start_type yes dictionary Define the process start-up type sys_subsystem_custom.0.start_type.simple no boolean SystemD type: simple sys_subsystem_custom.0.working_directory no string Working directory, full path sys_subsystem_custom.0.user no string 'root' User that will run the service sys_subsystem_custom.0.exec_start yes string Full path to the service program sys_subsystem_custom.0.restart no dictionary Define when to restart the service sys_subsystem_custom.0.on_failure no boolean SystemD Event: On Failure sys_subsystem_custom.0.std_output no dictionary Where to redireect stdoutput to sys_subsystem_custom.0.journal no boolean Use SystemD Journal sys_subsystem_custom.0.std_error no dictionary Where to redireect stderr to sys_subsystem_custom.0.journal no boolean Use SystemD Journal sys_subsystem_custom.0.wanted_by no string When to run the service sys_subsystem_custom.0.wanted_by.multi_user no boolean SystemD Target: multi user","title":"End State"},{"location":"roles/sys_subsystem/#deployment","text":"","title":"Deployment"},{"location":"roles/sys_subsystem/#os-compatibility","text":"The operating system compatibility list is defined in the variable: sys_subsystem_platforms","title":"OS Compatibility"},{"location":"roles/sys_subsystem/#dependencies","text":"Ansible Collections: serdigital64.backup bkp_archive serdigital64.system sys_package sys_repository sys_package","title":"Dependencies"},{"location":"roles/sys_subsystem/#prerequisites","text":"The Ansible engine must be already installed and configured for privileged access and remote execution. In addition the following prerequisites can be automatically solved when running the playbook by setting the role action: resolve_prereq: true Package manager for the target application is installed and enabled.","title":"Prerequisites"},{"location":"roles/sys_subsystem/#installation-procedure","text":"Manually install Ansible Collections from the Ansible Galaxy repository: ansible-galaxy collection install --upgrade serdigital64.system Automatic installation is also available by deploying A:Platform64","title":"Installation Procedure"},{"location":"roles/sys_subsystem/#contributing","text":"Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details.","title":"Contributing"},{"location":"roles/sys_subsystem/#author","text":"SerDigital64","title":"Author"},{"location":"roles/sys_subsystem/#license","text":"GPL-3.0-or-later","title":"License"},{"location":"roles/sys_sudo/","text":"Ansible Role: serdigital64.system.sys_sudo \u00b6 Purpose \u00b6 Manage provisioning of the SuDo tool. Supported features in the current version: Deploy application. Packages are defined in the variable sys_sudo_profiles . Setup system wide sudoers Add/Remove user rules The sys_sudo Ansible-Role is part of the A:Platform64 project and is available in the system Ansible-Collection. Usage \u00b6 The following example is an Ansible Playbook that includes all the supported features: use this link if viewing the doc on github --- - name : \"System / SuDo / Usage example\" hosts : \"localhost\" gather_facts : true vars : test_user : \"testusr64\" pre_tasks : - name : \"Create test users\" vars : sys_user : setup : true sys_user_accounts : - name : \"{{ test_user }}\" ansible.builtin.include_role : name : \"serdigital64.system.sys_user\" tasks : - name : \"Example: Add user rule to sudoers\" vars : sys_sudo : resolve_prereq : true deploy : true setup : true sys_sudo_rules : user : - name : \"{{ test_user }}\" rule : \"ALL=(ALL) NOPASSWD: ALL\" present : true ansible.builtin.include_role : name : \"serdigital64.system.sys_sudo\" ... The playbook can be run by executing: # Set ANSIBLE_COLLECTIONS_PATHS to the default install location. Change as needed. ANSIBLE_COLLECTIONS_PATHS = \" ${ HOME } /.ansible/collections\" ansible-playbook \" ${ ANSIBLE_COLLECTIONS_PATHS } /ansible_collections/serdigital64/system/playbooks/sys_sudo.yml\" Role Parameters \u00b6 Actions \u00b6 Use action-parameters to control what tasks are enabled for the role to execute. Parameters should be declared as task level vars as they are intented to be dynamic. sys_sudo : resolve_prereq : deploy : setup : Parameter Required? Type Default Purpose / Value sys_sudo.resolve_prereq no boolean false Enable automatic resolution of prequisites sys_sudo.deploy no boolean false Enable installation of application packages sys_sudo.sudo no boolean false Enable application configuration End State \u00b6 Use end-state parameters to define the target state after role execution. Parameters should be declared in host_vars or group_vars as they are intended to be permanent. sys_sudo_application : name : type : version : installed : sys_sudo_rules : user : - name : rule : present : Parameter Required? Type Default Purpose / Value sys_sudo_application no dictionary Set application package end state sys_sudo_application.name no string \"sudo\" Select application package name sys_sudo_application.type no string \"distro\" Select application package type sys_sudo_application.version no string \"latest\" Select application package version sys_sudo_application.installed no boolean true Set application package end state sys_sudo_rules yes(setup) list Define what sudoers rules to process sys_sudo_rules.user yes(setup) list Define user rules sys_sudo_rules.user.0.name yes(setup) string Define user name sys_sudo_rules.user.0.rule yes(setup) string Define sudoers rule sys_sudo_rules.user.0.present no boolean true Set the rule end state Deployment \u00b6 OS Compatibility \u00b6 The operating system compatibility list is defined in the variable: sys_sudo_platforms Dependencies \u00b6 Ansible Collections: serdigital64.backup bkp_archive serdigital64.system sys_package sys_repository Prerequisites \u00b6 The Ansible engine must be already installed and configured for privileged access and remote execution. In addition the following prerequisites can be automatically solved when running the playbook by setting the role action: resolve_prereq: true Package manager for the target application is installed and enabled. Installation Procedure \u00b6 Manually install Ansible Collections from the Ansible Galaxy repository: ansible-galaxy collection install --upgrade serdigital64.system Automatic installation is also available by deploying A:Platform64 Contributing \u00b6 Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details. Author \u00b6 SerDigital64 License \u00b6 GPL-3.0-or-later","title":"sys_sudo"},{"location":"roles/sys_sudo/#ansible-role-serdigital64systemsys_sudo","text":"","title":"Ansible Role: serdigital64.system.sys_sudo"},{"location":"roles/sys_sudo/#purpose","text":"Manage provisioning of the SuDo tool. Supported features in the current version: Deploy application. Packages are defined in the variable sys_sudo_profiles . Setup system wide sudoers Add/Remove user rules The sys_sudo Ansible-Role is part of the A:Platform64 project and is available in the system Ansible-Collection.","title":"Purpose"},{"location":"roles/sys_sudo/#usage","text":"The following example is an Ansible Playbook that includes all the supported features: use this link if viewing the doc on github --- - name : \"System / SuDo / Usage example\" hosts : \"localhost\" gather_facts : true vars : test_user : \"testusr64\" pre_tasks : - name : \"Create test users\" vars : sys_user : setup : true sys_user_accounts : - name : \"{{ test_user }}\" ansible.builtin.include_role : name : \"serdigital64.system.sys_user\" tasks : - name : \"Example: Add user rule to sudoers\" vars : sys_sudo : resolve_prereq : true deploy : true setup : true sys_sudo_rules : user : - name : \"{{ test_user }}\" rule : \"ALL=(ALL) NOPASSWD: ALL\" present : true ansible.builtin.include_role : name : \"serdigital64.system.sys_sudo\" ... The playbook can be run by executing: # Set ANSIBLE_COLLECTIONS_PATHS to the default install location. Change as needed. ANSIBLE_COLLECTIONS_PATHS = \" ${ HOME } /.ansible/collections\" ansible-playbook \" ${ ANSIBLE_COLLECTIONS_PATHS } /ansible_collections/serdigital64/system/playbooks/sys_sudo.yml\"","title":"Usage"},{"location":"roles/sys_sudo/#role-parameters","text":"","title":"Role Parameters"},{"location":"roles/sys_sudo/#actions","text":"Use action-parameters to control what tasks are enabled for the role to execute. Parameters should be declared as task level vars as they are intented to be dynamic. sys_sudo : resolve_prereq : deploy : setup : Parameter Required? Type Default Purpose / Value sys_sudo.resolve_prereq no boolean false Enable automatic resolution of prequisites sys_sudo.deploy no boolean false Enable installation of application packages sys_sudo.sudo no boolean false Enable application configuration","title":"Actions"},{"location":"roles/sys_sudo/#end-state","text":"Use end-state parameters to define the target state after role execution. Parameters should be declared in host_vars or group_vars as they are intended to be permanent. sys_sudo_application : name : type : version : installed : sys_sudo_rules : user : - name : rule : present : Parameter Required? Type Default Purpose / Value sys_sudo_application no dictionary Set application package end state sys_sudo_application.name no string \"sudo\" Select application package name sys_sudo_application.type no string \"distro\" Select application package type sys_sudo_application.version no string \"latest\" Select application package version sys_sudo_application.installed no boolean true Set application package end state sys_sudo_rules yes(setup) list Define what sudoers rules to process sys_sudo_rules.user yes(setup) list Define user rules sys_sudo_rules.user.0.name yes(setup) string Define user name sys_sudo_rules.user.0.rule yes(setup) string Define sudoers rule sys_sudo_rules.user.0.present no boolean true Set the rule end state","title":"End State"},{"location":"roles/sys_sudo/#deployment","text":"","title":"Deployment"},{"location":"roles/sys_sudo/#os-compatibility","text":"The operating system compatibility list is defined in the variable: sys_sudo_platforms","title":"OS Compatibility"},{"location":"roles/sys_sudo/#dependencies","text":"Ansible Collections: serdigital64.backup bkp_archive serdigital64.system sys_package sys_repository","title":"Dependencies"},{"location":"roles/sys_sudo/#prerequisites","text":"The Ansible engine must be already installed and configured for privileged access and remote execution. In addition the following prerequisites can be automatically solved when running the playbook by setting the role action: resolve_prereq: true Package manager for the target application is installed and enabled.","title":"Prerequisites"},{"location":"roles/sys_sudo/#installation-procedure","text":"Manually install Ansible Collections from the Ansible Galaxy repository: ansible-galaxy collection install --upgrade serdigital64.system Automatic installation is also available by deploying A:Platform64","title":"Installation Procedure"},{"location":"roles/sys_sudo/#contributing","text":"Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details.","title":"Contributing"},{"location":"roles/sys_sudo/#author","text":"SerDigital64","title":"Author"},{"location":"roles/sys_sudo/#license","text":"GPL-3.0-or-later","title":"License"},{"location":"roles/sys_tools/","text":"Ansible Role: serdigital64.system.sys_tools \u00b6 Purpose \u00b6 Manage basic OS tools provisioning. Supported features in the current version: Deploy tools: file gawk grep groff less lsof sed The sys_tools Ansible-Role is part of the A:Platform64 project and is available in the system Ansible-Collection. Usage \u00b6 The following example is an Ansible Playbook that includes all the supported features: use this link if viewing the doc on github --- - name : \"System / Tools / Usage example\" hosts : \"localhost\" gather_facts : true tasks : - name : \"Example: Install OS tools\" vars : sys_tools : resolve_prereq : true deploy : true sys_tools_catalog : file : true groff : true less : true sed : true gawk : true grep : true lsof : true ansible.builtin.include_role : name : \"serdigital64.system.sys_tools\" ... The playbook can be run by executing: # Set ANSIBLE_COLLECTIONS_PATHS to the default install location. Change as needed. ANSIBLE_COLLECTIONS_PATHS = \" ${ HOME } /.ansible/collections\" ansible-playbook \" ${ ANSIBLE_COLLECTIONS_PATHS } /ansible_collections/serdigital64/system/playbooks/sys_tools.yml\" Role Parameters \u00b6 Actions \u00b6 Use action-parameters to control what tasks are enabled for the role to execute. Parameters should be declared as task level vars as they are intented to be dynamic. sys_tools : resolve_prereq : deploy : Parameter Required? Type Default Purpose / Value sys_tools.resolve_prereq no boolean false Enable automatic resolution of prequisites sys_tools.deploy no boolean false Enable installation of application packages End State \u00b6 Use end-state parameters to define the target state after role execution. Parameters should be declared in host_vars or group_vars as they are intended to be permanent. sys_tools_catalog : file : gawk : grep : groff : less : lsof : sed : Parameter Required? Type Default Purpose / Value sys_tools_catalog no dictionary Define available tools sys_tools_catalog.file no boolean false Install the tool? sys_tools_catalog.gawk no boolean false Install the tool? sys_tools_catalog.grep no boolean false Install the tool? sys_tools_catalog.groff no boolean false Install the tool? sys_tools_catalog.less no boolean false Install the tool? sys_tools_catalog.lsof no boolean false Install the tool? sys_tools_catalog.sed no boolean false Install the tool? Deployment \u00b6 OS Compatibility \u00b6 The operating system compatibility list is defined in the variable: sys_tools_platforms Dependencies \u00b6 Ansible Collections: serdigital64.backup bkp_archive serdigital64.system sys_package sys_repository Prerequisites \u00b6 The Ansible engine must be already installed and configured for privileged access and remote execution. In addition the following prerequisites can be automatically solved when running the playbook by setting the role action: resolve_prereq: true Package manager for the target application is installed and enabled. Installation Procedure \u00b6 Manually install Ansible Collections from the Ansible Galaxy repository: ansible-galaxy collection install --upgrade serdigital64.system Automatic installation is also available by deploying A:Platform64 Contributing \u00b6 Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details. Author \u00b6 SerDigital64 License \u00b6 GPL-3.0-or-later","title":"sys_tools"},{"location":"roles/sys_tools/#ansible-role-serdigital64systemsys_tools","text":"","title":"Ansible Role: serdigital64.system.sys_tools"},{"location":"roles/sys_tools/#purpose","text":"Manage basic OS tools provisioning. Supported features in the current version: Deploy tools: file gawk grep groff less lsof sed The sys_tools Ansible-Role is part of the A:Platform64 project and is available in the system Ansible-Collection.","title":"Purpose"},{"location":"roles/sys_tools/#usage","text":"The following example is an Ansible Playbook that includes all the supported features: use this link if viewing the doc on github --- - name : \"System / Tools / Usage example\" hosts : \"localhost\" gather_facts : true tasks : - name : \"Example: Install OS tools\" vars : sys_tools : resolve_prereq : true deploy : true sys_tools_catalog : file : true groff : true less : true sed : true gawk : true grep : true lsof : true ansible.builtin.include_role : name : \"serdigital64.system.sys_tools\" ... The playbook can be run by executing: # Set ANSIBLE_COLLECTIONS_PATHS to the default install location. Change as needed. ANSIBLE_COLLECTIONS_PATHS = \" ${ HOME } /.ansible/collections\" ansible-playbook \" ${ ANSIBLE_COLLECTIONS_PATHS } /ansible_collections/serdigital64/system/playbooks/sys_tools.yml\"","title":"Usage"},{"location":"roles/sys_tools/#role-parameters","text":"","title":"Role Parameters"},{"location":"roles/sys_tools/#actions","text":"Use action-parameters to control what tasks are enabled for the role to execute. Parameters should be declared as task level vars as they are intented to be dynamic. sys_tools : resolve_prereq : deploy : Parameter Required? Type Default Purpose / Value sys_tools.resolve_prereq no boolean false Enable automatic resolution of prequisites sys_tools.deploy no boolean false Enable installation of application packages","title":"Actions"},{"location":"roles/sys_tools/#end-state","text":"Use end-state parameters to define the target state after role execution. Parameters should be declared in host_vars or group_vars as they are intended to be permanent. sys_tools_catalog : file : gawk : grep : groff : less : lsof : sed : Parameter Required? Type Default Purpose / Value sys_tools_catalog no dictionary Define available tools sys_tools_catalog.file no boolean false Install the tool? sys_tools_catalog.gawk no boolean false Install the tool? sys_tools_catalog.grep no boolean false Install the tool? sys_tools_catalog.groff no boolean false Install the tool? sys_tools_catalog.less no boolean false Install the tool? sys_tools_catalog.lsof no boolean false Install the tool? sys_tools_catalog.sed no boolean false Install the tool?","title":"End State"},{"location":"roles/sys_tools/#deployment","text":"","title":"Deployment"},{"location":"roles/sys_tools/#os-compatibility","text":"The operating system compatibility list is defined in the variable: sys_tools_platforms","title":"OS Compatibility"},{"location":"roles/sys_tools/#dependencies","text":"Ansible Collections: serdigital64.backup bkp_archive serdigital64.system sys_package sys_repository","title":"Dependencies"},{"location":"roles/sys_tools/#prerequisites","text":"The Ansible engine must be already installed and configured for privileged access and remote execution. In addition the following prerequisites can be automatically solved when running the playbook by setting the role action: resolve_prereq: true Package manager for the target application is installed and enabled.","title":"Prerequisites"},{"location":"roles/sys_tools/#installation-procedure","text":"Manually install Ansible Collections from the Ansible Galaxy repository: ansible-galaxy collection install --upgrade serdigital64.system Automatic installation is also available by deploying A:Platform64","title":"Installation Procedure"},{"location":"roles/sys_tools/#contributing","text":"Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details.","title":"Contributing"},{"location":"roles/sys_tools/#author","text":"SerDigital64","title":"Author"},{"location":"roles/sys_tools/#license","text":"GPL-3.0-or-later","title":"License"},{"location":"roles/sys_user/","text":"Ansible Role: serdigital64.system.sys_user \u00b6 Purpose \u00b6 Manage Unix users and groups provisioning Supported features in the current version: Add user Add group The sys_user Ansible-Role is part of the A:Platform64 project and is available in the system Ansible-Collection. Usage \u00b6 The following example is an Ansible Playbook that includes all the supported features: use this link if viewing the doc on github --- - name : \"System / User / Usage example\" hosts : \"localhost\" gather_facts : true vars : test_user : \"testusr64\" test_group : \"testgrp64\" tasks : - name : \"Example: create group\" vars : sys_user : setup : true sys_user_groups : - name : \"{{ test_group }}\" system : false ansible.builtin.include_role : name : \"serdigital64.system.sys_user\" - name : \"Example: create user\" vars : sys_user : setup : true sys_user_accounts : - name : \"{{ test_user }}\" home : \"/home/{{ test_user }}\" description : \"test user\" shell : \"/usr/bin/bash\" locked : false system : false groups : - \"{{ test_group }}\" options : xdg : true ansible.builtin.include_role : name : \"serdigital64.system.sys_user\" ... The playbook can be run by executing: # Set ANSIBLE_COLLECTIONS_PATHS to the default location. Change as needed. ANSIBLE_COLLECTIONS_PATHS = \" ${ HOME } /.ansible/collections\" ansible-playbook \" ${ ANSIBLE_COLLECTIONS_PATHS } /ansible_collections/serdigital64/system/playbooks/sys_user.yml\" Role Parameters \u00b6 Actions \u00b6 Use action-parameters to control what tasks are enabled for the role to execute. Parameters should be declared as task level vars as they are intented to be dynamic. sys_user : setup : false Parameter Required? Type Default Purpose / Value sys_user.setup no boolean false Enable user/group provisioning End State \u00b6 Use end-state parameters to define the target state after role execution. Parameters should be declared in host_vars or group_vars as they are intended to be permanent. sys_user_accounts : - name : description : home : group : groups : shell : locked : password : hash : uid : expires : system : options : xdg : sys_user_groups : - name : description : gid : system : Parameter Required? Type Default Purpose / Value sys_user_accounts no list List of user definitions sys_user_accounts.[0].name yes string Login name sys_user_accounts.[0].description no string User description sys_user_accounts.[0].home no string Home directory sys_user_accounts.[0].group no string Primary group sys_user_accounts.[0].groups no list List of additional groups sys_user_accounts.[0].shell no string Full path to the shell sys_user_accounts.[0].locked no boolean Is the account locked? sys_user_accounts.[0].password no string Initial user password (plain) sys_user_accounts.[0].hash no string Initial user password (hash) sys_user_accounts.[0].uid no string Unix User ID sys_user_accounts.[0].expires no string Expiration date sys_user_accounts.[0].system no boolean Is this a system account? sys_user_accounts.[0].options.xdg no boolean Create XDG paths? sys_user_groups no list List of group definitions sys_user_groups.[0].name yes string Group name sys_user_groups.[0].description no string Group description sys_user_groups.[0].gid no string Unix group ID sys_user_groups.[0].system no string Is this a system group? Deployment \u00b6 OS Compatibility \u00b6 The operating system compatibility list is defined in the variable: sys_user_platforms Dependencies \u00b6 None Prerequisites \u00b6 The Ansible engine must be already installed and configured for privileged access and remote execution. Installation Procedure \u00b6 Manually install Ansible Collections from the Ansible Galaxy repository: ansible-galaxy collection install --upgrade serdigital64.system Automatic installation is also available by deploying A:Platform64 Contributing \u00b6 Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details. Author \u00b6 SerDigital64 License \u00b6 GPL-3.0-or-later \u2026","title":"sys_user"},{"location":"roles/sys_user/#ansible-role-serdigital64systemsys_user","text":"","title":"Ansible Role: serdigital64.system.sys_user"},{"location":"roles/sys_user/#purpose","text":"Manage Unix users and groups provisioning Supported features in the current version: Add user Add group The sys_user Ansible-Role is part of the A:Platform64 project and is available in the system Ansible-Collection.","title":"Purpose"},{"location":"roles/sys_user/#usage","text":"The following example is an Ansible Playbook that includes all the supported features: use this link if viewing the doc on github --- - name : \"System / User / Usage example\" hosts : \"localhost\" gather_facts : true vars : test_user : \"testusr64\" test_group : \"testgrp64\" tasks : - name : \"Example: create group\" vars : sys_user : setup : true sys_user_groups : - name : \"{{ test_group }}\" system : false ansible.builtin.include_role : name : \"serdigital64.system.sys_user\" - name : \"Example: create user\" vars : sys_user : setup : true sys_user_accounts : - name : \"{{ test_user }}\" home : \"/home/{{ test_user }}\" description : \"test user\" shell : \"/usr/bin/bash\" locked : false system : false groups : - \"{{ test_group }}\" options : xdg : true ansible.builtin.include_role : name : \"serdigital64.system.sys_user\" ... The playbook can be run by executing: # Set ANSIBLE_COLLECTIONS_PATHS to the default location. Change as needed. ANSIBLE_COLLECTIONS_PATHS = \" ${ HOME } /.ansible/collections\" ansible-playbook \" ${ ANSIBLE_COLLECTIONS_PATHS } /ansible_collections/serdigital64/system/playbooks/sys_user.yml\"","title":"Usage"},{"location":"roles/sys_user/#role-parameters","text":"","title":"Role Parameters"},{"location":"roles/sys_user/#actions","text":"Use action-parameters to control what tasks are enabled for the role to execute. Parameters should be declared as task level vars as they are intented to be dynamic. sys_user : setup : false Parameter Required? Type Default Purpose / Value sys_user.setup no boolean false Enable user/group provisioning","title":"Actions"},{"location":"roles/sys_user/#end-state","text":"Use end-state parameters to define the target state after role execution. Parameters should be declared in host_vars or group_vars as they are intended to be permanent. sys_user_accounts : - name : description : home : group : groups : shell : locked : password : hash : uid : expires : system : options : xdg : sys_user_groups : - name : description : gid : system : Parameter Required? Type Default Purpose / Value sys_user_accounts no list List of user definitions sys_user_accounts.[0].name yes string Login name sys_user_accounts.[0].description no string User description sys_user_accounts.[0].home no string Home directory sys_user_accounts.[0].group no string Primary group sys_user_accounts.[0].groups no list List of additional groups sys_user_accounts.[0].shell no string Full path to the shell sys_user_accounts.[0].locked no boolean Is the account locked? sys_user_accounts.[0].password no string Initial user password (plain) sys_user_accounts.[0].hash no string Initial user password (hash) sys_user_accounts.[0].uid no string Unix User ID sys_user_accounts.[0].expires no string Expiration date sys_user_accounts.[0].system no boolean Is this a system account? sys_user_accounts.[0].options.xdg no boolean Create XDG paths? sys_user_groups no list List of group definitions sys_user_groups.[0].name yes string Group name sys_user_groups.[0].description no string Group description sys_user_groups.[0].gid no string Unix group ID sys_user_groups.[0].system no string Is this a system group?","title":"End State"},{"location":"roles/sys_user/#deployment","text":"","title":"Deployment"},{"location":"roles/sys_user/#os-compatibility","text":"The operating system compatibility list is defined in the variable: sys_user_platforms","title":"OS Compatibility"},{"location":"roles/sys_user/#dependencies","text":"None","title":"Dependencies"},{"location":"roles/sys_user/#prerequisites","text":"The Ansible engine must be already installed and configured for privileged access and remote execution.","title":"Prerequisites"},{"location":"roles/sys_user/#installation-procedure","text":"Manually install Ansible Collections from the Ansible Galaxy repository: ansible-galaxy collection install --upgrade serdigital64.system Automatic installation is also available by deploying A:Platform64","title":"Installation Procedure"},{"location":"roles/sys_user/#contributing","text":"Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details.","title":"Contributing"},{"location":"roles/sys_user/#author","text":"SerDigital64","title":"Author"},{"location":"roles/sys_user/#license","text":"GPL-3.0-or-later \u2026","title":"License"},{"location":"roles/web_haproxy/","text":"Ansible Role: serdigital64.web.web_haproxy \u00b6 Purpose \u00b6 Manage provisioning of HAProxy. Supported features in the current version: Deploy application. Packages are defined in the variable web_haproxy_profiles . The web_haproxy Ansible-Role is part of the A:Platform64 project and is available in the web Ansible-Collection. Usage \u00b6 The following example is an Ansible Playbook that includes all the supported features: use this link if viewing the doc on github --- - name : \"Web / HAProxy / Usage example\" hosts : \"localhost\" gather_facts : true tasks : - name : \"Example: install application\" vars : web_haproxy : resolve_prereq : true deploy : true ansible.builtin.include_role : name : \"serdigital64.web.web_haproxy\" ... The playbook can be run by executing: # Set ANSIBLE_COLLECTIONS_PATHS to the default location. Change as needed. ANSIBLE_COLLECTIONS_PATHS = \" ${ HOME } /.ansible/collections\" ansible-playbook \" ${ ANSIBLE_COLLECTIONS_PATHS } /ansible_collections/serdigital64/web/playbooks/web_haproxy.yml\" Role Parameters \u00b6 Actions \u00b6 Use action-parameters to control what tasks are enabled for the role to execute. Parameters should be declared as task level vars as they are intented to be dynamic. web_haproxy : resolve_prereq : deploy : Parameter Required? Type Default Purpose / Value web_haproxy.resolve_prereq no boolean false Enable automatic resolution of prequisites web_haproxy.deploy no boolean false Enable installation of application packages End State \u00b6 Use end-state parameters to define the target state after role execution. Parameters should be declared in host_vars or group_vars as they are intended to be permanent. web_haproxy_application : name : type : version : installed : Parameter Required? Type Default Purpose / Value web_haproxy_application yes(deploy) dictionary Set application package end state web_haproxy_application.name yes string \"haproxy\" Select application package name web_haproxy_application.type yes string \"distro\" Select application package type web_haproxy_application.version yes string \"latest\" Select application package version web_haproxy_application.installed yes boolean true Set application package end state Deployment \u00b6 OS Compatibility \u00b6 The operating system compatibility list is defined in the variable: web_haproxy_platforms Dependencies \u00b6 Ansible Collections: serdigital64.backup bkp_archive serdigital64.system sys_package sys_repository Prerequisites \u00b6 The Ansible engine must be already installed and configured for privileged access and remote execution. In addition the following prerequisites can be automatically solved when running the playbook by setting the role action: resolve_prereq: true Package manager for the target application is installed and enabled. Installation Procedure \u00b6 Manually install Ansible Collections from the Ansible Galaxy repository: ansible-galaxy collection install serdigital64.web Automatic installation is also available by deploying A:Platform64 Contributing \u00b6 Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details. Author \u00b6 SerDigital64 License \u00b6 GPL-3.0-or-later","title":"web_haproxy"},{"location":"roles/web_haproxy/#ansible-role-serdigital64webweb_haproxy","text":"","title":"Ansible Role: serdigital64.web.web_haproxy"},{"location":"roles/web_haproxy/#purpose","text":"Manage provisioning of HAProxy. Supported features in the current version: Deploy application. Packages are defined in the variable web_haproxy_profiles . The web_haproxy Ansible-Role is part of the A:Platform64 project and is available in the web Ansible-Collection.","title":"Purpose"},{"location":"roles/web_haproxy/#usage","text":"The following example is an Ansible Playbook that includes all the supported features: use this link if viewing the doc on github --- - name : \"Web / HAProxy / Usage example\" hosts : \"localhost\" gather_facts : true tasks : - name : \"Example: install application\" vars : web_haproxy : resolve_prereq : true deploy : true ansible.builtin.include_role : name : \"serdigital64.web.web_haproxy\" ... The playbook can be run by executing: # Set ANSIBLE_COLLECTIONS_PATHS to the default location. Change as needed. ANSIBLE_COLLECTIONS_PATHS = \" ${ HOME } /.ansible/collections\" ansible-playbook \" ${ ANSIBLE_COLLECTIONS_PATHS } /ansible_collections/serdigital64/web/playbooks/web_haproxy.yml\"","title":"Usage"},{"location":"roles/web_haproxy/#role-parameters","text":"","title":"Role Parameters"},{"location":"roles/web_haproxy/#actions","text":"Use action-parameters to control what tasks are enabled for the role to execute. Parameters should be declared as task level vars as they are intented to be dynamic. web_haproxy : resolve_prereq : deploy : Parameter Required? Type Default Purpose / Value web_haproxy.resolve_prereq no boolean false Enable automatic resolution of prequisites web_haproxy.deploy no boolean false Enable installation of application packages","title":"Actions"},{"location":"roles/web_haproxy/#end-state","text":"Use end-state parameters to define the target state after role execution. Parameters should be declared in host_vars or group_vars as they are intended to be permanent. web_haproxy_application : name : type : version : installed : Parameter Required? Type Default Purpose / Value web_haproxy_application yes(deploy) dictionary Set application package end state web_haproxy_application.name yes string \"haproxy\" Select application package name web_haproxy_application.type yes string \"distro\" Select application package type web_haproxy_application.version yes string \"latest\" Select application package version web_haproxy_application.installed yes boolean true Set application package end state","title":"End State"},{"location":"roles/web_haproxy/#deployment","text":"","title":"Deployment"},{"location":"roles/web_haproxy/#os-compatibility","text":"The operating system compatibility list is defined in the variable: web_haproxy_platforms","title":"OS Compatibility"},{"location":"roles/web_haproxy/#dependencies","text":"Ansible Collections: serdigital64.backup bkp_archive serdigital64.system sys_package sys_repository","title":"Dependencies"},{"location":"roles/web_haproxy/#prerequisites","text":"The Ansible engine must be already installed and configured for privileged access and remote execution. In addition the following prerequisites can be automatically solved when running the playbook by setting the role action: resolve_prereq: true Package manager for the target application is installed and enabled.","title":"Prerequisites"},{"location":"roles/web_haproxy/#installation-procedure","text":"Manually install Ansible Collections from the Ansible Galaxy repository: ansible-galaxy collection install serdigital64.web Automatic installation is also available by deploying A:Platform64","title":"Installation Procedure"},{"location":"roles/web_haproxy/#contributing","text":"Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details.","title":"Contributing"},{"location":"roles/web_haproxy/#author","text":"SerDigital64","title":"Author"},{"location":"roles/web_haproxy/#license","text":"GPL-3.0-or-later","title":"License"},{"location":"roles/web_httpd/","text":"Ansible Role: serdigital64.web.web_httpd \u00b6 Purpose \u00b6 Manage provisioning of Apache HTTPD. Supported features in the current version: Deploy application. Packages are defined in the variable web_httpd_profiles . The web_httpd Ansible-Role is part of the A:Platform64 project and is available in the web Ansible-Collection. Usage \u00b6 The following example is an Ansible Playbook that includes all the supported features: use this link if viewing the doc on github --- - name : \"Web / HTTPD / Usage example\" hosts : \"localhost\" gather_facts : true tasks : - name : \"Example: install application\" vars : web_httpd : resolve_prereq : true deploy : true ansible.builtin.include_role : name : \"serdigital64.web.web_httpd\" ... The playbook can be run by executing: # Set ANSIBLE_COLLECTIONS_PATHS to the default location. Change as needed. ANSIBLE_COLLECTIONS_PATHS = \" ${ HOME } /.ansible/collections\" ansible-playbook \" ${ ANSIBLE_COLLECTIONS_PATHS } /ansible_collections/serdigital64/web/playbooks/web_httpd.yml\" Role Parameters \u00b6 Actions \u00b6 Use action-parameters to control what tasks are enabled for the role to execute. Parameters should be declared as task level vars as they are intented to be dynamic. web_httpd : resolve_prereq : deploy : Parameter Required? Type Default Purpose / Value web_httpd.resolve_prereq no boolean false Enable automatic resolution of prequisites web_httpd.deploy no boolean false Enable installation of application packages End State \u00b6 Use end-state parameters to define the target state after role execution. Parameters should be declared in host_vars or group_vars as they are intended to be permanent. web_httpd_application : name : type : version : installed : Parameter Required? Type Default Purpose / Value web_httpd_application yes(deploy) dictionary Set application package end state web_httpd_application.name yes string \"httpd\" Select application package name web_httpd_application.type yes string \"distro\" Select application package type web_httpd_application.version yes string \"latest\" Select application package version web_httpd_application.installed yes boolean true Set application package end state Deployment \u00b6 OS Compatibility \u00b6 The operating system compatibility list is defined in the variable: web_httpd_platforms Dependencies \u00b6 Ansible Collections: serdigital64.backup bkp_archive serdigital64.system sys_package sys_repository Prerequisites \u00b6 The Ansible engine must be already installed and configured for privileged access and remote execution. In addition the following prerequisites can be automatically solved when running the playbook by setting the role action: resolve_prereq: true Package manager for the target application is installed and enabled. Installation Procedure \u00b6 Manually install Ansible Collections from the Ansible Galaxy repository: ansible-galaxy collection install serdigital64.web Automatic installation is also available by deploying A:Platform64 Contributing \u00b6 Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details. Author \u00b6 SerDigital64 License \u00b6 GPL-3.0-or-later","title":"web_httpd"},{"location":"roles/web_httpd/#ansible-role-serdigital64webweb_httpd","text":"","title":"Ansible Role: serdigital64.web.web_httpd"},{"location":"roles/web_httpd/#purpose","text":"Manage provisioning of Apache HTTPD. Supported features in the current version: Deploy application. Packages are defined in the variable web_httpd_profiles . The web_httpd Ansible-Role is part of the A:Platform64 project and is available in the web Ansible-Collection.","title":"Purpose"},{"location":"roles/web_httpd/#usage","text":"The following example is an Ansible Playbook that includes all the supported features: use this link if viewing the doc on github --- - name : \"Web / HTTPD / Usage example\" hosts : \"localhost\" gather_facts : true tasks : - name : \"Example: install application\" vars : web_httpd : resolve_prereq : true deploy : true ansible.builtin.include_role : name : \"serdigital64.web.web_httpd\" ... The playbook can be run by executing: # Set ANSIBLE_COLLECTIONS_PATHS to the default location. Change as needed. ANSIBLE_COLLECTIONS_PATHS = \" ${ HOME } /.ansible/collections\" ansible-playbook \" ${ ANSIBLE_COLLECTIONS_PATHS } /ansible_collections/serdigital64/web/playbooks/web_httpd.yml\"","title":"Usage"},{"location":"roles/web_httpd/#role-parameters","text":"","title":"Role Parameters"},{"location":"roles/web_httpd/#actions","text":"Use action-parameters to control what tasks are enabled for the role to execute. Parameters should be declared as task level vars as they are intented to be dynamic. web_httpd : resolve_prereq : deploy : Parameter Required? Type Default Purpose / Value web_httpd.resolve_prereq no boolean false Enable automatic resolution of prequisites web_httpd.deploy no boolean false Enable installation of application packages","title":"Actions"},{"location":"roles/web_httpd/#end-state","text":"Use end-state parameters to define the target state after role execution. Parameters should be declared in host_vars or group_vars as they are intended to be permanent. web_httpd_application : name : type : version : installed : Parameter Required? Type Default Purpose / Value web_httpd_application yes(deploy) dictionary Set application package end state web_httpd_application.name yes string \"httpd\" Select application package name web_httpd_application.type yes string \"distro\" Select application package type web_httpd_application.version yes string \"latest\" Select application package version web_httpd_application.installed yes boolean true Set application package end state","title":"End State"},{"location":"roles/web_httpd/#deployment","text":"","title":"Deployment"},{"location":"roles/web_httpd/#os-compatibility","text":"The operating system compatibility list is defined in the variable: web_httpd_platforms","title":"OS Compatibility"},{"location":"roles/web_httpd/#dependencies","text":"Ansible Collections: serdigital64.backup bkp_archive serdigital64.system sys_package sys_repository","title":"Dependencies"},{"location":"roles/web_httpd/#prerequisites","text":"The Ansible engine must be already installed and configured for privileged access and remote execution. In addition the following prerequisites can be automatically solved when running the playbook by setting the role action: resolve_prereq: true Package manager for the target application is installed and enabled.","title":"Prerequisites"},{"location":"roles/web_httpd/#installation-procedure","text":"Manually install Ansible Collections from the Ansible Galaxy repository: ansible-galaxy collection install serdigital64.web Automatic installation is also available by deploying A:Platform64","title":"Installation Procedure"},{"location":"roles/web_httpd/#contributing","text":"Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details.","title":"Contributing"},{"location":"roles/web_httpd/#author","text":"SerDigital64","title":"Author"},{"location":"roles/web_httpd/#license","text":"GPL-3.0-or-later","title":"License"},{"location":"roles/web_mkdocs/","text":"Ansible Role: serdigital64.web.web_mkdocs \u00b6 Purpose \u00b6 Manage provisioning of the MkDocs tool. Supported features in the current version: Deploy application. Packages are defined in the variable web_mkdocs_profiles . Create dedicated python venv location: /opt/mkdocs (defined in the variable web_mkdocs_base ). Create loader script to activate the venv and run the python script. Create dedicate user and group for owning the application. The web_mkdocs Ansible-Role is part of the A:Platform64 project and is available in the web Ansible-Collection. Usage \u00b6 The following example is an Ansible Playbook that includes all the supported features: use this link if viewing the doc on github --- - name : \"Web / MkDocs / Usage example\" hosts : \"localhost\" gather_facts : true tasks : - name : \"Example: install application\" vars : web_mkdocs : resolve_prereq : true deploy : true ansible.builtin.include_role : name : \"serdigital64.web.web_mkdocs\" ... The playbook can be run by executing: # Set ANSIBLE_COLLECTIONS_PATHS to the default location. Change as needed. ANSIBLE_COLLECTIONS_PATHS = \" ${ HOME } /.ansible/collections\" ansible-playbook \" ${ ANSIBLE_COLLECTIONS_PATHS } /ansible_collections/serdigital64/web/playbooks/web_mkdocs.yml\" Role Parameters \u00b6 Actions \u00b6 Use action-parameters to control what tasks are enabled for the role to execute. Parameters should be declared as task level vars as they are intented to be dynamic. web_mkdocs : resolve_prereq : deploy : Parameter Required? Type Default Purpose / Value web_mkdocs.resolve_prereq no boolean false Enable automatic resolution of prequisites web_mkdocs.deploy no boolean false Enable installation of application packages End State \u00b6 Use end-state parameters to define the target state after role execution. Parameters should be declared in host_vars or group_vars as they are intended to be permanent. web_mkdocs_application : name : type : version : installed : Parameter Required? Type Default Purpose / Value web_mkdocs_application yes(deploy) dictionary Set application package end state web_mkdocs_application.name yes(deploy) string \"mkdocs\" Select application package name web_mkdocs_application.type yes(deploy) string \"pip\" Select application package type web_mkdocs_application.version yes(deploy) string \"latest\" Select application package version web_mkdocs_application.installed yes(deploy) boolean true Set application package end state Deployment \u00b6 OS Compatibility \u00b6 The operating system compatibility list is defined in the variable: web_mkdocs_platforms Dependencies \u00b6 Ansible Collections: serdigital64.backup bkp_archive serdigital64.system sys_package sys_repository Prerequisites \u00b6 The Ansible engine must be already installed and configured for privileged access and remote execution. In addition the following prerequisites can be automatically solved when running the playbook by setting the role action: resolve_prereq: true Package manager for the target application is installed and enabled. Installation Procedure \u00b6 Manually install Ansible Collections from the Ansible Galaxy repository: ansible-galaxy collection install serdigital64.web Automatic installation is also available by deploying A:Platform64 Contributing \u00b6 Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details. Author \u00b6 SerDigital64 License \u00b6 GPL-3.0-or-later","title":"web_mkdocs"},{"location":"roles/web_mkdocs/#ansible-role-serdigital64webweb_mkdocs","text":"","title":"Ansible Role: serdigital64.web.web_mkdocs"},{"location":"roles/web_mkdocs/#purpose","text":"Manage provisioning of the MkDocs tool. Supported features in the current version: Deploy application. Packages are defined in the variable web_mkdocs_profiles . Create dedicated python venv location: /opt/mkdocs (defined in the variable web_mkdocs_base ). Create loader script to activate the venv and run the python script. Create dedicate user and group for owning the application. The web_mkdocs Ansible-Role is part of the A:Platform64 project and is available in the web Ansible-Collection.","title":"Purpose"},{"location":"roles/web_mkdocs/#usage","text":"The following example is an Ansible Playbook that includes all the supported features: use this link if viewing the doc on github --- - name : \"Web / MkDocs / Usage example\" hosts : \"localhost\" gather_facts : true tasks : - name : \"Example: install application\" vars : web_mkdocs : resolve_prereq : true deploy : true ansible.builtin.include_role : name : \"serdigital64.web.web_mkdocs\" ... The playbook can be run by executing: # Set ANSIBLE_COLLECTIONS_PATHS to the default location. Change as needed. ANSIBLE_COLLECTIONS_PATHS = \" ${ HOME } /.ansible/collections\" ansible-playbook \" ${ ANSIBLE_COLLECTIONS_PATHS } /ansible_collections/serdigital64/web/playbooks/web_mkdocs.yml\"","title":"Usage"},{"location":"roles/web_mkdocs/#role-parameters","text":"","title":"Role Parameters"},{"location":"roles/web_mkdocs/#actions","text":"Use action-parameters to control what tasks are enabled for the role to execute. Parameters should be declared as task level vars as they are intented to be dynamic. web_mkdocs : resolve_prereq : deploy : Parameter Required? Type Default Purpose / Value web_mkdocs.resolve_prereq no boolean false Enable automatic resolution of prequisites web_mkdocs.deploy no boolean false Enable installation of application packages","title":"Actions"},{"location":"roles/web_mkdocs/#end-state","text":"Use end-state parameters to define the target state after role execution. Parameters should be declared in host_vars or group_vars as they are intended to be permanent. web_mkdocs_application : name : type : version : installed : Parameter Required? Type Default Purpose / Value web_mkdocs_application yes(deploy) dictionary Set application package end state web_mkdocs_application.name yes(deploy) string \"mkdocs\" Select application package name web_mkdocs_application.type yes(deploy) string \"pip\" Select application package type web_mkdocs_application.version yes(deploy) string \"latest\" Select application package version web_mkdocs_application.installed yes(deploy) boolean true Set application package end state","title":"End State"},{"location":"roles/web_mkdocs/#deployment","text":"","title":"Deployment"},{"location":"roles/web_mkdocs/#os-compatibility","text":"The operating system compatibility list is defined in the variable: web_mkdocs_platforms","title":"OS Compatibility"},{"location":"roles/web_mkdocs/#dependencies","text":"Ansible Collections: serdigital64.backup bkp_archive serdigital64.system sys_package sys_repository","title":"Dependencies"},{"location":"roles/web_mkdocs/#prerequisites","text":"The Ansible engine must be already installed and configured for privileged access and remote execution. In addition the following prerequisites can be automatically solved when running the playbook by setting the role action: resolve_prereq: true Package manager for the target application is installed and enabled.","title":"Prerequisites"},{"location":"roles/web_mkdocs/#installation-procedure","text":"Manually install Ansible Collections from the Ansible Galaxy repository: ansible-galaxy collection install serdigital64.web Automatic installation is also available by deploying A:Platform64","title":"Installation Procedure"},{"location":"roles/web_mkdocs/#contributing","text":"Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details.","title":"Contributing"},{"location":"roles/web_mkdocs/#author","text":"SerDigital64","title":"Author"},{"location":"roles/web_mkdocs/#license","text":"GPL-3.0-or-later","title":"License"},{"location":"roles/web_nginx/","text":"Ansible Role: serdigital64.web.web_nginx \u00b6 Purpose \u00b6 Manage provisioning of NGINX. Supported features in the current version: Deploy application. Packages are defined in the variable web_nginx_profiles . The web_nginx Ansible-Role is part of the A:Platform64 project and is available in the web Ansible-Collection. Usage \u00b6 The following example is an Ansible Playbook that includes all the supported features: use this link if viewing the doc on github --- - name : \"Web / NGINX / Usage example\" hosts : \"localhost\" gather_facts : true tasks : - name : \"Example: install application\" vars : web_nginx : resolve_prereq : true deploy : true ansible.builtin.include_role : name : \"serdigital64.web.web_nginx\" ... The playbook can be run by executing: # Set ANSIBLE_COLLECTIONS_PATHS to the default location. Change as needed. ANSIBLE_COLLECTIONS_PATHS = \" ${ HOME } /.ansible/collections\" ansible-playbook \" ${ ANSIBLE_COLLECTIONS_PATHS } /ansible_collections/serdigital64/web/playbooks/web_nginx.yml\" Role Parameters \u00b6 Actions \u00b6 Use action-parameters to control what tasks are enabled for the role to execute. Parameters should be declared as task level vars as they are intented to be dynamic. web_nginx : resolve_prereq : deploy : Parameter Required? Type Default Purpose / Value web_nginx.resolve_prereq no boolean false Enable automatic resolution of prequisites web_nginx.deploy no boolean false Enable installation of application packages End State \u00b6 Use end-state parameters to define the target state after role execution. Parameters should be declared in host_vars or group_vars as they are intended to be permanent. web_nginx_application : name : type : version : installed : Parameter Required? Type Default Purpose / Value web_nginx_application yes(deploy) dictionary Set application package end state web_nginx_application.name yes string \"nginx\" Select application package name web_nginx_application.type yes string \"distro\" Select application package type web_nginx_application.version yes string \"latest\" Select application package version web_nginx_application.installed yes boolean true Set application package end state Deployment \u00b6 OS Compatibility \u00b6 The operating system compatibility list is defined in the variable: web_nginx_platforms Dependencies \u00b6 Ansible Collections: serdigital64.backup bkp_archive serdigital64.system sys_package sys_repository Prerequisites \u00b6 The Ansible engine must be already installed and configured for privileged access and remote execution. In addition the following prerequisites can be automatically solved when running the playbook by setting the role action: resolve_prereq: true Package manager for the target application is installed and enabled. Installation Procedure \u00b6 Manually install Ansible Collections from the Ansible Galaxy repository: ansible-galaxy collection install serdigital64.web Automatic installation is also available by deploying A:Platform64 Contributing \u00b6 Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details. Author \u00b6 SerDigital64 License \u00b6 GPL-3.0-or-later","title":"web_nginx"},{"location":"roles/web_nginx/#ansible-role-serdigital64webweb_nginx","text":"","title":"Ansible Role: serdigital64.web.web_nginx"},{"location":"roles/web_nginx/#purpose","text":"Manage provisioning of NGINX. Supported features in the current version: Deploy application. Packages are defined in the variable web_nginx_profiles . The web_nginx Ansible-Role is part of the A:Platform64 project and is available in the web Ansible-Collection.","title":"Purpose"},{"location":"roles/web_nginx/#usage","text":"The following example is an Ansible Playbook that includes all the supported features: use this link if viewing the doc on github --- - name : \"Web / NGINX / Usage example\" hosts : \"localhost\" gather_facts : true tasks : - name : \"Example: install application\" vars : web_nginx : resolve_prereq : true deploy : true ansible.builtin.include_role : name : \"serdigital64.web.web_nginx\" ... The playbook can be run by executing: # Set ANSIBLE_COLLECTIONS_PATHS to the default location. Change as needed. ANSIBLE_COLLECTIONS_PATHS = \" ${ HOME } /.ansible/collections\" ansible-playbook \" ${ ANSIBLE_COLLECTIONS_PATHS } /ansible_collections/serdigital64/web/playbooks/web_nginx.yml\"","title":"Usage"},{"location":"roles/web_nginx/#role-parameters","text":"","title":"Role Parameters"},{"location":"roles/web_nginx/#actions","text":"Use action-parameters to control what tasks are enabled for the role to execute. Parameters should be declared as task level vars as they are intented to be dynamic. web_nginx : resolve_prereq : deploy : Parameter Required? Type Default Purpose / Value web_nginx.resolve_prereq no boolean false Enable automatic resolution of prequisites web_nginx.deploy no boolean false Enable installation of application packages","title":"Actions"},{"location":"roles/web_nginx/#end-state","text":"Use end-state parameters to define the target state after role execution. Parameters should be declared in host_vars or group_vars as they are intended to be permanent. web_nginx_application : name : type : version : installed : Parameter Required? Type Default Purpose / Value web_nginx_application yes(deploy) dictionary Set application package end state web_nginx_application.name yes string \"nginx\" Select application package name web_nginx_application.type yes string \"distro\" Select application package type web_nginx_application.version yes string \"latest\" Select application package version web_nginx_application.installed yes boolean true Set application package end state","title":"End State"},{"location":"roles/web_nginx/#deployment","text":"","title":"Deployment"},{"location":"roles/web_nginx/#os-compatibility","text":"The operating system compatibility list is defined in the variable: web_nginx_platforms","title":"OS Compatibility"},{"location":"roles/web_nginx/#dependencies","text":"Ansible Collections: serdigital64.backup bkp_archive serdigital64.system sys_package sys_repository","title":"Dependencies"},{"location":"roles/web_nginx/#prerequisites","text":"The Ansible engine must be already installed and configured for privileged access and remote execution. In addition the following prerequisites can be automatically solved when running the playbook by setting the role action: resolve_prereq: true Package manager for the target application is installed and enabled.","title":"Prerequisites"},{"location":"roles/web_nginx/#installation-procedure","text":"Manually install Ansible Collections from the Ansible Galaxy repository: ansible-galaxy collection install serdigital64.web Automatic installation is also available by deploying A:Platform64","title":"Installation Procedure"},{"location":"roles/web_nginx/#contributing","text":"Help on implementing new features and maintaining the code base is welcomed. Please see the guidelines for further details.","title":"Contributing"},{"location":"roles/web_nginx/#author","text":"SerDigital64","title":"Author"},{"location":"roles/web_nginx/#license","text":"GPL-3.0-or-later","title":"License"}]}